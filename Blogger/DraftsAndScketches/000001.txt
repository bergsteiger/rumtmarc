<div dir="ltr" style="text-align: left;" trbidi="on">
Ещё раз хочу повторить вот что:<br />
<br />
1. тест должен быть линейным<br />
2. похожим на тест-кейс<br />
3. читаться человеком<br />
4. оперировать терминами предметной области<br />
<br />
К чему это я?<br />
<br />
Я сегодня просматривал код. Много разного кода. И некоторые вещи заставили меня задуматься о том, что есть вещи которые видимо стоит повторять неоднократно.<br />
<br />
Итак.<br />
<br />
Повторю ещё раз:<br />
<br />
1. тест должен быть линейным<br />
2. похожим на тест-кейс<br />
3. читаться человеком<br />
4. оперировать терминами предметной области<br />
<br />
Для начала хочется сказать о линейности.<br />
<br />
Предположим, что мы пишем тест на Паскале.<br />
<br />
Так вот вот это:<br />
<br />
<pre class="brush:belphi">OpenDocument(DocumentNumber);

if (SomeButton.Checked) then
 SomeButton.Checked := false;

DoOurWork;
</pre>
<br />
-- не самый лучший тест.<br />
<br />
Тут дело в следующем - если вдруг возникает необходимость в условном операторе, то скорее всего мы имеем дело со следующими случаями:<br />
<br />
1. Этот тест на самом деле с точки зрения пользователя распадается на два теста (сценария) - когда кнопка нажата или когда она не нажата.<br />
<br />
Тут надо понимать вот какую вещь - пользователь хочет сделать что-то, что он задумал. А не <b>стоит перед выбором</b>. И ожидает что кнопка не нажата. Тогда это его нормальный сценарий.<br />
<br />
А вот если она вдруг нажата - это означает, что "что-то пошло не так". Пользователь не ожидал этого. И значит у него "глаза на лоб полезли". Он судорожно пытается сообразить "что-же делать". Т.е. мы явно имеем дело с двумя сценариями взаимодействия пользователя и системы.<br />
<br />
А следовательно надо писать - два или более тестов. Ну мне так кажется.<br />
<br />
2. Проблема вся в том, что мы имеем дело с "ненастроенной системой" или с неправильными данными.<br />
<br />
Тогда тест скорее всего надо писать так:

<br />
<br />
<pre class="brush:belphi">OpenDocument(DocumentNumber);
Assert(SomeButton.Checked);
DoOurWork;
</pre>
<br />
- т.е. тест в данном случае однозначно не должен проходить.<br />
<br />
Потому, что систему в "нестабильном состоянии" - нет смысла тестировать каким-либо образом, кроме как <b>проверить её состояние</b>.<br />
<br />
3. Самый сложный для понимания случай. Т.е. он - прост вроде бы.<br />
<br />
Но вот способ написания теста для него - неочевиден.<br />
<br />
Итак - случай такой. Мы на самом деле имеем дело с последовательностью автоматических тестов, которые так или иначе могут "портить состояние системы".<br />
<br />
И тесты написаны так, (ну или система ведёт себя так), что мы не можем обеспечить <b>детерминированное поведение</b>.<br />
<br />
Т.е. скажем в результате прогона предыдущих тестов случилось ток, что какие-то данные - "залипли" или какие-то настройки пришли в состояние, которое вообще говоря - ненормально, но с некоторой вероятностью - ожидаемо.<br />
<br />
Тогда тест надо бы написать так:

<br />
<br />
<pre class="brush:belphi">OpenDocument(DocumentNumber);
MakeSureThatButtonIsNotChecked(SomeButton);
DoOurWork;
</pre>
<br />
А "под капотом" или "за ширмой" мы имеем всё то же:
<br />
<br />
<pre class="brush:delphi">procedure MakeSureThatButtonIsNotChecked(aButton);
begin
 if aButton.Checked then
 begin
  OutToLog('a button' + aButton.Name + 'was expected to be unchecked');
  aButton.Checked := false;
 end;
end;
</pre>
<br />
Вроде то же самое... "В чём разница спросите вы" и будете правы.<br />
<br />
Попробую объяснить.<br />
<br />
Вернёмся вот к каким тезисам - "читаться человеком" и "похожим на тест-кейс".

В варианте с If в теле теста - имеем вот что - человек который прогоняет тест <b>руками</b>&nbsp;прочитав этот If будет считать, что ему необходимо "убрать с кнопки SomeButton состояние Checked".<br />
<br />
Однако это <b>не так</b>. При тестировании <b>руками</b> на "неразваленной" системе этот случай как раз-таки говорит о том, что "что-то пошло не так" и что не надо продолжать <b>ручное</b> тестирование, а надо начать процесс разбирательства - "а как же так вышло".<br />
<br />
Этим ручное тестирование и отличается от автоматического.<br />
<br />
Именно поэтому там написано MakeSure. <b>Убедиться</b> что <b>это так</b>.<br />
<br />
Что же касается автоматических тестов - не что же - никто не совершенен. И из-за того, что сломались <b>предыдущие</b> тесты и привели систему в нестабильное состояние - это не повод - не продолжать прогонять последующие тесты. Может быть они что ещё интересного найдут.<br />
<br />
А <b>записи в логе</b> - по-моему - вполне достаточно, чтобы <b>получить сигнал о проблеме</b>.<br />
<br />
Тут тонкая грань. На уровне "декларативность" против "императивности". Но надеюсь, что я смог её для вас прояснить.<br />
<br />
Это вот совсем не из разряда - "верьте мне". Нет. Просто - захотелось поделиться.</div>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewInterfacesLayer/FormOperations/VCMFacet.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewInterfacesLayer::FormOperations::VCMFacet
//
// VCM "Facet"
// ---
// Набор операций, который надо заменить на Facet
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: VCMFacet::Class
implementation @ <<VCMFacet>>
//? VCM "Facet"
//? Набор операций, который надо заменить на Facet
//= VCMOperations::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
// Параметры визуализации
//$ C 64,171,236
//$ l 48,5,192
//$ f 48,5,192

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: VCMFacet::Class::InternalOperation::Operation
; // st_space_key

end. // <<VCMFacet>>

implementation @ :: <<VCMFacet>> <<InternalOperation>> ;
//? Внутренняя операция
//= VCMOperationPrim::Class

// Параметры стереотипа
//T 
// - может не иметь "цели" (типа/результата)

// Пользовательские свойства
//p Needs Broadcast:b=false ? Нужен ли метод Broadcast
//p is query:b=true ? Определает, что операция является запросом к агрегации о возможности сделать что-то

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{is query}"!="%S{!is query}"}%f_up_prefix(%S) *is query* = *%S{is query}* - Определает, что операция является запросом к агрегации о возможности сделать что-то
 ?inherited
 %IF ( ( %S get_up ( 'is query' ) ) %!= ( %S get_up_def ( 'is query' ) ) ) 
  [%f] up_prefix %( %S )% ' *is query* = *'
  %S get_up ( 'is query' ) '* - Определает, что операция является запросом к агрегации о возможности сделать что-то'
//	][{"%S{Needs Broadcast}"!="%S{!Needs Broadcast}"}%f_up_prefix(%S) *Needs Broadcast* = *%S{Needs Broadcast}* - Нужен ли метод Broadcast
 %END-IF
 %IF ( ( %S get_up ( 'Needs Broadcast' ) ) %!= ( %S get_up_def ( 'Needs Broadcast' ) ) ) 
  [%f] up_prefix %( %S )% ' *Needs Broadcast* = *'
  %S get_up ( 'Needs Broadcast' ) '* - Нужен ли метод Broadcast'
//	]
 %END-IF


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
//%f _pas_ImplUses
; // wiki_up_print

: pas_ImplUses OBJECT IN %S
//#UC START# *4948EB2601FAfor4A9801640116*
//	%S%[inherited]\
 inherited
//	%f_pas_PutToUses("l3Base")\
 [%f] pas_PutToUses %( 'l3Base' )% 
//	%f_pas_PutToUses("vcmBase")\
 [%f] pas_PutToUses %( 'vcmBase' )% 
//	%f_pas_PutToUses("StdRes")
 [%f] pas_PutToUses %( 'StdRes' )% 
//#UC END# *4948EB2601FAfor4A9801640116*
; // pas_ImplUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
//%f _pas_IntfUses
: pas_IntfUses OBJECT IN %S
//#UC START# *4948F2EE0334for4A9801640116*
//	%S%[inherited]
 inherited
//#UC END# *4948F2EE0334for4A9801640116*
; // pas_IntfUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит тело метода
// 
// Modification = get|set|area|areareaf|o|r|f
//%f _pas_MethodBodyPrim
: pas_MethodBodyPrim OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2, RealizeType: a-string = %3, aOverrider: MDAClass = %4
//#UC START# *494BB3A201A2for4A9801640116*
//	[{%2N=callgate}{\
 %IF ( ( %2 |N ) %== 'callgate' ) 
  %ELSE
//	%S%[inherited]f_pas_MethodBodyPrim(%1,%2)\
   call-inherited pas_MethodBodyPrim %( %1 %, %2 )%
//	}\
  %THEN
//	\nbegin
  #13#10'begin'
//	[{%Cx=true|%TN!=void} with (aParams.Data As I%f_N(%P)_%f_N(%S)_Params) do\n ]\
  %IF ( ( %C |x ) %==  true %|| 
    ( ( %T |N ) %!= 'void'  ) ) 
   ' with (aParams.Data As I'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% '_Params) do'#13#10' ' 
  %END-IF
//	 [{%TN!=void}ResultValue := ]%S%f_pas_MethodName("exec")[(<{, }%f_cut_prefix(%f_N(%C),a)>)];
  ' '
  %IF ( ( %T |N ) %!= 'void' ) 
   'ResultValue := ' 
  %END-IF
  %S %f pas_MethodName %( 'exec' )% %IF-NOT-EMPTY
   '('
   %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
    [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% 
   %END-FOR
   ')' 
  %END-IF
  ';'
//	end;\
  'end;'
//	]
 %END-IF
//#UC END# *494BB3A201A2for4A9801640116*
; // pas_MethodBodyPrim


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for4A9801640116*
//	%S%[inherited]f_pas_MethodImplementation(%1,%2,%3)\
 call-inherited pas_MethodImplementation %( %1 %, %2 %, %3 )%
//	[{%2N!=o}\
 %IF ( ( %2 |N ) %!= 'o' ) 
//	%S%f_pas_DoMethodImplementation(%1,%2,"callgate")\
  %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'callgate' )% 
//	]
 %END-IF
//#UC END# *494BEC7C03E5for4A9801640116*
; // pas_MethodImplementation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor4A9801640116*
//	%S%[inherited]f_pas_MethodInterface(%1,%2,%3)\
 call-inherited pas_MethodInterface %( %1 %, %2 %, %3 )%
//	[{%2N!=o}\
 %IF ( ( %2 |N ) %!= 'o' ) 
//	\n%S%f_pas_DoMethodInterface(%1,%2,"callgate")\
  #13#10
  %S %f pas_DoMethodInterface %( %1 %, %2 %, 'callgate' )% 
//	]
 %END-IF
//#UC END# *494BEC6A038Afor4A9801640116*
; // pas_MethodInterface


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя метода
//%f _pas_MethodName
: pas_MethodName OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for4A9801640116*
//	%S%[inherited]f_pas_MethodName(%1)
 call-inherited pas_MethodName %( %1 )%
//#UC END# *494BD6C80075for4A9801640116*
; // pas_MethodName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
//%f _pas_Params
: pas_Params OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor4A9801640116*
//	[{%1N=callgate}{\
 %IF ( ( %1 |N ) %== 'callgate' ) 
  %ELSE
//	[{%1N=exec}{\
   %IF ( ( %1 |N ) %== 'exec' ) 
    %ELSE
//	%S%[inherited]f_pas_Params(%1)\
     call-inherited pas_Params %( %1 )%
//	}\
    %THEN
//	%S%[inherited]f_pas_Params("")\
    call-inherited pas_Params %( '' )%
//	]\
   %END-IF
//	}\
  %THEN
//	const aParams: IvcmExecuteParams\
  'const aParams: IvcmExecuteParams'
//	]
 %END-IF
//#UC END# *494BDCF3030Efor4A9801640116*
; // pas_Params


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа результата функции
//%f _pas_ResultTypeName
: pas_ResultTypeName OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDD190361for4A9801640116*
//	[{%1N=exec}{\
 %IF ( ( %1 |N ) %== 'exec' ) 
  %ELSE
//	%S%[inherited]f_pas_ResultTypeName(%1)\
   call-inherited pas_ResultTypeName %( %1 )%
//	}\
  %THEN
//	%S%[inherited]f_pas_ResultTypeName("")\
  call-inherited pas_ResultTypeName %( '' )%
//	]
 %END-IF
//#UC END# *494BDD190361for4A9801640116*
; // pas_ResultTypeName


// перекрытие базового стереотипа VCMOperationPrim::Class
//%f _IsInternalVCMOperation
: IsInternalVCMOperation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A96B425021Afor4A9801640116*
//	true
 true
//#UC END# *4A96B425021Afor4A9801640116*
; // IsInternalVCMOperation


// перекрытие базового стереотипа VCMOperationPrim::Class
// Нужен ли код операции
//%f _NeedsOpCode
: NeedsOpCode OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4C80E64501B5for4A9801640116*
//	true
 true
//#UC END# *4C80E64501B5for4A9801640116*
; // NeedsOpCode


// перекрытие базового стереотипа VCMOperationPrim::Class
//%f _Spell
: Spell OBJECT IN %S
//#UC START# *4AE58E3801A3for4A9801640116*
//	%S%[inherited]\
 inherited
//	[{%Cx=true|%TN!=void}\
 %IF ( ( %C |x ) %==  true %|| 
   ( ( %T |N ) %!= 'void'  ) ) 


//	%P%P%f_add_class(%SU_Params_Facet,Facet,I%f_N(%P)_%f_N(%S)_Params,Params_Facet_Instance)\
  %P ->P %f add_class %( %S |U '_Params_Facet' %, 'Facet' %, 'I'
  [%f] N %( %P )% '_'
  [%f] N %( %S )% '_Params' %, 'Params_Facet_Instance' )%  
//	%{Params_Facet_Instance}%f_set_documentation(Параметры для операции %f_N(%P).%f_N(%S))\
  ( get_global_var ( 'Params_Facet_Instance' ) %f set_documentation %( 'Параметры для операции '
  [%f] N %( %P )% '.'
  [%f] N %( %S )% )% ) 
//	%{Params_Facet_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\
  ( get_global_var ( 'Params_Facet_Instance' ) %f set_up %( 'ifndef' %, %IF ( ) 
   %ELSE
    %P get_up ( 'ifndef' ) 
   %THEN
   %S get_up ( 'ifndef' ) 
  %END-IF
)% ) 

//	[{%Cx=true}\
  %IF ( ( %C |x ) %==  true ) 
//	<{}{}{%C}\
   %FOR ( %C ) 
//	%{Params_Facet_Instance}%f_add_attribute(%CU_Param,\
    ( get_global_var ( 'Params_Facet_Instance' ) %f add_attribute %( %C |U '_Param' %, 
//	[{%CS=in}{\
    %IF ( ( %C |S ) %== 'in' ) 
     %ELSE
//	[{%CS=out}{\
      %IF ( ( %C |S ) %== 'out' ) 
       %ELSE
//	property}\
        'property' 
       %THEN

//	writeonly\
//	property\
       'property'
//	]}\
      %END-IF
     %THEN
//	readonly\
     'readonly'
//	],\
    %END-IF
%, //	%f_cut_prefix(%f_N(%C),a):%C%TU,Param_Instance)\
    [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% ':'
    %C ->T |U  %, 'Param_Instance' )% ) 
//	>\
   %END-FOR
//	]\
  %END-IF


//	[{%TN!=void}%{Params_Facet_Instance}%f_add_attribute(%{Params_Facet_Instance}U_Result,\
  %IF ( ( %T |N ) %!= 'void' ) 
   ( get_global_var ( 'Params_Facet_Instance' ) %f add_attribute %( ( get_global_var ( 'Params_Facet_Instance' ) |U ) '_Result' %, 
//	property,ResultValue:%TU,Param_Instance)]\
   'property' %, 'ResultValue:'
   %T |U %, 'Param_Instance' )% ) 
  %END-IF


//	%P%P%f_add_class(%SU_Params_Class,SimpleClass,T%f_N(%P)_%f_N(%S)_Params,Params_Class_Instance)\
  %P ->P %f add_class %( %S |U '_Params_Class' %, 'SimpleClass' %, 'T'
  [%f] N %( %P )% '_'
  [%f] N %( %S )% '_Params' %, 'Params_Class_Instance' )%  
//	%{Params_Class_Instance}%f_set_visibility_type(PrivateAccess)\
  ( get_global_var ( 'Params_Class_Instance' ) %f set_visibility_type %( 'PrivateAccess' )% ) 
//	%{Params_Class_Instance}%f_set_documentation(Реализация %{Params_Facet_Instance}N)\
  ( get_global_var ( 'Params_Class_Instance' ) %f set_documentation %( 'Реализация '
  ( get_global_var ( 'Params_Facet_Instance' ) |N ) )% ) 
//	%{Params_Class_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\
  ( get_global_var ( 'Params_Class_Instance' ) %f set_up %( 'ifndef' %, %IF ( ) 
   %ELSE
    %P get_up ( 'ifndef' ) 
   %THEN
   %S get_up ( 'ifndef' ) 
  %END-IF
)% ) //	[{"%{Tl3CProtoObject}N"=""}%f_find_element(Tl3CProtoObject,Tl3CProtoObject)]\
  %IF ( ( ( get_global_var ( 'Tl3CProtoObject' ) |N ) ) %== '' ) 
   [%f] find_element %( 'Tl3CProtoObject' %, 'Tl3CProtoObject' )% 
  %END-IF
//	%P%P%f_make_accessable(%{Tl3CProtoObject}%PU)\
  %P ->P %f make_accessable %( ( get_global_var ( 'Tl3CProtoObject' )  ->P |U ) )%  
//	%P%P%f_add_dependency(%{Tl3CProtoObject}%PU)\
  %P ->P %f add_dependency %( ( get_global_var ( 'Tl3CProtoObject' )  ->P |U ) )%  
//	%{Params_Class_Instance}%f_add_inheritable(%{Tl3CProtoObject}U)\
  ( get_global_var ( 'Params_Class_Instance' ) %f add_inheritable %( ( get_global_var ( 'Tl3CProtoObject' ) |U ) )% ) 
//	%{Params_Class_Instance}%f_add_realized(%{Params_Facet_Instance}U)\
  ( get_global_var ( 'Params_Class_Instance' ) %f add_realized %( ( get_global_var ( 'Params_Facet_Instance' ) |U ) )% ) 

//	[{%Cx=true}\
  %IF ( ( %C |x ) %==  true ) 
//	<{}{}{%C}\
   %FOR ( %C ) 
//	%{Params_Class_Instance}%f_add_attribute(%CU_ParamField,\
    ( get_global_var ( 'Params_Class_Instance' ) %f add_attribute %( %C |U '_ParamField' %, 
//	,\
%, //	f_%f_cut_prefix(%f_N(%C),a):%C%TU,Param_Instance)\
    'f_'
    [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% ':'
    %C ->T |U  %, 'Param_Instance' )% ) 
//	%{Param_Instance}%f_set_visibility_type(PrivateAccess)\
    ( get_global_var ( 'Param_Instance' ) %f set_visibility_type %( 'PrivateAccess' )% ) 
//	%{Param_Instance}%f_set_link_type(ref)\
    ( get_global_var ( 'Param_Instance' ) %f set_link_type %( 'ref' )% ) 
//	>\
   %END-FOR
//	]\
  %END-IF


//	[{%TN!=void}%{Params_Class_Instance}%f_add_attribute(%{Params_Class_Instance}U_Result,\
  %IF ( ( %T |N ) %!= 'void' ) 
   ( get_global_var ( 'Params_Class_Instance' ) %f add_attribute %( ( get_global_var ( 'Params_Class_Instance' ) |U ) '_Result' %, 
//	,f_ResultValue:%TU,Param_Instance)\
%,    'f_ResultValue:'
   %T |U %, 'Param_Instance' )% ) 
//	%{Param_Instance}%f_set_visibility_type(PrivateAccess)\
   ( get_global_var ( 'Param_Instance' ) %f set_visibility_type %( 'PrivateAccess' )% ) 
//	%{Param_Instance}%f_set_link_type(ref)\
   ( get_global_var ( 'Param_Instance' ) %f set_link_type %( 'ref' )% ) 
//	]\
  %END-IF
//	%{Params_Class_Instance}%f_add_operation(%{Params_Class_Instance}U_Create,ctor,Create (<{, }%CN:%C%TU>),Op_Instance)\
  ( get_global_var ( 'Params_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Params_Class_Instance' ) |U ) '_Create' %, 'ctor' %, 'Create ('
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %C |N ':'
   %C ->T |U  
  %END-FOR
  ')' %, 'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Конструктор %{Params_Class_Instance}N)\
  ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Конструктор '
  ( get_global_var ( 'Params_Class_Instance' ) |N ) )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
  ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Params_Class_Instance})_var, {-})\
  ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Params_Class_Instance' ) ) )% '_var' %, ' {-}' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Params_Class_Instance})_impl, inherited Create;\
  ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Params_Class_Instance' ) ) )% '_impl' %, ' inherited Create;'
//	<\n f_%f_cut_prefix(%f_N(%C),a) := %f_N(%C);>)\
  %FOR #13#10' f_'
   [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% ' := '
   [%f] N %( %C )% ';' 
  %END-FOR
)% ) //	%{Params_Class_Instance}%f_add_operation(%{Params_Class_Instance}U_Make,factory,Make (<{, }%CN:%C%TU>),Op_Instance)\
  ( get_global_var ( 'Params_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Params_Class_Instance' ) |U ) '_Make' %, 'factory' %, 'Make ('
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %C |N ':'
   %C ->T |U  
  %END-FOR
  ')' %, 'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Фабрика %{Params_Class_Instance}N)\
  ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Фабрика '
  ( get_global_var ( 'Params_Class_Instance' ) |N ) )% ) 
//	%{Params_Facet_Instance}<{}{}{%C}\
  ( get_global_var ( 'Params_Facet_Instance' ) ) 
  %FOR ( %C ) 
//	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})get_var, {-})\
   %C %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( %C %, ( get_global_var ( 'Params_Class_Instance' ) ) )% 'get_var' %, ' {-}' )% 
//	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})set_var, {-})\
   %C %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( %C %, ( get_global_var ( 'Params_Class_Instance' ) ) )% 'set_var' %, ' {-}' )% 
//	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})get_impl, Result := f_%f_cut_prefix(%f_N(%C),a);)\
   %C %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( %C %, ( get_global_var ( 'Params_Class_Instance' ) ) )% 'get_impl' %, ' Result := f_'
   [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% ';' )% 
//	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})set_impl, f_%f_cut_prefix(%f_N(%C),a) := aValue;)\
   %C %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( %C %, ( get_global_var ( 'Params_Class_Instance' ) ) )% 'set_impl' %, ' f_'
   [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% ' := aValue;' )% 
//	>\
  %END-FOR
//	]
 %END-IF

//	[{"%{IvcmEntity}N"=""}%f_find_element(IvcmEntity,IvcmEntity)]\
 %IF ( ( ( get_global_var ( 'IvcmEntity' ) |N ) ) %== '' ) 
  [%f] find_element %( 'IvcmEntity' %, 'IvcmEntity' )% 
 %END-IF
//	%P%P%f_make_accessable(%{IvcmEntity}%PU)\
 %P ->P %f make_accessable %( ( get_global_var ( 'IvcmEntity' )  ->P |U ) )%  
//	%P%P%f_add_dependency(%{IvcmEntity}%PU)\
 %P ->P %f add_dependency %( ( get_global_var ( 'IvcmEntity' )  ->P |U ) )%  
//	[{"%{IvcmEntityForm}N"=""}%f_find_element(4914746C019E,IvcmEntityForm)]\
 %IF ( ( ( get_global_var ( 'IvcmEntityForm' ) |N ) ) %== '' ) 
  [%f] find_element %( '4914746C019E' %, 'IvcmEntityForm' )% 
 %END-IF
//	%P%P%f_make_accessable(%{IvcmEntityForm}%PU)\
 %P ->P %f make_accessable %( ( get_global_var ( 'IvcmEntityForm' )  ->P |U ) )%  
//	%P%P%f_add_dependency(%{IvcmEntityForm}%PU)\
 %P ->P %f add_dependency %( ( get_global_var ( 'IvcmEntityForm' )  ->P |U ) )%  
//	[{"%{IvcmAggregate}N"=""}%f_find_element(IvcmAggregate,IvcmAggregate)]\
 %IF ( ( ( get_global_var ( 'IvcmAggregate' ) |N ) ) %== '' ) 
  [%f] find_element %( 'IvcmAggregate' %, 'IvcmAggregate' )% 
 %END-IF
//	%P%P%f_make_accessable(%{IvcmAggregate}%PU)\
 %P ->P %f make_accessable %( ( get_global_var ( 'IvcmAggregate' )  ->P |U ) )%  
//	%P%P%f_add_dependency(%{IvcmAggregate}%PU)\
 %P ->P %f add_dependency %( ( get_global_var ( 'IvcmAggregate' )  ->P |U ) )%  
//	[{"%{IvcmContainer}N"=""}%f_find_element(IvcmContainer,IvcmContainer)]\
 %IF ( ( ( get_global_var ( 'IvcmContainer' ) |N ) ) %== '' ) 
  [%f] find_element %( 'IvcmContainer' %, 'IvcmContainer' )% 
 %END-IF
//	%P%P%f_make_accessable(%{IvcmContainer}%PU)\
 %P ->P %f make_accessable %( ( get_global_var ( 'IvcmContainer' )  ->P |U ) )%  
//	%P%P%f_add_dependency(%{IvcmContainer}%PU)\
 %P ->P %f add_dependency %( ( get_global_var ( 'IvcmContainer' )  ->P |U ) )%  

//	%P%P%f_add_class(%SU_Op_Class,SimpleClass,Op_%f_N(%P)_%f_N(%S),Op_Class_Instance)\
 %P ->P %f add_class %( %S |U '_Op_Class' %, 'SimpleClass' %, 'Op_'
 [%f] N %( %P )% '_'
 [%f] N %( %S )% %, 'Op_Class_Instance' )%  
//	%{Op_Class_Instance}%f_set_documentation(Класс для вызова операции %f_N(%P).%f_N(%S))\
 ( get_global_var ( 'Op_Class_Instance' ) %f set_documentation %( 'Класс для вызова операции '
 [%f] N %( %P )% '.'
 [%f] N %( %S )% )% ) 
//	%{Op_Class_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\
 ( get_global_var ( 'Op_Class_Instance' ) %f set_up %( 'ifndef' %, %IF ( ) 
  %ELSE
   %P get_up ( 'ifndef' ) 
  %THEN
  %S get_up ( 'ifndef' ) 
 %END-IF
)% ) 
//	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Ent,static,Call (in aTarget:%{IvcmEntity}U<, %CN:%C%TU[ = %C%VN]>)\
 ( get_global_var ( 'Op_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Op_Class_Instance' ) |U ) '_Call_Ent' %, 'static' %, 'Call (in aTarget:'
 ( get_global_var ( 'IvcmEntity' ) |U ) 
 %FOR ', '
  %C |N ':'
  %C ->T |U  %IF-NOT-EMPTY
   ' = '
   %C ->V |N  
  %END-IF
 %END-FOR
 ')'
//	: [{%TN!=void}{boolean}%TU]\
 ': '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
   'boolean' 
  %THEN
  %T |U 
 %END-IF
//	,Op_Instance)\
%,  'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у сущности)\
 ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Вызов операции '
 [%f] N %( %P )% '.'
 [%f] N %( %S )% ' у сущности' )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
 ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_var' %, 'var'#13#10' l_Params : IvcmExecuteParams;' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_impl' %, 
//	 l3FillChar(Result, SizeOf(Result));
 ' l3FillChar(Result' %, ' SizeOf(Result));'
//	 if (aTarget \<\> nil) then
 ' if (aTarget <> nil) then'
//	 begin
 ' begin'
//	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
 '  l_Params := '
 %IF ( ( %C |x ) %==  true %|| 
   ( ( %T |N ) %!= 'void'  ) ) 
  %ELSE
   'vcmParams' 
  %THEN
  'TvcmExecuteParams.MakeForInternal('
  [%f] pas_TypeName %( ( get_global_var ( 'Params_Class_Instance' ) ) )% '.Make'
  %IF-NOT-EMPTY
   '('
   %FOR %ITEM-SEPARATOR ',' ; // %ITEM-SEPARATOR 
    [%f] N %( %C )% 
   %END-FOR
   ')' 
  %END-IF
  ')' 
 %END-IF
 ';'
//	  aTarget.Operation(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
 '  aTarget.Operation(TdmStdRes.opcode_'
 [%f] N %( %P )% '_'
 [%f] N %( %S )% %, ' l_Params);'
//	  with l_Params do
 '  with l_Params do'
//	  begin
 '  begin'
//	   if Done then
 '   if Done then'
//	   begin
 '   begin'
//	    [{%TN!=void}{\
 '    '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
//	Result := true}\
   'Result := true' 
  %THEN
//	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\
  'Result := '
  [%f] pas_TypeName %( ( get_global_var ( 'Params_Facet_Instance' ) ) )% '(Data).ResultValue'
//	];
 %END-IF
 ';'
//	   end;//Done
 '   end;//Done'
//	  end;//with l_Params
 '  end;//with l_Params'
//	 end;//aTarget \<\> nil)
 ' end;//aTarget <> nil' )% ) 

//	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Agg,static,Call (in aTarget:%{IvcmAggregate}U<, %CN:%C%TU[ = %C%VN]>)\
 ( get_global_var ( 'Op_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Op_Class_Instance' ) |U ) '_Call_Agg' %, 'static' %, 'Call (in aTarget:'
 ( get_global_var ( 'IvcmAggregate' ) |U ) 
 %FOR ', '
  %C |N ':'
  %C ->T |U  %IF-NOT-EMPTY
   ' = '
   %C ->V |N  
  %END-IF
 %END-FOR
 ')'
//	: [{%TN!=void}{boolean}%TU]\
 ': '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
   'boolean' 
  %THEN
  %T |U 
 %END-IF
//	,Op_Instance)\
%,  'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у агрегации)\
 ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Вызов операции '
 [%f] N %( %P )% '.'
 [%f] N %( %S )% ' у агрегации' )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
 ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_var' %, 'var'#13#10' l_Params : IvcmExecuteParams;' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_impl' %, 
//	 l3FillChar(Result, SizeOf(Result));
 ' l3FillChar(Result' %, ' SizeOf(Result));'
//	 if (aTarget \<\> nil) then
 ' if (aTarget <> nil) then'
//	 begin
 ' begin'
//	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
 '  l_Params := '
 %IF ( ( %C |x ) %==  true %|| 
   ( ( %T |N ) %!= 'void'  ) ) 
  %ELSE
   'vcmParams' 
  %THEN
  'TvcmExecuteParams.MakeForInternal('
  [%f] pas_TypeName %( ( get_global_var ( 'Params_Class_Instance' ) ) )% '.Make'
  %IF-NOT-EMPTY
   '('
   %FOR %ITEM-SEPARATOR ',' ; // %ITEM-SEPARATOR 
    [%f] N %( %C )% 
   %END-FOR
   ')' 
  %END-IF
  ')' 
 %END-IF
 ';'
//	  aTarget.Operation(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
 '  aTarget.Operation(TdmStdRes.opcode_'
 [%f] N %( %P )% '_'
 [%f] N %( %S )% %, ' l_Params);'
//	  with l_Params do
 '  with l_Params do'
//	  begin
 '  begin'
//	   if Done then
 '   if Done then'
//	   begin
 '   begin'
//	    [{%TN!=void}{\
 '    '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
//	Result := true}\
   'Result := true' 
  %THEN
//	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\
  'Result := '
  [%f] pas_TypeName %( ( get_global_var ( 'Params_Facet_Instance' ) ) )% '(Data).ResultValue'
//	];
 %END-IF
 ';'
//	   end;//Done
 '   end;//Done'
//	  end;//with l_Params
 '  end;//with l_Params'
//	 end;//aTarget \<\> nil)
 ' end;//aTarget <> nil' )% ) 

//	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_EF,static,Call (in aTarget:%{IvcmEntityForm}U<, %CN:%C%TU[ = %C%VN]>)\
 ( get_global_var ( 'Op_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Op_Class_Instance' ) |U ) '_Call_EF' %, 'static' %, 'Call (in aTarget:'
 ( get_global_var ( 'IvcmEntityForm' ) |U ) 
 %FOR ', '
  %C |N ':'
  %C ->T |U  %IF-NOT-EMPTY
   ' = '
   %C ->V |N  
  %END-IF
 %END-FOR
 ')'
//	: [{%TN!=void}{boolean}%TU]\
 ': '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
   'boolean' 
  %THEN
  %T |U 
 %END-IF
//	,Op_Instance)\
%,  'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у формы)\
 ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Вызов операции '
 [%f] N %( %P )% '.'
 [%f] N %( %S )% ' у формы' )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
 ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var, {-})\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_var' %, ' {-}' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_impl' %, 
//	 l3FillChar(Result, SizeOf(Result));
 ' l3FillChar(Result' %, ' SizeOf(Result));'
//	 if (aTarget \<\> nil) then
 ' if (aTarget <> nil) then'
//	  Result := Call(aTarget.Entity<, %CN>);)
 '  Result := Call(aTarget.Entity'
 %FOR ', '
  %C |N 
 %END-FOR
 ');' )% ) 

//	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Cont,static,Call (in aTarget:%{IvcmContainer}U<, %CN:%C%TU[ = %C%VN]>)\
 ( get_global_var ( 'Op_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Op_Class_Instance' ) |U ) '_Call_Cont' %, 'static' %, 'Call (in aTarget:'
 ( get_global_var ( 'IvcmContainer' ) |U ) 
 %FOR ', '
  %C |N ':'
  %C ->T |U  %IF-NOT-EMPTY
   ' = '
   %C ->V |N  
  %END-IF
 %END-FOR
 ')'
//	: [{%TN!=void}{boolean}%TU]\
 ': '
 %IF ( ( %T |N ) %!= 'void' ) 
  %ELSE
   'boolean' 
  %THEN
  %T |U 
 %END-IF
//	,Op_Instance)\
%,  'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у контейнера)\
 ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Вызов операции '
 [%f] N %( %P )% '.'
 [%f] N %( %S )% ' у контейнера' )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
 ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var, {-})\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_var' %, ' {-}' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
 ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_impl' %, 
//	 l3FillChar(Result, SizeOf(Result));
 ' l3FillChar(Result' %, ' SizeOf(Result));'
//	 if (aTarget \<\> nil) then
 ' if (aTarget <> nil) then'
//	  Result := Call(aTarget.AsForm<, %CN>);)
 '  Result := Call(aTarget.AsForm'
 %FOR ', '
  %C |N 
 %END-FOR
 ');' )% ) 

//	[{%TN=void&%S{Needs Broadcast}=true}\
 %IF ( ( %T |N ) %== 'void' %&& 
   ( ( %S get_up ( 'Needs Broadcast' ) ) %==  true  ) ) 
//	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Broadcast,static,Broadcast (<{, }%CN:%C%TU[ = %C%VN]>)\
  ( get_global_var ( 'Op_Class_Instance' ) %f add_operation %( ( get_global_var ( 'Op_Class_Instance' ) |U ) '_Broadcast' %, 'static' %, 'Broadcast ('
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %C |N ':'
   %C ->T |U  %IF-NOT-EMPTY
    ' = '
    %C ->V |N  
   %END-IF
  %END-FOR
  ')'
//	: void\
  ': void'

//	[{%TN!=void}{boolean}%TU]\
//	,Op_Instance)\
%,   'Op_Instance' )% ) 
//	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у всех зарегистрированных сущностей)\
  ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Вызов операции '
  [%f] N %( %P )% '.'
  [%f] N %( %S )% ' у всех зарегистрированных сущностей' )% ) 
//	%{Op_Instance}%f_set_abstraction_type(final)\
  ( get_global_var ( 'Op_Instance' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
  ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_var' %, 'var'#13#10' l_Params : IvcmExecuteParams;' )% ) 
//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
  ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, ( get_global_var ( 'Op_Class_Instance' ) ) )% '_impl' %, 
//	 l3FillChar(Result, SizeOf(Result));
//	 if (vcmDispatcher \<\> nil) then
  ' if (vcmDispatcher <> nil) then'
//	 begin
  ' begin'
//	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
  '  l_Params := '
  %IF ( ( %C |x ) %==  true %|| 
    ( ( %T |N ) %!= 'void'  ) ) 
   %ELSE
    'vcmParams' 
   %THEN
   'TvcmExecuteParams.MakeForInternal('
   [%f] pas_TypeName %( ( get_global_var ( 'Params_Class_Instance' ) ) )% '.Make'
   %IF-NOT-EMPTY
    '('
    %FOR %ITEM-SEPARATOR ',' ; // %ITEM-SEPARATOR 
     [%f] N %( %C )% 
    %END-FOR
    ')' 
   %END-IF
   ')' 
  %END-IF
  ';'
//	  vcmDispatcher.EntityOperationBroadcast(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
  '  vcmDispatcher.EntityOperationBroadcast(TdmStdRes.opcode_'
  [%f] N %( %P )% '_'
  [%f] N %( %S )% %, ' l_Params);'

//	  with l_Params do

//	  begin

//	   if Done then

//	   begin

//	    [{%TN!=void}{\

//	Result := true}\

//	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\

//	];

//	   end;//Done

//	  end;//with l_Params
//	 end;//vcmDispatcher \<\> nil)\
  ' end;//vcmDispatcher <> nil' )% ) 
//	]
 %END-IF
//#UC END# *4AE58E3801A3for4A9801640116*
; // Spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // :: <<VCMFacet>> <<InternalOperation>> ;


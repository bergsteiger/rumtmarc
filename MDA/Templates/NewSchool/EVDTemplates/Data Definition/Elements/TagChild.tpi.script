////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Elements/TagChild.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Elements::TagChild
//
// Дочерний тег
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: TagChild::Class
implementation @ <<TagChild>>
//? Дочерний тег
//= TagValue::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
; // st_space_key

<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor485FB3B3034A*
//	[#// %SD\n]\
 %IF-NOT-EMPTY
  out_indent '// '
  %S |D #13#10 
 %END-IF
//	# l_%P%PN_%PN_%SN := \
 out_indent ' l_'
 %P ->P |N  '_'
 %P |N '_'
 %S |N ' := '
//	[{%Gx=true}{\
 %IF ( ( %G |x ) %==  true ) 
  %ELSE
//	Tk2Type(TagType).ArrayProp\[k2_tiChildren\].DefaultChildType\
   'Tk2Type(TagType).ArrayProp[k2_tiChildren].DefaultChildType'
//	}\
  %THEN
//	t_%GN\
  't_'
  %G |N 
//	].MakeTag;
 %END-IF
 '.MakeTag;'
//	# with l_%P%PN_%PN_%SN do
 out_indent ' with l_'
 %P ->P |N  '_'
 %P |N '_'
 %S |N ' do'
//	# begin
 out_indent ' begin'
//	[{%Gx=true}#  IntA\[k2_tiStyle\] := %G<{}{%CN=Handle}%C%VN>;\n]\
//	[# <{\n# }{%CC!=Class}%CX>\n]\
 %IF-NOT-EMPTY
  out_indent ' '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent ' ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C |C ) %!= 'Class' ) 
   %C |X 
  %END-FOR
  #13#10 
 %END-IF
//	%f_shift_intend(+1)\
 [%f] shift_intend %( 1 )% 
//	<{}{%CC=Class}[%CX\n]>\
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Class' ) 
  %IF-NOT-EMPTY
   %C |X #13#10 
  %END-IF
 %END-FOR
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 
//	#  AddValue(Box);
//	# end;//with MakeTag
 out_indent ' end;//with MakeTag'
//	# AddChild(l_%P%PN_%PN_%SN);
 out_indent ' AddChild(l_'
 %P ->P |N  '_'
 %P |N '_'
 %S |N ');'
//#UC END# *470F15B800CBfor485FB3B3034A*
; // impl.pas



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<TagChild>>


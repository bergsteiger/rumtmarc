////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CoreTemplates/Integrated/Root/Project.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CoreTemplates::Integrated::Root::Project
//
// Проект
// ---
// Рутовый элемент модели. Определяет основные проекты. Одна модель может определять несколько
// проектов, определяя связи между ними.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Project::Category
implementation @ <<Project>>
//? Проект
//? Рутовый элемент модели. Определяет основные проекты. Одна модель может определять несколько проектов, определяя связи между ними.
//> Requirements::Category

//= Документация::MDAGenerator
//= ModelSerialize::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_project.gif
//L code_project
// Параметры визуализации
//$ C 195,245,195
//$ l 80,245,90
//$ f 80,245,90
//M
// - может быть основным элементом модели

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p Full MDP:b=true ? поддержка полного контроля используемости определяемого MDP
//p full constraint:b=true ? Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)
//p is namespace:b=false ? определяет является ли проект неймспейсом
//p root path suffix:s ? определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект
//p space key:s ? идентификатор родительского спейса для генерации в MDKnow
//p space name:s ? Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	[{"%S{Full MDP}"!="%S{!Full MDP}"}%f_up_prefix(%S) *Full MDP* = *%S{Full MDP}* - поддержка полного контроля используемости определяемого MDP
 %IF ( ( %S get_up ( 'Full MDP' ) ) %!= ( %S get_up_def ( 'Full MDP' ) ) ) 
  [%f] up_prefix %( %S )% ' *Full MDP* = *'
  %S get_up ( 'Full MDP' ) '* - поддержка полного контроля используемости определяемого MDP'
//	][{"%S{full constraint}"!="%S{!full constraint}"}%f_up_prefix(%S) *full constraint* = *%S{full constraint}* - Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)
 %END-IF
 %IF ( ( %S get_up ( 'full constraint' ) ) %!= ( %S get_up_def ( 'full constraint' ) ) ) 
  [%f] up_prefix %( %S )% ' *full constraint* = *'
  %S get_up ( 'full constraint' ) '* - Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)'
//	][{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли проект неймспейсом
 %END-IF
 %IF ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) 
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли проект неймспейсом'
//	][{"%S{root path suffix}"!="%S{!root path suffix}"}%f_up_prefix(%S) *root path suffix* = *%S{root path suffix}* - определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект
 %END-IF
 %IF ( ( %S get_up ( 'root path suffix' ) ) %!= ( %S get_up_def ( 'root path suffix' ) ) ) 
  [%f] up_prefix %( %S )% ' *root path suffix* = *'
  %S get_up ( 'root path suffix' ) '* - определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект'
//	][{"%S{space key}"!="%S{!space key}"}%f_up_prefix(%S) *space key* = *%S{space key}* - идентификатор родительского спейса для генерации в MDKnow
 %END-IF
 %IF ( ( %S get_up ( 'space key' ) ) %!= ( %S get_up_def ( 'space key' ) ) ) 
  [%f] up_prefix %( %S )% ' *space key* = *'
  %S get_up ( 'space key' ) '* - идентификатор родительского спейса для генерации в MDKnow'
//	][{"%S{space name}"!="%S{!space name}"}%f_up_prefix(%S) *space name* = *%S{space name}* - Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)
 %END-IF
 %IF ( ( %S get_up ( 'space name' ) ) %!= ( %S get_up_def ( 'space name' ) ) ) 
  [%f] up_prefix %( %S )% ' *space name* = *'
  %S get_up ( 'space name' ) '* - Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)'
//	]
 %END-IF

//%f _wiki_ProjectPageName
; // wiki_up_print

: wiki_ProjectPageName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4E7C7B0B0192for49F99EB100B2*
//	[{%SN=Nemesis|%f_substr_from_begin(%SN,2)=F1}{\
 %IF ( ( %S |N ) %== 'Nemesis' %|| 
   ( ( [%f] substr_from_begin %( %S |N %, 2 )% ) %== 'F1'  ) ) 
  %ELSE
//	[{%f_substr_from_begin(%SN,13)=Shared Delphi}{\
   %IF ( ( [%f] substr_from_begin %( %S |N %, 13 )% ) %== 'Shared Delphi' ) 
    %ELSE
//	Модель проекта "%f_str_replace(%SN,$, )"\
     'Модель проекта "'
     [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	}\
    %THEN
//	[{%SN=Shared Delphi}{\
    %IF ( ( %S |N ) %== 'Shared Delphi' ) 
     %ELSE
//	%f_str_replace(%f_cut_prefix(%SN,Shared Delphi ),$, )\
      [%f] str_replace %( [%f] cut_prefix %( %S |N %, 'Shared Delphi ' )% %, '$' %, ' ' )% 
//	}\
     %THEN
//	%f_str_replace(%SN,$, )\
     [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	]\
    %END-IF
//	]\
   %END-IF
//	}\
  %THEN
//	[{%SN=F1}{\
  %IF ( ( %S |N ) %== 'F1' ) 
   %ELSE
//	%f_str_replace(%f_cut_prefix(%SN,F1 ),$, )\
    [%f] str_replace %( [%f] cut_prefix %( %S |N %, 'F1 ' )% %, '$' %, ' ' )% 
//	}\
   %THEN
//	%f_str_replace(%SN,$, )\
   [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4E7C7B0B0192for49F99EB100B2*
; // wiki_ProjectPageName


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for49F99EB100B2*
//c          {}
//r {""=""}: {}
//#UC END# *4704C0E30186for49F99EB100B2*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor49F99EB100B2*
//#UC END# *4705CBD6003Efor49F99EB100B2*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for49F99EB100B2*
//#UC END# *470484D50138for49F99EB100B2*
; // wiki_up_add_gen


// реализация абстрактного стереотипа ModelSerialize::MDAGenerator
// генератор структуры модели в описание на языке FORTH
//+ forth_structure
<<generator>> forth_structure OBJECT IN %S
//R  
//#UC START# *4F368B80039Efor49F99EB100B2*
//R  
//P
//C /shared/models/NewSchool/%SN
//C shared/models/NewSchool/%SN
//C %SN
//O %SN.model.script
//	[USES
 %IF-NOT-EMPTY
  'USES'
//	 <{\n }{"%DO"!=""&%D#f_IsProject()=true}'%f_str_replace(%DR%Dd,/,\\)\\%DO'>
  ' '
  %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %D |O ) %!= '' %&& 
    ( ( %D %?f IsProject %( )% ) %==  true  ) ) 
   ''''
   [%f] str_replace %( %D |R %D |d %, '/' %, '\' )% '\'
   %D |O '''' 
  %END-FOR
//	;\n\n]\
  ';'#13#10#13#10 
 %END-IF
//	%f_dump_to_FORTH(%S)\
 [%f] dump_to_FORTH %( %S )% 
//	<{}{"%CO"!=""}%CX>
 %FOR %ITEM-CONDITION ( ( %C |O ) %!= '' ) 
  %C |X 
 %END-FOR

//f _mangle_name
; // forth_structure

end. // <<Project>>

: mangle_name OBJECT IN %S
//	[{"%SN"!=""}{\
 %IF ( ( %S |N ) %!= '' ) 
  %ELSE
//	"%SU"\
   %S |U 
//	}\
  %THEN
//	[{%f_consist_of(%SN,"0123456789abcdefghijklmnopqarstuvwxyzABCDEFGHIJKLMNOPQARSTUVWXYZ_абвгдеёжзийклмнопрстуфхцчщэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЭЮЯ$.")=true&%f_to_upper(%SN)!=ABSTRACT&%f_to_upper(%SN)!=FINAL&%f_to_upper(%SN)!=VIRTUAL&%f_to_upper(%SN)!=TRUE&%f_to_upper(%SN)!=FALSE&%SS!=ScriptKeyword&%f_to_upper(%SN)!=SUMMONED}{\
  %IF ( ( [%f] consist_of %( %S |N %, '0123456789abcdefghijklmnopqarstuvwxyzABCDEFGHIJKLMNOPQARSTUVWXYZ_абвгдеёжзийклмнопрстуфхцчщэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЭЮЯ$.' )% ) %==  true %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'ABSTRACT'  ) %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'FINAL'  ) %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'VIRTUAL'  ) %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'TRUE'  ) %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'FALSE'  ) %&& 
    ( ( %S |S ) %!= 'ScriptKeyword'  ) %&& 
    ( ( [%f] to_upper %( %S |N )% ) %!= 'SUMMONED'  ) ) 
   %ELSE
//	"%f_str_replace(%SN,%f_quote(%S),')"\
    [%f] str_replace %( %S |N %, [%f] quote %( %S )% %, '''' )% 
//	}\
   %THEN
//	%SN\
   %S |N 
//	[{%SC=Operation|%S#f_IsMethod()=true}\
   %IF ( ( %S |C ) %== 'Operation' %|| 
     ( ( %S %?f IsMethod %( )% ) %==  true  ) ) 
//	[{%f_is_MDA_oper(%S)!=true}\
    %IF ( ( [%f] is_MDA_oper %( %S )% ) %!=  true ) 
//	[{"%f_delphi_overload(%S)"!=""}\
     %IF ( ( [%f] delphi_overload %( %S )% ) %!= '' ) 
//	$%SU\
      '$'
      %S |U 
//	]\
     %END-IF
//	]\
    %END-IF
//	]\
   %END-IF
//	]\
  %END-IF
//	]
 %END-IF

//f _fine_string
; // mangle_name

: fine_string OBJECT IN %S
//	%f_str_replace(%f_str_replace(%SN,',''),\n,'\#13\#10')
 [%f] str_replace %( [%f] str_replace %( %S |N %, '''' %, '''''' )% %, #13#10 %, '''#13#10''' )% 

//f _cut_quotes
; // fine_string

: cut_quotes OBJECT IN %S
//	%f_cut_postfix(%f_cut_prefix(%SN,%f_quote(%S)),%f_quote(%S))
 [%f] cut_postfix %( [%f] cut_prefix %( %S |N %, [%f] quote %( %S )% )% %, [%f] quote %( %S )% )% 

//f _is_default_up_value
; // cut_quotes

: is_default_up_value OBJECT IN %S
//	[{"%1N"="is static"&"%2N"="undefined"}{\
 %IF ( ( %1 |N ) %== 'is static' %&& 
   ( ( %2 |N ) %== 'undefined'  ) ) 
  %ELSE
//	[{"%1N"="unstereotyped"&"%2N"="false"}{\
   %IF ( ( %1 |N ) %== 'unstereotyped' %&& 
     ( ( %2 |N ) %== false  ) ) 
    %ELSE
//	[{"%1N"="can set visibility level"&"%2N"="false"}{\
     %IF ( ( %1 |N ) %== 'can set visibility level' %&& 
       ( ( %2 |N ) %== false  ) ) 
      %ELSE
//	[{"%1N"="exception"&"%2N"="false"}{\
       %IF ( ( %1 |N ) %== 'exception' %&& 
         ( ( %2 |N ) %== false  ) ) 
        %ELSE
//	[{"%1N"="has derived impl"&"%2N"="false"}{\
         %IF ( ( %1 |N ) %== 'has derived impl' %&& 
           ( ( %2 |N ) %== false  ) ) 
          %ELSE
//	[{"%1N"="implementable"&"%2N"="undefined"}{\
           %IF ( ( %1 |N ) %== 'implementable' %&& 
             ( ( %2 |N ) %== 'undefined'  ) ) 
            %ELSE
//	[{"%1N"="disable forward decl"&"%2N"="false"}{\
             %IF ( ( %1 |N ) %== 'disable forward decl' %&& 
               ( ( %2 |N ) %== false  ) ) 
              %ELSE
//	[{"%1N"="newRTTI"&"%2N"="false"}{\
               %IF ( ( %1 |N ) %== 'newRTTI' %&& 
                 ( ( %2 |N ) %== false  ) ) 
                %ELSE
//	[{"%1N"="isPointer"&"%2N"="false"}{\
                 %IF ( ( %1 |N ) %== 'isPointer' %&& 
                   ( ( %2 |N ) %== false  ) ) 
                  %ELSE
//	[{"%1N"="isClassRef"&"%2N"="false"}{\
                   %IF ( ( %1 |N ) %== 'isClassRef' %&& 
                     ( ( %2 |N ) %== false  ) ) 
                    %ELSE
//	[{"%1N"="force what"&"%2N"="false"}{\
                     %IF ( ( %1 |N ) %== 'force what' %&& 
                       ( ( %2 |N ) %== false  ) ) 
                      %ELSE
//	[{"%1N"="is_runtime"&"%2N"="false"}{\
                       %IF ( ( %1 |N ) %== 'is_runtime' %&& 
                         ( ( %2 |N ) %== false  ) ) 
                        %ELSE
//	[{"%1N"="packed"&"%2N"="false"}{\
                         %IF ( ( %1 |N ) %== 'packed' %&& 
                           ( ( %2 |N ) %== false  ) ) 
                          %ELSE
//	[{"%1N"="Need init ctor"&"%2N"="false"}{\
                           %IF ( ( %1 |N ) %== 'Need init ctor' %&& 
                             ( ( %2 |N ) %== false  ) ) 
                            %ELSE
//	[{"%1N"="IsAutoHelper"&"%2N"="false"}{\
                             %IF ( ( %1 |N ) %== 'IsAutoHelper' %&& 
                               ( ( %2 |N ) %== false  ) ) 
                              %ELSE
//	[{"%1N"="force usage"&"%2N"="false"}{\
                               %IF ( ( %1 |N ) %== 'force usage' %&& 
                                 ( ( %2 |N ) %== false  ) ) 
                                %ELSE
//	[{"%1N"="no_root_class"&"%2N"="false"}{\
                                 %IF ( ( %1 |N ) %== 'no_root_class' %&& 
                                   ( ( %2 |N ) %== false  ) ) 
                                  %ELSE
//	[{"%1N"="is immediate"&"%2N"="undefined"}{\
                                   %IF ( ( %1 |N ) %== 'is immediate' %&& 
                                     ( ( %2 |N ) %== 'undefined'  ) ) 
                                    %ELSE
//	[{"%1N"="need inline-file"&"%2N"="false"}{\
                                     %IF ( ( %1 |N ) %== 'need inline-file' %&& 
                                       ( ( %2 |N ) %== false  ) ) 
                                      %ELSE
//	[{"%1N"="need impl-file"&"%2N"="false"}{\
                                       %IF ( ( %1 |N ) %== 'need impl-file' %&& 
                                         ( ( %2 |N ) %== false  ) ) 
                                        %ELSE
//	[{"%1N"="local helper"&"%2N"="false"}{\
                                         %IF ( ( %1 |N ) %== 'local helper' %&& 
                                           ( ( %2 |N ) %== false  ) ) 
                                          %ELSE
//	[{"%1N"="need objcounter"&"%2N"="true"}{\
                                           %IF ( ( %1 |N ) %== 'need objcounter' %&& 
                                             ( ( %2 |N ) %== true  ) ) 
                                            %ELSE
//	[{"%1N"="singleton"&"%2N"="false"}{\
                                             %IF ( ( %1 |N ) %== 'singleton' %&& 
                                               ( ( %2 |N ) %== false  ) ) 
                                              %ELSE
//	[{"%1N"="Refcount"&"%2N"="none"}{\
                                               %IF ( ( %1 |N ) %== 'Refcount' %&& 
                                                 ( ( %2 |N ) %== 'none'  ) ) 
                                                %ELSE
//	[{"%1N"="Need copy ctor"&"%2N"="false"}{\
                                                 %IF ( ( %1 |N ) %== 'Need copy ctor' %&& 
                                                   ( ( %2 |N ) %== false  ) ) 
                                                  %ELSE
//	[{"%1N"="Need assign op"&"%2N"="false"}{\
                                                   %IF ( ( %1 |N ) %== 'Need assign op' %&& 
                                                     ( ( %2 |N ) %== false  ) ) 
                                                    %ELSE
//	[{"%1N"="call way"&"%2N"="forth"}{\
                                                     %IF ( ( %1 |N ) %== 'call way' %&& 
                                                       ( ( %2 |N ) %== 'forth'  ) ) 
                                                      %ELSE
//	[{"%1N"="native definition"&"%2N"="none"}{\
                                                       %IF ( ( %1 |N ) %== 'native definition' %&& 
                                                         ( ( %2 |N ) %== 'none'  ) ) 
                                                        %ELSE
//	[{"%1N"="Must throw in error"&"%2N"="true"}{\
                                                         %IF ( ( %1 |N ) %== 'Must throw in error' %&& 
                                                           ( ( %2 |N ) %== true  ) ) 
                                                          %ELSE
//	[{"%1N"="is default ancestor"&"%2N"="false"}{\
                                                           %IF ( ( %1 |N ) %== 'is default ancestor' %&& 
                                                             ( ( %2 |N ) %== false  ) ) 
                                                            %ELSE
//	[{"%1N"="weak"&"%2N"="false"}{\
                                                             %IF ( ( %1 |N ) %== 'weak' %&& 
                                                               ( ( %2 |N ) %== false  ) ) 
                                                              %ELSE
//	[{"%1N"="local supervisor"&"%2N"="false"}{\
                                                               %IF ( ( %1 |N ) %== 'local supervisor' %&& 
                                                                 ( ( %2 |N ) %== false  ) ) 
                                                                %ELSE
//	[{"%1N"="non virtual base"&"%2N"="false"}{\
                                                                 %IF ( ( %1 |N ) %== 'non virtual base' %&& 
                                                                   ( ( %2 |N ) %== false  ) ) 
                                                                  %ELSE
//	[{"%1N"="dll export"&"%2N"="true"}{\
                                                                   %IF ( ( %1 |N ) %== 'dll export' %&& 
                                                                     ( ( %2 |N ) %== true  ) ) 
                                                                    %ELSE
//	[{"%1N"="force overload"&"%2N"="false"}{\
                                                                     %IF ( ( %1 |N ) %== 'force overload' %&& 
                                                                       ( ( %2 |N ) %== false  ) ) 
                                                                      %ELSE
//	[{"%1N"="debug log"&"%2N"="false"}{\
                                                                       %IF ( ( %1 |N ) %== 'debug log' %&& 
                                                                         ( ( %2 |N ) %== false  ) ) 
                                                                        %ELSE
//	[{"%1N"="debug tie log"&"%2N"="false"}{\
                                                                         %IF ( ( %1 |N ) %== 'debug tie log' %&& 
                                                                           ( ( %2 |N ) %== false  ) ) 
                                                                          %ELSE
//	[{"%1N"="reads field"&"%2N"="false"}{\
                                                                           %IF ( ( %1 |N ) %== 'reads field' %&& 
                                                                             ( ( %2 |N ) %== false  ) ) 
                                                                            %ELSE
//	[{"%1N"="writes field"&"%2N"="false"}{\
                                                                             %IF ( ( %1 |N ) %== 'writes field' %&& 
                                                                               ( ( %2 |N ) %== false  ) ) 
                                                                              %ELSE
//	[{"%1N"="calling conventions"&"%2N"="none"}{\
                                                                               %IF ( ( %1 |N ) %== 'calling conventions' %&& 
                                                                                 ( ( %2 |N ) %== 'none'  ) ) 
                                                                                %ELSE
//	[{"%1N"="force use const arg"&"%2N"="false"}{\
                                                                                 %IF ( ( %1 |N ) %== 'force use const arg' %&& 
                                                                                   ( ( %2 |N ) %== false  ) ) 
                                                                                  %ELSE
//	[{"%1N"="inherits getter from some ancestor"&"%2N"="undefined"}{\
                                                                                   %IF ( ( %1 |N ) %== 'inherits getter from some ancestor' %&& 
                                                                                     ( ( %2 |N ) %== 'undefined'  ) ) 
                                                                                    %ELSE
//	[{"%1N"="inherits setter from some ancestor"&"%2N"="undefined"}{\
                                                                                     %IF ( ( %1 |N ) %== 'inherits setter from some ancestor' %&& 
                                                                                       ( ( %2 |N ) %== 'undefined'  ) ) 
                                                                                      %ELSE
//	[{"%1N"="is default"&"%2N"="false"}{\
                                                                                       %IF ( ( %1 |N ) %== 'is default' %&& 
                                                                                         ( ( %2 |N ) %== false  ) ) 
                                                                                        %ELSE
//	[{"%1N"="needs field"&"%2N"="undefined"}{\
                                                                                         %IF ( ( %1 |N ) %== 'needs field' %&& 
                                                                                           ( ( %2 |N ) %== 'undefined'  ) ) 
                                                                                          %ELSE
//	[{"%1N"="needs stored directive"&"%2N"="undefined"}{\
                                                                                           %IF ( ( %1 |N ) %== 'needs stored directive' %&& 
                                                                                             ( ( %2 |N ) %== 'undefined'  ) ) 
                                                                                            %ELSE
//	[{"%1N"="is mutable"&"%2N"="false"}{\
                                                                                             %IF ( ( %1 |N ) %== 'is mutable' %&& 
                                                                                               ( ( %2 |N ) %== false  ) ) 
                                                                                              %ELSE
//	[{"%1N"="smart pointer"&"%2N"="false"}{\
                                                                                               %IF ( ( %1 |N ) %== 'smart pointer' %&& 
                                                                                                 ( ( %2 |N ) %== false  ) ) 
                                                                                                %ELSE
//	[{"%1N"="is redefinition"&"%2N"="false"}{\
                                                                                                 %IF ( ( %1 |N ) %== 'is redefinition' %&& 
                                                                                                   ( ( %2 |N ) %== false  ) ) 
                                                                                                  %ELSE
//	[{"%1N"="is namespace"&"%2N"="false"}{\
                                                                                                   %IF ( ( %1 |N ) %== 'is namespace' %&& 
                                                                                                     ( ( %2 |N ) %== false  ) ) 
                                                                                                    %ELSE
//	[{"%1N"="isHighPriority"&"%2N"="false"}{\
                                                                                                     %IF ( ( %1 |N ) %== 'isHighPriority' %&& 
                                                                                                       ( ( %2 |N ) %== false  ) ) 
                                                                                                      %ELSE
//	[{"%1N"="can be parametrized"&"%2N"="undefined"}{\
                                                                                                       %IF ( ( %1 |N ) %== 'can be parametrized' %&& 
                                                                                                         ( ( %2 |N ) %== 'undefined'  ) ) 
                                                                                                        %ELSE
//	[{"%1N"="forward weight"&"%2N"="0"}{\
                                                                                                         %IF ( ( %1 |N ) %== 'forward weight' %&& 
                                                                                                           ( ( %2 |N ) %== 0  ) ) 
                                                                                                          %ELSE
//	[{"%1N"="can be main"&%2N=false}{\
                                                                                                           %IF ( ( %1 |N ) %== 'can be main' %&& 
                                                                                                             ( ( %2 |N ) %==  false  ) ) 
                                                                                                            %ELSE
//	[{"%1N"="inherite constraints"&%2N=true}{\
                                                                                                             %IF ( ( %1 |N ) %== 'inherite constraints' %&& 
                                                                                                               ( ( %2 |N ) %==  true  ) ) 
                                                                                                              %ELSE
//	[{"%1N"="encoding"&%2N=default}{\
                                                                                                               %IF ( ( %1 |N ) %== 'encoding' %&& 
                                                                                                                 ( ( %2 |N ) %== 'default'  ) ) 
                                                                                                                %ELSE
//	[{"%1N"="empty target"&%2N=false}{\
                                                                                                                 %IF ( ( %1 |N ) %== 'empty target' %&& 
                                                                                                                   ( ( %2 |N ) %==  false  ) ) 
                                                                                                                  %ELSE
//	[{"%1N"="make auto copies internal"&%2N=false}{\
                                                                                                                   %IF ( ( %1 |N ) %== 'make auto copies internal' %&& 
                                                                                                                     ( ( %2 |N ) %==  false  ) ) 
                                                                                                                    %ELSE
//	[{"%1N"="no auto copy"&%2N=false}{\
                                                                                                                     %IF ( ( %1 |N ) %== 'no auto copy' %&& 
                                                                                                                       ( ( %2 |N ) %==  false  ) ) 
                                                                                                                      %ELSE
//	[{"%1N"="skip"&%2N=false}{\
                                                                                                                       %IF ( ( %1 |N ) %== 'skip' %&& 
                                                                                                                         ( ( %2 |N ) %==  false  ) ) 
                                                                                                                        %ELSE
//	[{"%1N"="internal"&%2N=false}{\
                                                                                                                         %IF ( ( %1 |N ) %== 'internal' %&& 
                                                                                                                           ( ( %2 |N ) %==  false  ) ) 
                                                                                                                          %ELSE
//	[{"%1N"="need dctor"&%2N=false}{\
                                                                                                                           %IF ( ( %1 |N ) %== 'need dctor' %&& 
                                                                                                                             ( ( %2 |N ) %==  false  ) ) 
                                                                                                                            %ELSE
//	[{"%1N"="need UC"&%2N=false}{\
                                                                                                                             %IF ( ( %1 |N ) %== 'need UC' %&& 
                                                                                                                               ( ( %2 |N ) %==  false  ) ) 
                                                                                                                              %ELSE
//	[{%1N=finished&%2N=true}{\
                                                                                                                               %IF ( ( %1 |N ) %== 'finished' %&& 
                                                                                                                                 ( ( %2 |N ) %==  true  ) ) 
                                                                                                                                %ELSE
//	false\
                                                                                                                                  false 
//	}\
                                                                                                                                %THEN
//	true\
                                                                                                                                 true 
//	]\
                                                                                                                               %END-IF
//	}\
                                                                                                                              %THEN
//	true\
                                                                                                                               true 
//	]\
                                                                                                                             %END-IF
//	}\
                                                                                                                            %THEN
//	true\
                                                                                                                             true 
//	]\
                                                                                                                           %END-IF
//	}\
                                                                                                                          %THEN
//	true\
                                                                                                                           true 
//	]\
                                                                                                                         %END-IF
//	}\
                                                                                                                        %THEN
//	true\
                                                                                                                         true 
//	]\
                                                                                                                       %END-IF
//	}\
                                                                                                                      %THEN
//	true\
                                                                                                                       true 
//	]\
                                                                                                                     %END-IF
//	}\
                                                                                                                    %THEN
//	true\
                                                                                                                     true 
//	]\
                                                                                                                   %END-IF
//	}\
                                                                                                                  %THEN
//	true\
                                                                                                                   true 
//	]\
                                                                                                                 %END-IF
//	}\
                                                                                                                %THEN
//	true\
                                                                                                                 true 
//	]\
                                                                                                               %END-IF
//	}\
                                                                                                              %THEN
//	true\
                                                                                                               true 
//	]\
                                                                                                             %END-IF
//	}\
                                                                                                            %THEN
//	true\
                                                                                                             true 
//	]\
                                                                                                           %END-IF
//	}\
                                                                                                          %THEN
//	true\
                                                                                                           true 
//	]\
                                                                                                         %END-IF
//	}\
                                                                                                        %THEN
//	true\
                                                                                                         true 
//	]\
                                                                                                       %END-IF
//	}\
                                                                                                      %THEN
//	true\
                                                                                                       true 
//	]\
                                                                                                     %END-IF
//	}\
                                                                                                    %THEN
//	true\
                                                                                                     true 
//	]\
                                                                                                   %END-IF
//	}\
                                                                                                  %THEN
//	true\
                                                                                                   true 
//	]\
                                                                                                 %END-IF
//	}\
                                                                                                %THEN
//	true\
                                                                                                 true 
//	]\
                                                                                               %END-IF
//	}\
                                                                                              %THEN
//	true\
                                                                                               true 
//	]\
                                                                                             %END-IF
//	}\
                                                                                            %THEN
//	true\
                                                                                             true 
//	]\
                                                                                           %END-IF
//	}\
                                                                                          %THEN
//	true\
                                                                                           true 
//	]\
                                                                                         %END-IF
//	}\
                                                                                        %THEN
//	true\
                                                                                         true 
//	]\
                                                                                       %END-IF
//	}\
                                                                                      %THEN
//	true\
                                                                                       true 
//	]\
                                                                                     %END-IF
//	}\
                                                                                    %THEN
//	true\
                                                                                     true 
//	]\
                                                                                   %END-IF
//	}\
                                                                                  %THEN
//	true\
                                                                                   true 
//	]\
                                                                                 %END-IF
//	}\
                                                                                %THEN
//	true\
                                                                                 true 
//	]\
                                                                               %END-IF
//	}\
                                                                              %THEN
//	true\
                                                                               true 
//	]\
                                                                             %END-IF
//	}\
                                                                            %THEN
//	true\
                                                                             true 
//	]\
                                                                           %END-IF
//	}\
                                                                          %THEN
//	true\
                                                                           true 
//	]\
                                                                         %END-IF
//	}\
                                                                        %THEN
//	true\
                                                                         true 
//	]\
                                                                       %END-IF
//	}\
                                                                      %THEN
//	true\
                                                                       true 
//	]\
                                                                     %END-IF
//	}\
                                                                    %THEN
//	true\
                                                                     true 
//	]\
                                                                   %END-IF
//	}\
                                                                  %THEN
//	true\
                                                                   true 
//	]\
                                                                 %END-IF
//	}\
                                                                %THEN
//	true\
                                                                 true 
//	]\
                                                               %END-IF
//	}\
                                                              %THEN
//	true\
                                                               true 
//	]\
                                                             %END-IF
//	}\
                                                            %THEN
//	true\
                                                             true 
//	]\
                                                           %END-IF
//	}\
                                                          %THEN
//	true\
                                                           true 
//	]\
                                                         %END-IF
//	}\
                                                        %THEN
//	true\
                                                         true 
//	]\
                                                       %END-IF
//	}\
                                                      %THEN
//	true\
                                                       true 
//	]\
                                                     %END-IF
//	}\
                                                    %THEN
//	true\
                                                     true 
//	]\
                                                   %END-IF
//	}\
                                                  %THEN
//	true\
                                                   true 
//	]\
                                                 %END-IF
//	}\
                                                %THEN
//	true\
                                                 true 
//	]\
                                               %END-IF
//	}\
                                              %THEN
//	true\
                                               true 
//	]\
                                             %END-IF
//	}\
                                            %THEN
//	true\
                                             true 
//	]\
                                           %END-IF
//	}\
                                          %THEN
//	true\
                                           true 
//	]\
                                         %END-IF
//	}\
                                        %THEN
//	true\
                                         true 
//	]\
                                       %END-IF
//	}\
                                      %THEN
//	true\
                                       true 
//	]\
                                     %END-IF
//	}\
                                    %THEN
//	true\
                                     true 
//	]\
                                   %END-IF
//	}\
                                  %THEN
//	true\
                                   true 
//	]\
                                 %END-IF
//	}\
                                %THEN
//	true\
                                 true 
//	]\
                               %END-IF
//	}\
                              %THEN
//	true\
                               true 
//	]\
                             %END-IF
//	}\
                            %THEN
//	true\
                             true 
//	]\
                           %END-IF
//	}\
                          %THEN
//	true\
                           true 
//	]\
                         %END-IF
//	}\
                        %THEN
//	true\
                         true 
//	]\
                       %END-IF
//	}\
                      %THEN
//	true\
                       true 
//	]\
                     %END-IF
//	}\
                    %THEN
//	true\
                     true 
//	]\
                   %END-IF
//	}\
                  %THEN
//	true\
                   true 
//	]\
                 %END-IF
//	}\
                %THEN
//	true\
                 true 
//	]\
               %END-IF
//	}\
              %THEN
//	true\
               true 
//	]\
             %END-IF
//	}\
            %THEN
//	true\
             true 
//	]\
           %END-IF
//	}\
          %THEN
//	true\
           true 
//	]\
         %END-IF
//	}\
        %THEN
//	true\
         true 
//	]\
       %END-IF
//	}\
      %THEN
//	true\
       true 
//	]\
     %END-IF
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//	%f_warning(%1N)\
//	%f_warning(%S{%1N})\
//	[{"%S{%1N}"="%S{!%1N}"{\
//	false\
//	true\
//	]

//f _is_MDA_inner
; // is_default_up_value

: is_MDA_inner OBJECT IN %S
//	[{%SS=MDAOperation|%SS=MDAAttribute|%SS=MDADependency}{\
 %IF ( ( %S |S ) %== 'MDAOperation' %|| 
   ( ( %S |S ) %== 'MDAAttribute'  ) %|| 
   ( ( %S |S ) %== 'MDADependency'  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF

//f _mangle_link_name
; // is_MDA_inner

: mangle_link_name OBJECT IN %S
//	[{%SS=MDAClass|%SS=MDACategory|%f_is_MDA_inner(%S)=true|%SS=MDAAbstractClass}{\
 %IF ( ( %S |S ) %== 'MDAClass' %|| 
   ( ( %S |S ) %== 'MDACategory'  ) %|| 
   ( ( [%f] is_MDA_inner %( %S )% ) %==  true  ) %|| 
   ( ( %S |S ) %== 'MDAAbstractClass'  ) ) 
  %ELSE
//	%f_mangle_name(%S)\
   [%f] mangle_name %( %S )% 
//	}\
  %THEN
//	\<\<%f_mangle_name(%S)\>\>\
  '<<'
  [%f] mangle_name %( %S )% '>>'
//	]
 %END-IF

//f _out_val
; // mangle_link_name

: out_val OBJECT IN %S
//	[{%SN=true|%SN=True}{\
 %IF ( ( %S |N ) %==  true %|| 
   ( ( %S |N ) %== 'True'  ) ) 
  %ELSE
//	[{%SN=false|%SN=False}{\
   %IF ( ( %S |N ) %==  false %|| 
     ( ( %S |N ) %== 'False'  ) ) 
    %ELSE
//	[{%f_consist_of(%SN,"0123456789")=true}{\
     %IF ( ( [%f] consist_of %( %S |N %, '0123456789' )% ) %==  true ) 
      %ELSE
//	'%SN'\
       ''''
       %S |N ''''
//	}\
      %THEN
//	%SN\
      %S |N 
//	]\
     %END-IF
//	}\
    %THEN
//	false\
     false 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF

//f _out_name_comment_prim
; // out_val

: out_name_comment_prim OBJECT IN %S
//	[{"%SN"!=""}{%SU}%f_mangle_name(%S)]
 %IF ( ( %S |N ) %!= '' ) 
  %ELSE
   %S |U 
  %THEN
  [%f] mangle_name %( %S )% 
 %END-IF

//f _out_name_comment
; // out_name_comment_prim

: out_name_comment OBJECT IN %S
//	/* %f_out_name_comment_prim(%S) */
 '/* '
 [%f] out_name_comment_prim %( %S )% ' */'

//f _out_uid_comment
; // out_name_comment

: out_uid_comment OBJECT IN %S
//	/* %SU */
 '/* '
 %S |U ' */'

//f _link_to_element_uid
; // out_uid_comment

: link_to_element_uid OBJECT IN %S
//	%f_out_uid(%S) %f_out_name_comment(%S)
 [%f] out_uid %( %S )% ' '
 [%f] out_name_comment %( %S )% 

//f _inverted_depends
; // link_to_element_uid

: inverted_depends OBJECT IN %S
//	true
 true
//	[{%1U=%S%PU|%SS=Tag}{\
//	false\
//	}\
//	true\
//	]
// - пока так, т.к. есть проблемы с тем, что элементы определябтся не в том порядке

//f _link_to_element
; // inverted_depends

: link_to_element OBJECT IN %S
//	[{%f_inverted_depends(%S,%1)=true}{\
 %IF ( ( [%f] inverted_depends %( %S %, %1 )% ) %==  true ) 
  %ELSE
//	[{%S%PU!=%1%PU}{\
   %IF ( ( %S ->P |U  ) %!= ( %1 ->P |U  ) ) 
    %ELSE
//	@ %f_mangle_link_name(%S)\
     '@ '
     [%f] mangle_link_name %( %S )% 
//	}\
    %THEN
//	%f_clear_list(Parents)\
    [%f] clear_list %( 'Parents' )% 
//	%1<{}{}{%Pr}%f_add_to_list(Parents,P)>\
    %1
    %FOR ( %P |r ) 
     [%f] add_to_list %( 'Parents' %, 'P' )% 
    %END-FOR
 //	@ :: \
    '@ :: '
//	<{}{}{%Pr}\
    %FOR ( %P |r ) 
//	%f_pop_first_to_var(Parents,Par)\
     [%f] pop_first_to_var %( 'Parents' %, 'Par' )% 
//	[{%{Par}U!=%PU}\
     %IF ( ( ( get_global_var ( 'Par' ) |U ) ) %!= ( %P |U ) ) 
//	[{%MU!=%PU}\
      %IF ( ( %M |U ) %!= ( %P |U ) ) 
//	%f_mangle_link_name(%P) \
       [%f] mangle_link_name %( %P )% ' '
//	]\
      %END-IF
//	]\
     %END-IF
//	>\
    %END-FOR
//	%f_mangle_link_name(%S) ;\
    [%f] mangle_link_name %( %S )% ' ;'
//	%f_clear_list(Parents)\
    [%f] clear_list %( 'Parents' )% 
//	]\
   %END-IF
//	 %f_out_uid_comment(%S)\
   ' '
   [%f] out_uid_comment %( %S )% 
//	}\
  %THEN
//	%f_link_to_element_uid(%S)\
  [%f] link_to_element_uid %( %S )% 
//	]
 %END-IF

//f _out_uid
; // link_to_element

: out_uid OBJECT IN %S
//	U$ '%SU'
 'U$ '''
 %S |U '''

//f _safe_link_to_element
; // out_uid

: safe_link_to_element OBJECT IN %S
//	%f_link_to_element_uid(%S)
 [%f] link_to_element_uid %( %S )% 

//f _out_param_type_prim
; // safe_link_to_element

: out_param_type_prim OBJECT IN %S
//	[{"%SN"="a-string"}{\
 %IF ( ( %S |N ) %== 'a-string' ) 
  %ELSE
//	[{"%SN"="boolean"}{\
   %IF ( ( %S |N ) %== 'boolean' ) 
    %ELSE
//	[{"%SN"="MDAClass"}{\
     %IF ( ( %S |N ) %== 'MDAClass' ) 
      %ELSE
//	[{"%SN"="long"}{\
       %IF ( ( %S |N ) %== 'long' ) 
        %ELSE
//	}\
        %THEN
//	INTEGER\
        'INTEGER'
//	]\
       %END-IF
//	}\
      %THEN
//	OBJECT\
      'OBJECT'
//	]\
     %END-IF
//	}\
    %THEN
//	BOOLEAN\
    'BOOLEAN'
//	]\
   %END-IF
//	}\
  %THEN
//	STRING\
  'STRING'
//	]
 %END-IF

//f _out_param_type
; // out_param_type_prim

: out_param_type OBJECT IN %S
//	[ %f_out_param_type_prim(%S)]
 %IF-NOT-EMPTY
  ' '
  [%f] out_param_type_prim %( %S )% 
 %END-IF

//f _out_param
; // out_param_type

: out_param OBJECT IN %S
//	[{"%SN"!=""}\
 %IF ( ( %S |N ) %!= '' ) 
//	%f_out_param_type(%S%T)\
  [%f] out_param_type %( %S ->T  )% 
//	 IN %SN\
  ' IN '
  %S |N 
//	]
 %END-IF

//f _out_params
; // out_param

: out_params OBJECT IN %S
//	[{%PS!=MDAUtilityPack} OBJECT] IN \%S\
 %IF ( ( %P |S ) %!= 'MDAUtilityPack' ) 
  ' OBJECT' 
 %END-IF
 ' IN %S'
//	<{}{%CC=Parameter}%f_out_param(%C)>
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Parameter' ) 
  [%f] out_param %( %C )% 
 %END-FOR

//f _is_MDA_stereo
; // out_params

: is_MDA_stereo OBJECT IN %S
//@ %SU
//	[{%SN=MDAClass|%SN=MDAAbstractClass|%SN=MDAUtilityPack|%SN=MDAGenerator|%SN=MDACategory|%SN=MDAOperation|%SN=MDADependency|%SN=MDAAttribute|%SN=MDASubStereotype|%SN=MDASubChild|%SN=MDAStateMachine|%SN=MDAState|%SN=MDAStateAction|%SN=MDATransition|%SN=MDATransitionAttribute|%SN=MDAParameter|%SN=MDATemplates|%SN=MDALayer|%SN=MDALibrary|%SN=MDAReport}{\
//	[{%SN=MDAAbstractClass|%SN=MDAUtilityPack|%SN=MDAGenerator|%SN=MDAOperation|%SN=MDADependency|%SN=MDAAttribute|%SN=MDASubStereotype|%SN=MDASubChild|%SN=MDAStateMachine|%SN=MDAState|%SN=MDAStateAction|%SN=MDATransition|%SN=MDATransitionAttribute|%SN=MDAParameter|%SN=MDATemplates|%SN=MDALayer|%SN=MDALibrary|%SN=MDAReport}{\
 %IF ( ( %S |N ) %== 'MDAAbstractClass' %|| 
   ( ( %S |N ) %== 'MDAUtilityPack'  ) %|| 
   ( ( %S |N ) %== 'MDAGenerator'  ) %|| 
   ( ( %S |N ) %== 'MDAOperation'  ) %|| 
   ( ( %S |N ) %== 'MDADependency'  ) %|| 
   ( ( %S |N ) %== 'MDAAttribute'  ) %|| 
   ( ( %S |N ) %== 'MDASubStereotype'  ) %|| 
   ( ( %S |N ) %== 'MDASubChild'  ) %|| 
   ( ( %S |N ) %== 'MDAStateMachine'  ) %|| 
   ( ( %S |N ) %== 'MDAState'  ) %|| 
   ( ( %S |N ) %== 'MDAStateAction'  ) %|| 
   ( ( %S |N ) %== 'MDATransition'  ) %|| 
   ( ( %S |N ) %== 'MDATransitionAttribute'  ) %|| 
   ( ( %S |N ) %== 'MDAParameter'  ) %|| 
   ( ( %S |N ) %== 'MDATemplates'  ) %|| 
   ( ( %S |N ) %== 'MDALayer'  ) %|| 
   ( ( %S |N ) %== 'MDALibrary'  ) %|| 
   ( ( %S |N ) %== 'MDAReport'  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
// - это пока не экспортируем, с этим надо разбираться отдельно - нужно слово StereotypeStereotypeProducer и через него надо определять MDAClass и MDACategory

//f _is_MDA_elem
; // is_MDA_stereo

: is_MDA_elem OBJECT IN %S
//@ %SU
//	[{%SS=MDAClass|%SS=MDAAbstractClass|%SS=MDAUtilityPack|%SS=MDAGenerator|%SS=MDACategory|%SS=MDADependency}{\
 %IF ( ( %S |S ) %== 'MDAClass' %|| 
   ( ( %S |S ) %== 'MDAAbstractClass'  ) %|| 
   ( ( %S |S ) %== 'MDAUtilityPack'  ) %|| 
   ( ( %S |S ) %== 'MDAGenerator'  ) %|| 
   ( ( %S |S ) %== 'MDACategory'  ) %|| 
   ( ( %S |S ) %== 'MDADependency'  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF

//f _is_MDA_oper
; // is_MDA_elem

: is_MDA_oper OBJECT IN %S
//@ %SU
//	[{%SC=Operation}{\
 %IF ( ( %S |C ) %== 'Operation' ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	[{%f_is_MDA_elem(%S%P)=true}{\
  %IF ( ( [%f] is_MDA_elem %( %S ->P  )% ) %==  true ) 
   %ELSE
//	false\
     false 
//	}\
   %THEN
//	true\
    true 
//	]\
  %END-IF
//	]
 %END-IF

//f _out_MDA_params
; // is_MDA_oper

: out_MDA_params OBJECT IN %S
//	[{%f_is_MDA_oper(%S)=true}\
 %IF ( ( [%f] is_MDA_oper %( %S )% ) %==  true ) 
//	%f_out_params(%S)\
  [%f] out_params %( %S )% 
//	]
 %END-IF

//f _out_access
; // out_MDA_params

: out_access OBJECT IN %S
//	[{%SV=PrivateAccess}{\
 %IF ( ( %S |V ) %== 'PrivateAccess' ) 
  %ELSE
//	[{%SV=ProtectedAccess}\
   %IF ( ( %S |V ) %== 'ProtectedAccess' ) 
//	PROTECTED \
    'PROTECTED '
//	]\
   %END-IF
//	}\
  %THEN
//	PRIVATE \
  'PRIVATE '
//	]
 %END-IF

//f _is_op
; // out_access

: is_op OBJECT IN %S
//	[{%SC=Operation|%S#f_IsMethod()=true}{\
 %IF ( ( %S |C ) %== 'Operation' %|| 
   ( ( %S %?f IsMethod %( )% ) %==  true  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF

//f _is_attr
; // is_op

: is_attr OBJECT IN %S
//	[{%SC=Attribute}{\
 %IF ( ( %S |C ) %== 'Attribute' ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF

//f _out_META
; // is_attr

: out_META OBJECT IN %S
//	%f_clear_list(UP_LIST)\
 [%f] clear_list %( 'UP_LIST' )% 
//	%f_ups_to_list(S,UP_LIST)\
 [%f] ups_to_list %( 'S' %, 'UP_LIST' )% 
//	[\
 %IF-NOT-EMPTY
//	<{}{%f_is_empty(UP_LIST)=false}{W}\
  %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'UP_LIST' )% ) %==  false ) 
   ( 'W' ) 
//	[%f_pop_first_to_var(UP_LIST,UP)\
   %IF-NOT-EMPTY
    [%f] pop_first_to_var %( 'UP_LIST' %, 'UP' )% 

//	%f_split_to_list(VALS,%{UP}N, = )\
    [%f] split_to_list %( 'VALS' %, ( get_global_var ( 'UP' ) |N ) %, ' = ' )% 
//	%f_pop_first_to_var(VALS,LEFT)\
    [%f] pop_first_to_var %( 'VALS' %, 'LEFT' )% 
//	%f_pop_first_to_var(VALS,RIGHT)\
    [%f] pop_first_to_var %( 'VALS' %, 'RIGHT' )% 
//	%f_set_var(LEFT,"%f_cut_quotes("%{LEFT}N")")\
    [%f] set_var %( 'LEFT' %, [%f] cut_quotes %( ( get_global_var ( 'LEFT' ) |N ) )% )% 
//	%f_set_var(RIGHT,"%f_cut_quotes("%{RIGHT}N")")\
    [%f] set_var %( 'RIGHT' %, [%f] cut_quotes %( ( get_global_var ( 'RIGHT' ) |N ) )% )% 
//	%f_set_var(RIGHT,"%f_fine_string("%{RIGHT}N")")\
    [%f] set_var %( 'RIGHT' %, [%f] fine_string %( ( get_global_var ( 'RIGHT' ) |N ) )% )% 

//	[\
    %IF-NOT-EMPTY
//	[{"%{RIGHT}N"!=""}\
     %IF ( ( ( get_global_var ( 'RIGHT' ) |N ) ) %!= '' ) 

// - не выводим пустые значения
//	[{%f_is_default_up_value(%S,%{LEFT},%{RIGHT})!=true}\
      %IF ( ( [%f] is_default_up_value %( %S %, ( get_global_var ( 'LEFT' ) ) %, ( get_global_var ( 'RIGHT' ) ) )% ) %!=  true ) 
//	#  \%upv \
       out_indent '  %upv '


//	"%{LEFT}N" \
       ( get_global_var ( 'LEFT' ) |N ) ' '
//	%f_out_val("%{RIGHT}N")
       [%f] out_val %( ( get_global_var ( 'RIGHT' ) |N ) )% 
//	]\
      %END-IF
//	]\
     %END-IF
//	]\
    %END-IF


//	]>\
   %END-IF
  %END-FOR
//	]\
 %END-IF
//	%f_clear_list(VALS)\
 [%f] clear_list %( 'VALS' )% 
//	%f_clear_list(UP_LIST)
 [%f] clear_list %( 'UP_LIST' )% 

//f _out_METAs
; // out_META

: out_METAs OBJECT IN %S
//	[\n# \%META
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %META'
//	%f_out_META(%S)\
  [%f] out_META %( %S )% 
//	# ; // \%META]
  out_indent ' ; // %META' 
 %END-IF

//f _mangle_stereo
; // out_METAs

: mangle_stereo OBJECT IN %S
//	[\
 %IF-NOT-EMPTY
//	\<\<[{"%SS"!=""}{%SC}\
  '<<'
  %IF ( ( %S |S ) %!= '' ) 
   %ELSE
    %S |C 
   %THEN
//	[{%SS=MDAClass}\
   %IF ( ( %S |S ) %== 'MDAClass' ) 
//	[{%SN=MDAClass|%SN=MDACategory|%SN=MDAAbstractClass|%SN=MDADependency|%SN=MDAAttribute|%SN=MDAOperation|%SN=MDAParameter}\
    %IF ( ( %S |N ) %== 'MDAClass' %|| 
      ( ( %S |N ) %== 'MDACategory'  ) %|| 
      ( ( %S |N ) %== 'MDAAbstractClass'  ) %|| 
      ( ( %S |N ) %== 'MDADependency'  ) %|| 
      ( ( %S |N ) %== 'MDAAttribute'  ) %|| 
      ( ( %S |N ) %== 'MDAOperation'  ) %|| 
      ( ( %S |N ) %== 'MDAParameter'  ) ) 
//	@\
     '@'
//	]\
    %END-IF
//	]\
   %END-IF
//	%f_str_replace(%SS, ,_)\
   [%f] str_replace %( %S |S %, ' ' %, '_' )% 
//	]\>\> \
  %END-IF
  '>> '
//	]
 %END-IF

//f _out_sig
; // mangle_stereo

: out_sig OBJECT IN %S
//	[{"%SS"=""&"%f_out_param_type_prim(%S%T)"!=""}{\
 %IF ( ( %S |S ) %== '' %&& 
   ( ( [%f] out_param_type_prim %( %S ->T  )% ) %!= ''  ) ) 
  %ELSE
//	%f_mangle_stereo(%S)\
   [%f] mangle_stereo %( %S )% 
//	}\
  %THEN
//	%f_out_param_type_prim(%S%T) FUNCTION \
  [%f] out_param_type_prim %( %S ->T  )% ' FUNCTION '
//	]\
 %END-IF

//	%f_mangle_name(%S)\
 [%f] mangle_name %( %S )% 
//	%f_out_MDA_params(%S)
 [%f] out_MDA_params %( %S )% 

//f _out_MDA_op
; // out_sig

: out_MDA_op OBJECT IN %S
//	[{%f_is_MDA_oper(%S)=true}\
 %IF ( ( [%f] is_MDA_oper %( %S )% ) %==  true ) 
//	%f_out_sig(%S)\
  [%f] out_sig %( %S )% 
//	%f_out_METAs(%S)
  [%f] out_METAs %( %S )% 
//	# %U[{_%1U}\n#  NotImplemented\n# ]
  out_indent ' '
  %U%IF ( '_( '
   %1 |U ) ) 
   #13#10
   out_indent '  NotImplemented'#13#10
   out_indent ' ' 
  %END-IF
 //	#; // %f_out_name_comment_prim(%S)\
  out_indent '; // '
  [%f] out_name_comment_prim %( %S )% 
//	]
 %END-IF

//f _is_Redefinition
; // out_MDA_op

: is_Redefinition OBJECT IN %S
//	[{%f_is_MDA_elem(%S)=true}\
 %IF ( ( [%f] is_MDA_elem %( %S )% ) %==  true ) 
//	[{%f_is_MDA_oper(%S)!=true&%SS!=MDADependency}\
  %IF ( ( [%f] is_MDA_oper %( %S )% ) %!=  true %&& 
    ( ( %S |S ) %!= 'MDADependency'  ) ) 
//	[{"<{}{%RN=%SN}{C}>"!="0"|"<{}{%GN=%SN}{C}>"!="0"}\
   %IF ( 
    %FOR %ITEM-CONDITION ( ( %R |N ) %== ( %S |N ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0 %|| 
     ( 
    %FOR %ITEM-CONDITION ( ( %G |N ) %== ( %S |N ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0  ) ) 
//	true\
     true 
//	]\
   %END-IF
//	]\
  %END-IF
//	]
 %END-IF

//f _out_abstraction
; // is_Redefinition

: out_abstraction OBJECT IN %S
//	[{%Sa=final}{\
 %IF ( ( %S |a ) %== 'final' ) 
  %ELSE
//	[{%Sa=abstract}\
   %IF ( ( %S |a ) %== 'abstract' ) 
//	ABSTRACT \
    'ABSTRACT '
//	]\
   %END-IF
//	}\
  %THEN
//	FINAL \
  'FINAL '
//	]
 %END-IF

//f _out_linktype
; // out_abstraction

: out_linktype OBJECT IN %S
//	[{%Sl=lnk}{\
 %IF ( ( %S |l ) %== 'lnk' ) 
  %ELSE
//	[{%Sa=ref}\
   %IF ( ( %S |a ) %== 'ref' ) 
//	REFERENCE \
    'REFERENCE '
//	]\
   %END-IF
//	}\
  %THEN
//	LINK \
  'LINK '
//	]
 %END-IF

//f _dump_to_FORTH
; // out_linktype

: dump_to_FORTH OBJECT IN %S
//	[
 %IF-NOT-EMPTY

//	#// Необходимые forward определения
  out_indent '// Необходимые forward определения'
//	<# // %FN %FU
  %FOR out_indent ' // '
   %F |N ' '
   %F |U 
//	>
  %END-FOR
//	]\
 %END-IF

//	#[{%S#f_is_virtual()=true}SUMMONED ]\
 out_indent %IF ( ( %S %?f is_virtual %( )% ) %==  true ) 
  'SUMMONED ' 
 %END-IF

//	[{%f_is_Redefinition(%S)=true}\
 %IF ( ( [%f] is_Redefinition %( %S )% ) %==  true ) 
//	REDEFINITION \
  'REDEFINITION '
//	]\
 %END-IF

//	%f_out_access(%S)\
 [%f] out_access %( %S )% 

//	%f_out_abstraction(%S)\
 [%f] out_abstraction %( %S )% 
//	%f_out_linktype(%S)\
 [%f] out_linktype %( %S )% 

//	%f_out_sig(%S)
 [%f] out_sig %( %S )% 

//	# \%UID '%SU'\
 out_indent ' %UID '''
 %S |U ''''

//	[{"%SD"!=""&"%SD"!="undefined"}\
 %IF ( ( %S |D ) %!= '' %&& 
   ( ( %S |D ) %!= 'undefined'  ) ) 
//	\n# \%DOCUMENTATION '%f_fine_string("%SD")']\
  #13#10
  out_indent ' %DOCUMENTATION '''
  [%f] fine_string %( %S |D )% '''' 
 %END-IF

//	[{%TN!=void}\
 %IF ( ( %T |N ) %!= 'void' ) 
//	[\n# \%TARGET %f_safe_link_to_element(%T)]\
  %IF-NOT-EMPTY
   #13#10
   out_indent ' %TARGET '
   [%f] safe_link_to_element %( %T )% 
  %END-IF
//	]\
 %END-IF

//	[{"%VU"!=""}{\
 %IF ( ( %V |U ) %!= '' ) 
  %ELSE
//	[{"%VN"!=""}\
   %IF ( ( %V |N ) %!= '' ) 


//	[{%SS=list}{\
    %IF ( ( %S |S ) %== 'list' ) 
     %ELSE
//	[\n# \%VALUE %f_out_val(%f_fine_string("%VN"))]\
      %IF-NOT-EMPTY
       #13#10
       out_indent ' %VALUE '
       [%f] out_val %( [%f] fine_string %( %V |N )% )% 
      %END-IF
//	}\
     %THEN
//	%f_split_to_list(VALS,%VN,|)\
     [%f] split_to_list %( 'VALS' %, %V |N %, '|' )% 
//	%f_pop_first_to_var(VALS,LEFT)\
     [%f] pop_first_to_var %( 'VALS' %, 'LEFT' )% 
//	[\n# \%VALUE %f_out_val(%f_fine_string("%{LEFT}N"))]\
     %IF-NOT-EMPTY
      #13#10
      out_indent ' %VALUE '
      [%f] out_val %( [%f] fine_string %( ( get_global_var ( 'LEFT' ) |N ) )% )% 
     %END-IF
//	[\n# \%VALUES
     %IF-NOT-EMPTY
      #13#10
      out_indent ' %VALUES'
//	<{}{%f_is_empty(VALS)=false}{W}\
      %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'VALS' )% ) %==  false ) 
       ( 'W' ) 
//	[%f_pop_first_to_var(VALS,LEFT)\
       %IF-NOT-EMPTY
        [%f] pop_first_to_var %( 'VALS' %, 'LEFT' )% 
//	#  %f_out_val(%f_fine_string("%{LEFT}N"))
        out_indent '  '
        [%f] out_val %( [%f] fine_string %( ( get_global_var ( 'LEFT' ) |N ) )% )% 
//	]\
       %END-IF
//	>\
      %END-FOR
//	# ; // \%VALUES]\
      out_indent ' ; // %VALUES' 
     %END-IF


//	%f_clear_list(VALS)\
     [%f] clear_list %( 'VALS' )% 
//	]\
    %END-IF

// - SS=list


//	]\
   %END-IF
//	}\
  %THEN
//	[\n# \%VALUE %f_safe_link_to_element(%V)]\
  %IF-NOT-EMPTY
   #13#10
   out_indent ' %VALUE '
   [%f] safe_link_to_element %( %V )% 
  %END-IF
//	]\
 %END-IF

//	[\n# \%INCLUDES
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %INCLUDES'
//	#  <{\n#  }{"%CO"!=""}'%f_str_replace(%Co,/,\\)' %f_out_name_comment(%C)>
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C |O ) %!= '' ) 
   ''''
   [%f] str_replace %( %C |o %, '/' %, '\' )% ''' '
   [%f] out_name_comment %( %C )% 
  %END-FOR
//	# ; // \%INCLUDES]\
  out_indent ' ; // %INCLUDES' 
 %END-IF

//	[\n# \%DEPENDS
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %DEPENDS'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%D)\
   [%f] safe_link_to_element %( %D )% 
//	>
  %END-FOR
//	# ; // \%DEPENDS]\
  out_indent ' ; // %DEPENDS' 
 %END-IF

//	%f_out_METAs(%S)\
 [%f] out_METAs %( %S )% 

//	[\n# \%FORWARDS
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %FORWARDS'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%F)\
   [%f] safe_link_to_element %( %F )% 
//	>
  %END-FOR
//	# ; // \%FORWARDS]\
  out_indent ' ; // %FORWARDS' 
 %END-IF

//	[\n# \%TOBEINCLUDED
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %TOBEINCLUDED'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%w)\
   [%f] safe_link_to_element %( %w )% 
//	>
  %END-FOR
//	# ; // \%TOBEINCLUDED]\
  out_indent ' ; // %TOBEINCLUDED' 
 %END-IF

//	[\n# \%RAISES
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %RAISES'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%E)\
   [%f] safe_link_to_element %( %E )% 
//	>
  %END-FOR
//	# ; // \%RAISES]\
  out_indent ' ; // %RAISES' 
 %END-IF

//	[\n# \%RAISESINSET
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %RAISESINSET'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%e)\
   [%f] safe_link_to_element %( %e )% 
//	>
  %END-FOR
//	# ; // \%RAISESINSET]\
  out_indent ' ; // %RAISESINSET' 
 %END-IF

//	[\n# \%IMPLEMENTS
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %IMPLEMENTS'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 

//	%f_out_uid(%R) %f_out_name_comment(%R)
//	%f_link_to_element(%R,%S)>
   [%f] link_to_element %( %R %, %S )% 
  %END-FOR
//	# ; // \%IMPLEMENTS]\
  out_indent ' ; // %IMPLEMENTS' 
 %END-IF

//	[\n# \%INHERITS
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %INHERITS'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%G)\
   [%f] safe_link_to_element %( %G )% 
//	>
  %END-FOR
//	# ; // \%INHERITS]\
  out_indent ' ; // %INHERITS' 
 %END-IF

//	[\n# \%REALIZES
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %REALIZES'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%o)\
   [%f] safe_link_to_element %( %o )% 
//	>
  %END-FOR
//	# ; // \%REALIZES]\
  out_indent ' ; // %REALIZES' 
 %END-IF

//	[\n# \%OVERRIDES
 %IF-NOT-EMPTY
  #13#10
  out_indent ' %OVERRIDES'
//	#  <{\n#  }\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
//	%f_safe_link_to_element(%O)\
   [%f] safe_link_to_element %( %O )% 
//	>
  %END-FOR
//	# ; // \%OVERRIDES]\
  out_indent ' ; // %OVERRIDES' 
 %END-IF

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[\n#\%PARAMETERS
 %IF-NOT-EMPTY
  #13#10
  out_indent '%PARAMETERS'
//	%f_shift_intend(1)\
  [%f] shift_intend %( 1 )% 
//	[<{\n}{"%CO"=""&%CC=Parameter}%f_dump_to_FORTH(%C)>]
  %IF-NOT-EMPTY
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
     ( ( %C |C ) %== 'Parameter'  ) ) 
    [%f] dump_to_FORTH %( %C )% 
   %END-FOR
  %END-IF
//	%f_shift_intend(-1)\
  [%f] shift_intend %( -1 )% 
//	#; // \%PARAMETERS]\
  out_indent '; // %PARAMETERS' 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[\n#\%LINKS
 %IF-NOT-EMPTY
  #13#10
  out_indent '%LINKS'
//	%f_shift_intend(1)\
  [%f] shift_intend %( 1 )% 
//	[<{\n}{"%CO"=""&%CC=Dependency}%f_dump_to_FORTH(%C)>]
  %IF-NOT-EMPTY
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
     ( ( %C |C ) %== 'Dependency'  ) ) 
    [%f] dump_to_FORTH %( %C )% 
   %END-FOR
  %END-IF
//	%f_shift_intend(-1)\
  [%f] shift_intend %( -1 )% 
//	#; // \%LINKS]\
  out_indent '; // %LINKS' 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[{%f_is_attr(%S)!=true}\
 %IF ( ( [%f] is_attr %( %S )% ) %!=  true ) 
//	[\n#\%ATTRIBUTES
  %IF-NOT-EMPTY
   #13#10
   out_indent '%ATTRIBUTES'
//	%f_shift_intend(1)\
   [%f] shift_intend %( 1 )% 
//	[<{\n}{"%CO"=""&%f_is_attr(%C)=true}%f_dump_to_FORTH(%C)>]
   %IF-NOT-EMPTY
    %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
     %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
      ( ( [%f] is_attr %( %C )% ) %==  true  ) ) 
     [%f] dump_to_FORTH %( %C )% 
    %END-FOR
   %END-IF
//	%f_shift_intend(-1)\
   [%f] shift_intend %( -1 )% 
//	#; // \%ATTRIBUTES]\
   out_indent '; // %ATTRIBUTES' 
  %END-IF
//	]\
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[{%f_is_attr(%S)=true}\
 %IF ( ( [%f] is_attr %( %S )% ) %==  true ) 
//	[\n#\%INDEXES
  %IF-NOT-EMPTY
   #13#10
   out_indent '%INDEXES'
//	%f_shift_intend(1)\
   [%f] shift_intend %( 1 )% 
//	[<{\n}#\%INDEX %f_mangle_name(%C) [\%TARGET %f_safe_link_to_element(%C%T)\n#]\
   %IF-NOT-EMPTY
    %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
     out_indent '%INDEX '
     [%f] mangle_name %( %C )% ' '
     %IF-NOT-EMPTY
      '%TARGET '
      [%f] safe_link_to_element %( %C ->T  )% #13#10
      out_indent 
     %END-IF
//	;>]
     ';' 
    %END-FOR
   %END-IF
//	%f_shift_intend(-1)\
   [%f] shift_intend %( -1 )% 
//	#; // \%INDEXES]\
   out_indent '; // %INDEXES' 
  %END-IF
//	]\
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[\n#\%OPERATIONS
 %IF-NOT-EMPTY
  #13#10
  out_indent '%OPERATIONS'
//	%f_shift_intend(1)\
  [%f] shift_intend %( 1 )% 
//	[<{\n}{"%CO"=""&%f_is_op(%C)=true}%f_dump_to_FORTH(%C)>]
  %IF-NOT-EMPTY
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
     ( ( [%f] is_op %( %C )% ) %==  true  ) ) 
    [%f] dump_to_FORTH %( %C )% 
   %END-FOR
  %END-IF
//	%f_shift_intend(-1)\
  [%f] shift_intend %( -1 )% 
//	#; // \%OPERATIONS]\
  out_indent '; // %OPERATIONS' 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
 [%f] shift_intend %( 1 )% 
//	[\n#\%CHILDREN
 %IF-NOT-EMPTY
  #13#10
  out_indent '%CHILDREN'
//	%f_shift_intend(1)\
  [%f] shift_intend %( 1 )% 
//	[#\n<{\n}{"%CO"=""&%CC!=Parameter&%CC!=Dependency&%f_is_attr(%C)!=true&%f_is_op(%C)!=true}%f_dump_to_FORTH(%C)>]\
  %IF-NOT-EMPTY
   out_indent #13#10
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
     ( ( %C |C ) %!= 'Parameter'  ) %&& 
     ( ( %C |C ) %!= 'Dependency'  ) %&& 
     ( ( [%f] is_attr %( %C )% ) %!=  true  ) %&& 
     ( ( [%f] is_op %( %C )% ) %!=  true  ) ) 
    [%f] dump_to_FORTH %( %C )% 
   %END-FOR
  %END-IF
//	%f_shift_intend(-1)\
  [%f] shift_intend %( -1 )% 
//	\n\
  #13#10
//	#; // \%CHILDREN]\
  out_indent '; // %CHILDREN' 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	%f_shift_intend(1)\
//	[\
//	\n#\
//	<{\n#}{%Ca!=abstract&%f_is_MDA_oper(%C)=true}\
//	[%f_out_abstraction(%C)%f_out_MDA_op(%C,%S)]>\
//	]\
//	%f_shift_intend(-1)\

//	%f_shift_intend(1)\
//	[\
//	\n#\
//	<{\n#}REALIZE %f_out_MDA_op(%o,%S)>\
//	]\
//	%f_shift_intend(-1)\

//	%f_shift_intend(1)\
//	[\
//	\n#\
//	<{\n#}OVERRIDE %f_out_MDA_op(%O,%S)>\
//	]\
//	%f_shift_intend(-1)\

//	\n#; // %f_out_name_comment_prim(%S)\
 #13#10
 out_indent '; // '
 [%f] out_name_comment_prim %( %S )% 

//	[{%f_is_MDA_elem(%S)=true&%f_is_MDA_inner(%S)!=true}\
 %IF ( ( [%f] is_MDA_elem %( %S )% ) %==  true %&& 
   ( ( [%f] is_MDA_inner %( %S )% ) %!=  true  ) ) 

//	[{%f_is_MDA_elem(%S)=true&%f_is_MDA_stereo(%S)!=true&%f_is_MDA_inner(%S)!=true}\

//	[{%SS!=MDAUtilityPack}\

// - с этим будем разбираться отдельно - надо ли экспортировать в основной словарь MDAUtilityPack

//   а также каким именно образом это делать, и зачем они вообще нужны (подозреваю, чтобы вызывать их функции)

//   и вообще эту проверку можно вставить в реализацию слова [EXPORT]

//   Пользуйтесь своими собственными шаблонами :-)
//	\n#\
  #13#10
  out_indent 
//	\[EXPORT\] %f_mangle_link_name(%S)\
  '[EXPORT] '
  [%f] mangle_link_name %( %S )% 
//	]\
//	]
 %END-IF

//#UC END# *4F368B80039Efor49F99EB100B2*
; // dump_to_FORTH


// реализация абстрактного стереотипа Документация::MDAGenerator
// Хак для [$281531116]
//+ link_to_requests_hack
implementation @ <<Project>>
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor49F99EB100B2*
//#UC END# *4E65F581015Afor49F99EB100B2*
; // link_to_requests_hack


// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for49F99EB100B2*
//C conf:/[{"%S{space name}"!=""}{%SN}%S{space name}],key:%S{space key},guid:%SU/Home/%S%f_wiki_ProjectPageName():%SU
//O %S%f_wiki_ProjectPageName()
//	%f_wiki_header(%S)
 [%f] wiki_header %( %S )% 
//	[h2. Модель[
 %IF-NOT-EMPTY
  'h2. Модель'
  %IF-NOT-EMPTY

//	

//	{info}Используемые другие проекты:
   '{info}Используемые другие проекты:'
//	<* [{"%D{space key}"!=""}{[{"%D{space name}"!=""}{%DN}%D{space name}]}\[[{"%D{space name}"!=""}{%DN}%D{space name}]|%D{space key}:Home\]]
   %FOR '* '
    %IF ( ( %D get_up ( 'space key' ) ) %!= '' ) 
     %ELSE
      %IF ( ( %D get_up ( 'space name' ) ) %!= '' ) 
       %ELSE
        %D |N 
       %THEN
       %D get_up ( 'space name' ) 
      %END-IF
     %THEN
     '['
     %IF ( ( %D get_up ( 'space name' ) ) %!= '' ) 
      %ELSE
       %D |N 
      %THEN
      %D get_up ( 'space name' ) 
     %END-IF
     '|'
     %D get_up ( 'space key' ) ':Home]' 
    %END-IF
//	>{info}][
   %END-FOR
   '{info}' 
  %END-IF
  %IF-NOT-EMPTY

//	

//	{note}Дополнительные свойства:
   '{note}Дополнительные свойства:'
//	%S#f_wiki_up_print(){note}][{%mx=true&%Cx=true}
   %S %?f wiki_up_print %( )% '{note}' 
  %END-IF
  %IF ( ( %m |x ) %==  true %&& 
    ( ( %C |x ) %==  true  ) ) 

//	

//	<{----\n}_[{%mN!=Main}{Основная}%mN] диаграмма проекта:_
   %FOR %ITEM-SEPARATOR '----'#13#10 ; // %ITEM-SEPARATOR 
    '_'
    %IF ( ( %m |N ) %!= 'Main' ) 
     %ELSE
      'Основная' 
     %THEN
     %m |N 
    %END-IF
    ' диаграмма проекта:_'
//	%f_dump_diagram(m){ShowDiagram:%mU.jpg}
    [%f] dump_diagram %( 'm' )% '{ShowDiagram:'
    %m |U '.jpg}'
//	>]][
   %END-FOR
  %END-IF
 %END-IF
 %IF-NOT-EMPTY

//	

//	h2. Состав проекта[
  'h2. Состав проекта'
  %IF-NOT-EMPTY

//	

//	_Требования:_<{}{%CS=Requirements}
   '_Требования:_'
   %FOR %ITEM-CONDITION ( ( %C |S ) %== 'Requirements' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Модули:_<{}{%CS!=Requirements&%CS!=MDATemplates&%t_target_ex(%C)=false}
   '_Модули:_'
   %FOR %ITEM-CONDITION ( ( %C |S ) %!= 'Requirements' %&& 
     ( ( %C |S ) %!= 'MDATemplates'  ) %&& 
     ( ( [%t] target_ex %( %C )% ) %==  false  ) ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Компилируемые цели и инсталляторы:_<{}{%t_target_ex(%C)=true}
   '_Компилируемые цели и инсталляторы:_'
   %FOR %ITEM-CONDITION ( ( [%t] target_ex %( %C )% ) %==  true ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Модель шаблонов:_<{}{%CS=MDATemplates}
   '_Модель шаблонов:_'
   %FOR %ITEM-CONDITION ( ( %C |S ) %== 'MDATemplates' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>]]<%CX>
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
 %END-IF
 %FOR %C |X 
 %END-FOR
//	%f_wiki_footer(%S)
 [%f] wiki_footer %( %S )% 
//#UC END# *46E6D4BB0339for49F99EB100B2*
; // wiki



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Project>>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Library/MPCSupport.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAUtilityPack::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Library::MPCSupport
//
// набор вспомагательных функций для генерации mpc/mwc
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// дампит зависимости от библиотек
//f _mpc_lib_dep
: mpc_lib_dep OBJECT IN %S
//#UC START# *470372D303D8*
//	<{\n\t}{%De=false&%DS!=Requirements|"%D{native name}"!=""&%DS!=Requirements}after += [{%De=false}{%D{native name}}%DN[{"%DM"="ServerLibrary::Category"}_cs]]
 %FOR %ITEM-SEPARATOR #13#10#9 ; // %ITEM-SEPARATOR 
  %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D |S ) %!= 'Requirements'  ) %|| 
   ( ( %D get_up ( 'native name' ) ) %!= ''  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  'after += '
  %IF ( ( %D |e ) %==  false ) 
   %ELSE
    %D get_up ( 'native name' ) 
   %THEN
   %D |N %IF ( ( %D |M ) %== 'ServerLibrary::Category' ) 
    '_cs' 
   %END-IF
  %END-IF
//		libs  += [{%De=false}{%D{native name}}%DN[{"%DM"="ServerLibrary::Category"}_cs]]
  '	libs  += '
  %IF ( ( %D |e ) %==  false ) 
   %ELSE
    %D get_up ( 'native name' ) 
   %THEN
   %D |N %IF ( ( %D |M ) %== 'ServerLibrary::Category' ) 
    '_cs' 
   %END-IF
  %END-IF
//	[{%DS=ServerLibrary&%t_target(%S)=true}
  %IF ( ( %D |S ) %== 'ServerLibrary' %&& 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 

//		after += %DN
   '	after += '
   %D |N 
//		libs  += %DN
   '	libs  += '
   %D |N 
//	]>
  %END-IF
 %END-FOR
//#UC END# *470372D303D8*
; // mpc_lib_dep


// дампит код mpc файла библиотеки
//f _library_mpc_base
: library_mpc_base OBJECT IN %S
//#UC START# *47037358005D*
//	%f_set_var(MPC_BASE,S)\
 [%f] set_var %( 'MPC_BASE' %, 'S' )% 
//		includes += %f_root_relative_path(%S)
 '	includes += '
 [%f] root_relative_path %( %S )% 
//	[{%S{need UC}=true}
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 

//		%U[{_CUSTOM_DEPENDENCES}
  '	'
  %U%IF ( '_CUSTOM_DEPENDENCES' ) 

//		]]
   '	' 
  %END-IF
  %END-IF
//	[{"<{}{%DS!=Requirements}{%DC}>"!="0"}[	%f_mpc_lib_dep(%S)]]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %D |S ) %!= 'Requirements' ) 
   ( %D |C ) 
  %END-FOR
  %!= 0 ) 
  %IF-NOT-EMPTY
   '	'
   [%f] mpc_lib_dep %( %S )% 
  %END-IF
 %END-IF
//	[<{}{%C<{}{%AM=Grammar::Class}{%AC}>!=0}{%CSn}\
 %IF-NOT-EMPTY
  %FOR %ITEM-CONDITION ( ( %C
   %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Grammar::Class' ) 
    ( %A |C ) 
   %END-FOR
 )    %!= 0 ) 
   ( %C |S 'n' ) 
//		Grammar_Files (%CN) {
   '	Grammar_Files ('
   %C |N ') {'
//	%C<{}{}{%ASn}[{"%f_normolized_path(g.cpp,A)"!=""}\
   %C
   %FOR ( %A |S 'n' ) 
    %IF ( ( [%f] normolized_path %( 'g.cpp' %, 'A' )% ) %!= '' ) 
//			gflags += -o %f_normolized_dir(g.cpp,A)%f_set_var(PATH,"%f_str_replace(%f_normolized_path(g.cpp,A),.cpp.g,)")
     '		gflags += -o '
     [%f] normolized_dir %( 'g.cpp' %, 'A' )% [%f] set_var %( 'PATH' %, [%f] str_replace %( [%f] normolized_path %( 'g.cpp' %, 'A' )% %, '.cpp.g' %, )% )% 
//			%f_normolized_path(g.cpp,A) \>\> %{PATH}NLexer.hpp %{PATH}NLexer.cpp %{PATH}NParser.hpp %{PATH}NParser.cpp
     '		'
     [%f] normolized_path %( 'g.cpp' %, 'A' )% ' >> '
     ( get_global_var ( 'PATH' ) |N ) 'Lexer.hpp '
     ( get_global_var ( 'PATH' ) |N ) 'Lexer.cpp '
     ( get_global_var ( 'PATH' ) |N ) 'Parser.hpp '
     ( get_global_var ( 'PATH' ) |N ) 'Parser.cpp'
//	]>
    %END-IF
   %END-FOR
 //		}
   '	}'
//	>]	Header_Files {
  %END-FOR
 %END-IF
 '	Header_Files {'
//			Std_Headers {
 '		Std_Headers {'
//			[	%f_normolized_path(fctr.h,S)
 '		'
 %IF-NOT-EMPTY
  '	'
  [%f] normolized_path %( 'fctr.h' %, 'S' )% 
//			][	%f_normolized_path(h,S)
  '		' 
 %END-IF
 %IF-NOT-EMPTY
  '	'
  [%f] normolized_path %( 'h' %, 'S' )% 
//			]<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(h,C)
  '		' 
 %END-IF
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= 'Category' ) 
  ( 'Sn' ) 
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'h' %, 'C' )% 
//			][	%f_normolized_path(fctr.h,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'fctr.h' %, 'C' )% 
//			]>}
   '		' 
  %END-IF
 %END-FOR
 '}'
//		<{}{"%CC"="Category"}{Sn}
 '	'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Category' ) 
  ( 'Sn' ) 

//			%CN {
  '		'
  %C |N ' {'
//			[	%f_normolized_path(h,C)
  '		'
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'h' %, 'C' )% 
//			][	%f_normolized_path(fctr.h,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'fctr.h' %, 'C' )% 
//			][	%f_normolized_path(p.h,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'p.h' %, 'C' )% 
//			]%C<{}{}{%ASn}[	%f_normolized_path(h,A)
   '		' 
  %END-IF
  %C
  %FOR ( %A |S 'n' ) 
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'h' %, 'A' )% 
//			][	%f_normolized_path(fctr.h,A)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'fctr.h' %, 'A' )% 
//			][	%f_normolized_path(p.h,A)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'p.h' %, 'A' )% 
//			][	%f_str_replace(%f_str_replace(%f_normolized_path(g.cpp,A),.cpp.g,.hpp),%AN.,%ANParser.)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] str_replace %( [%f] str_replace %( [%f] normolized_path %( 'g.cpp' %, 'A' )% %, '.cpp.g' %, '.hpp' )% %, %A |N '.' %, %A |N 'Parser.' )% 
//				%f_str_replace(%f_str_replace(%f_normolized_path(g.cpp,A),.cpp.g,.hpp),%AN.,%ANLexer.)
    '			'
    [%f] str_replace %( [%f] str_replace %( [%f] normolized_path %( 'g.cpp' %, 'A' )% %, '.cpp.g' %, '.hpp' )% %, %A |N '.' %, %A |N 'Lexer.' )% 
//			]>}
    '		' 
   %END-IF
  %END-FOR
   '}'
//		>[%{MPC_BASE}%f_specific_h_files_list()
  '	' 
 %END-FOR
 %IF-NOT-EMPTY
  ( get_global_var ( 'MPC_BASE' ) %f specific_h_files_list %( )% ) 
//		]}
  '	' 
 %END-IF
 '}'
//	
//		Inline_Files {
 '	Inline_Files {'
//			Std_Inlines {
 '		Std_Inlines {'
//			<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(i.h,C)
 '		'
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= 'Category' ) 
  ( 'Sn' ) 
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'i.h' %, 'C' )% 
//			]>}
   '		' 
  %END-IF
 %END-FOR
 '}'
//		<{}{%CC=Category&%CS!=ServerInterface}{Sn}
 '	'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Category' %&& 
   ( ( %C |S ) %!= 'ServerInterface'  ) ) 
  ( 'Sn' ) 

//			%CN {
  '		'
  %C |N ' {'
//			[	%f_normolized_path(i.h,C)
  '		'
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'i.h' %, 'C' )% 
//			]%C<{}{}{%ASn}[	%f_normolized_path(i.h,A)
   '		' 
  %END-IF
  %C
  %FOR ( %A |S 'n' ) 
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'i.h' %, 'A' )% 
//			]>}
    '		' 
   %END-IF
  %END-FOR
   '}'
//		>}
  '	' 
 %END-FOR
 '}'
//	
//		Source_Files {
 '	Source_Files {'
//			Std_Sources {
 '		Std_Sources {'
//			[	%f_normolized_path(fctr.cpp,S)
 '		'
 %IF-NOT-EMPTY
  '	'
  [%f] normolized_path %( 'fctr.cpp' %, 'S' )% 
//			][	%f_normolized_path(cpp,S)
  '		' 
 %END-IF
 %IF-NOT-EMPTY
  '	'
  [%f] normolized_path %( 'cpp' %, 'S' )% 
//			][	%f_normolized_path(p.cpp,S)
  '		' 
 %END-IF
 %IF-NOT-EMPTY
  '	'
  [%f] normolized_path %( 'p.cpp' %, 'S' )% 
//			]<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(cpp,C)
  '		' 
 %END-IF
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= 'Category' ) 
  ( 'Sn' ) 
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'cpp' %, 'C' )% 
//			][	%f_normolized_path(fctr.cpp,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'fctr.cpp' %, 'C' )% 
//			][	%f_normolized_path(p.cpp,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'p.cpp' %, 'C' )% 
//			]>}
   '		' 
  %END-IF
 %END-FOR
 '}'
//		<{}{"%CC"="Category"}{Sn}
 '	'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Category' ) 
  ( 'Sn' ) 

//			%CN {
  '		'
  %C |N ' {'
//			[	%f_normolized_path(cpp,C)
  '		'
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'cpp' %, 'C' )% 
//			][	%f_normolized_path(p.cpp,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'p.cpp' %, 'C' )% 
//			][	%f_normolized_path(fctr.cpp,C)
   '		' 
  %END-IF
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'fctr.cpp' %, 'C' )% 
//			]%C<{}{}{%ASn}[	%f_normolized_path(cpp,A)
   '		' 
  %END-IF
  %C
  %FOR ( %A |S 'n' ) 
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'cpp' %, 'A' )% 
//			][	%f_normolized_path(fctr.cpp,A)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'fctr.cpp' %, 'A' )% 
//			][	%f_normolized_path(p.cpp,A)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'p.cpp' %, 'A' )% 
//			][	%f_str_replace(%f_str_replace(%f_normolized_path(g.cpp,A),.cpp.g,.cpp),%AN.,%ANParser.)
    '		' 
   %END-IF
   %IF-NOT-EMPTY
    '	'
    [%f] str_replace %( [%f] str_replace %( [%f] normolized_path %( 'g.cpp' %, 'A' )% %, '.cpp.g' %, '.cpp' )% %, %A |N '.' %, %A |N 'Parser.' )% 
//				%f_str_replace(%f_str_replace(%f_normolized_path(g.cpp,A),.cpp.g,.cpp),%AN.,%ANLexer.)
    '			'
    [%f] str_replace %( [%f] str_replace %( [%f] normolized_path %( 'g.cpp' %, 'A' )% %, '.cpp.g' %, '.cpp' )% %, %A |N '.' %, %A |N 'Lexer.' )% 
//			]>}
    '		' 
   %END-IF
  %END-FOR
   '}'
//		>[%{MPC_BASE}%f_specific_cpp_files_list()
  '	' 
 %END-FOR
 %IF-NOT-EMPTY
  ( get_global_var ( 'MPC_BASE' ) %f specific_cpp_files_list %( )% ) 
//		]}[{"<{}{%CM=ComInterfaces::Category}{C}>"!="0"}
  '	' 
 %END-IF
 '}'
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C |M ) %== 'ComInterfaces::Category' ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 

//		
  '	'
//		<{}{}{%CSn}%f_set_var(ODL_PATH,"%f_normolized_path(odl,C)")ODL_Files (%CN) {
  '	'
  %FOR ( %C |S 'n' ) 
   [%f] set_var %( 'ODL_PATH' %, [%f] normolized_path %( 'odl' %, 'C' )% )% 'ODL_Files ('
   %C |N ') {'
//			[%f_normolized_path(odl,C)
   '		'
   %IF-NOT-EMPTY
    [%f] normolized_path %( 'odl' %, 'C' )% 
//			]
    '		' 
   %END-IF
//		}
   '	}'
//		>]
   '	' 
  %END-FOR
 %END-IF
//#UC END# *47037358005D*
; // library_mpc_base


// генерим include ко всем LibHome библиотек от которых зависим (рекурсивно)
//f _inc_all_dep
: inc_all_dep OBJECT IN %S
//#UC START# *470387C0004E*
//	<{}{%De=false&%D{old gcm}!=true&%DS!=Requirements}\#include "%f_delsubstr_from_begin(%Dd,1)/LibHome.h"
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D get_up ( 'old gcm' ) ) %!=  true  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  '#include "'
  [%f] delsubstr_from_begin %( %D |d %, 1 )% '/LibHome.h"'
//	[{%DS=ServerLibrary&%t_target(%S)=true}\#include "%f_delsubstr_from_begin(%Dd,1)/ServerLibHome.h"
  %IF ( ( %D |S ) %== 'ServerLibrary' %&& 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   '#include "'
   [%f] delsubstr_from_begin %( %D |d %, 1 )% '/ServerLibHome.h"'
//	][{%DS!=ServerLibrary|%t_target(%S)=true}%f_inc_all_dep(%D)]>
  %END-IF
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] inc_all_dep %( %D )% 
  %END-IF
 %END-FOR
//#UC END# *470387C0004E*
; // inc_all_dep


// генерим код регистрации  всех LibHome библиотек от которых зависим (рекурсивно)
//f _reg_all_dep
: reg_all_dep OBJECT IN %S
//#UC START# *470387F903C8*
//	%f_clear_list(REG_ALL_DEP)\
 [%f] clear_list %( 'REG_ALL_DEP' )% 
//	%f_clear_list(REG_ALL_DEP_SERVER)\
 [%f] clear_list %( 'REG_ALL_DEP_SERVER' )% 
//	%f_reg_all_dep_i(%S)\
 [%f] reg_all_dep_i %( %S )% 
//	%f_sort_list(REG_ALL_DEP,u)\
 [%f] sort_list %( 'REG_ALL_DEP' %, 'u' )% 
//	<{}{%f_is_empty(REG_ALL_DEP)=false}{W}%f_pop_first_to_var(REG_ALL_DEP,CYCLE_ITEM)\
 %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'REG_ALL_DEP' )% ) %==  false ) 
  ( 'W' ) 
  [%f] pop_first_to_var %( 'REG_ALL_DEP' %, 'CYCLE_ITEM' )% 
//	[	%{CYCLE_ITEM}%f_open_ifdef()
  %IF-NOT-EMPTY
   '	'
   ( get_global_var ( 'CYCLE_ITEM' ) %f open_ifdef %( )% ) 
//	]		lhm.registrate_lib_home (&%{CYCLE_ITEM}N::LibHomeFactory::get ());[{%f_exists_in_list(REG_ALL_DEP_SERVER,{CYCLE_ITEM})=true}
  %END-IF
  '		lhm.registrate_lib_home (&'
  ( get_global_var ( 'CYCLE_ITEM' ) |N ) '::LibHomeFactory::get ());'
  %IF ( ( [%f] exists_in_list %( 'REG_ALL_DEP_SERVER' %, '{CYCLE_ITEM}' )% ) %==  true ) 

//			lhm.registrate_lib_home (&%{CYCLE_ITEM}N::ServerLibHomeFactory::get ());][
   '		lhm.registrate_lib_home (&'
   ( get_global_var ( 'CYCLE_ITEM' ) |N ) '::ServerLibHomeFactory::get ());' 
  %END-IF
  %IF-NOT-EMPTY

//		%{CYCLE_ITEM}%f_close_ifdef()]
   '	'
   ( get_global_var ( 'CYCLE_ITEM' ) %f close_ifdef %( )% ) 
  %END-IF
//	]>%f_clear_list(REG_ALL_DEP)%f_clear_list(REG_ALL_DEP_SERVER)
  ']' 
 %END-FOR
 [%f] clear_list %( 'REG_ALL_DEP' )% [%f] clear_list %( 'REG_ALL_DEP_SERVER' )% 

//f _reg_all_dep_i
; // reg_all_dep

: reg_all_dep_i OBJECT IN %S
//	<{}{%De=false&%D{old gcm}!=true&%DS!=Requirements}[{%f_exists_in_list(REG_ALL_DEP,D)=false}%f_add_to_list(REG_ALL_DEP,D)]\
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D get_up ( 'old gcm' ) ) %!=  true  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  %IF ( ( [%f] exists_in_list %( 'REG_ALL_DEP' %, 'D' )% ) %==  false ) 
   [%f] add_to_list %( 'REG_ALL_DEP' %, 'D' )% 
  %END-IF
//	[{%DS=ServerLibrary&%t_target(%S)=true}[{%f_exists_in_list(REG_ALL_DEP_SERVER,D)=false}%f_add_to_list(REG_ALL_DEP_SERVER,D)]\
  %IF ( ( %D |S ) %== 'ServerLibrary' %&& 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   %IF ( ( [%f] exists_in_list %( 'REG_ALL_DEP_SERVER' %, 'D' )% ) %==  false ) 
    [%f] add_to_list %( 'REG_ALL_DEP_SERVER' %, 'D' )% 
   %END-IF
//	][{%DS!=ServerLibrary|%t_target(%S)=true}%f_reg_all_dep_i(%D)]>
  %END-IF
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] reg_all_dep_i %( %D )% 
  %END-IF
 %END-FOR
//#UC END# *470387F903C8*
; // reg_all_dep_i


// генерим дополнительные команды includes к бибилиотекам
//f _mpc_all_includes
: mpc_all_includes OBJECT IN %S
//#UC START# *47038820034B*
//	%f_clear_list(MPC_INLUDES)\
 [%f] clear_list %( 'MPC_INLUDES' )% 
//	%f_collect_mpc_all_includes(%S)\
 [%f] collect_mpc_all_includes %( %S )% 
//	%f_sort_list(MPC_INLUDES,n)\
 [%f] sort_list %( 'MPC_INLUDES' %, 'n' )% 
//	%f_unique_list(MPC_INLUDES)\
 [%f] unique_list %( 'MPC_INLUDES' )% 
//	<{}{%f_is_empty(MPC_INLUDES)=false}{W}%f_pop_first_to_var(MPC_INLUDES,_INC_)[	includes += %{_INC_}N
 %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'MPC_INLUDES' )% ) %==  false ) 
  ( 'W' ) 
  [%f] pop_first_to_var %( 'MPC_INLUDES' %, '_INC_' )% %IF-NOT-EMPTY
   '	includes += '
   ( get_global_var ( '_INC_' ) |N ) 
//	]>%f_clear_list(MPC_INLUDES)
  %END-IF
 %END-FOR
 [%f] clear_list %( 'MPC_INLUDES' )% 

//f _collect_mpc_all_includes
; // mpc_all_includes

: collect_mpc_all_includes OBJECT IN %S
//	<{}{%De=false&%DS!=Requirements|"%D{native includes path}"!=""&%DS!=Requirements}[{%De=true}%f_add_to_list(MPC_INLUDES,"%D{native includes path}")][{%DS!=ServerLibrary|%t_target(%S)=true}%f_collect_mpc_all_includes(%D,"zzz")]>
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D |S ) %!= 'Requirements'  ) %|| 
   ( ( %D get_up ( 'native includes path' ) ) %!= ''  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  %IF ( ( %D |e ) %==  true ) 
   [%f] add_to_list %( 'MPC_INLUDES' %, %D get_up ( 'native includes path' ) )% 
  %END-IF
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] collect_mpc_all_includes %( %D %, 'zzz' )% 
  %END-IF
 %END-FOR
//#UC END# *47038820034B*
; // collect_mpc_all_includes


// генерим дополнительные путь к бибилиотекам (libpaths)
//f _mpc_all_libpaths
: mpc_all_libpaths OBJECT IN %S
//#UC START# *4703882D008C*
//	%f_clear_list(MPC_LIBPATH)\
 [%f] clear_list %( 'MPC_LIBPATH' )% 
//	%f_collect_mpc_all_libpaths(%S)\
 [%f] collect_mpc_all_libpaths %( %S )% 
//	%f_sort_list(MPC_LIBPATH,n)\
 [%f] sort_list %( 'MPC_LIBPATH' %, 'n' )% 
//	%f_unique_list(MPC_LIBPATH)\
 [%f] unique_list %( 'MPC_LIBPATH' )% 
//	<{}{%f_is_empty(MPC_LIBPATH)=false}{W}%f_pop_first_to_var(MPC_LIBPATH,_LIBPATH_)[	libpaths += %{_LIBPATH_}N
 %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'MPC_LIBPATH' )% ) %==  false ) 
  ( 'W' ) 
  [%f] pop_first_to_var %( 'MPC_LIBPATH' %, '_LIBPATH_' )% %IF-NOT-EMPTY
   '	libpaths += '
   ( get_global_var ( '_LIBPATH_' ) |N ) 
//	]>%f_clear_list(MPC_LIBPATH)
  %END-IF
 %END-FOR
 [%f] clear_list %( 'MPC_LIBPATH' )% 

//f _collect_mpc_all_libpaths
; // mpc_all_libpaths

: collect_mpc_all_libpaths OBJECT IN %S
//	<{}{%De=false&%DS!=Requirements|"%D{native lib path}"!=""&%DS!=Requirements}[{%De=true}%f_add_to_list(MPC_LIBPATH,"%D{native lib path}")][{%DS!=ServerLibrary|%t_target(%S)=true}%f_collect_mpc_all_libpaths(%D,"zzz")]>
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D |S ) %!= 'Requirements'  ) %|| 
   ( ( %D get_up ( 'native lib path' ) ) %!= ''  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  %IF ( ( %D |e ) %==  true ) 
   [%f] add_to_list %( 'MPC_LIBPATH' %, %D get_up ( 'native lib path' ) )% 
  %END-IF
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] collect_mpc_all_libpaths %( %D %, 'zzz' )% 
  %END-IF
 %END-FOR
//#UC END# *4703882D008C*
; // collect_mpc_all_libpaths


// генерим зависимости от всех библиотек, от которых зависим (рекурсивно)
//f _mpc_all_dep
: mpc_all_dep OBJECT IN %S
//#UC START# *47038859005D*
//	<{}{%De=false&%DS!=Requirements|"%D{native name}"!=""&%DS!=Requirements}	after += [{%De=false}{%D{native name}}%DN[{"%DM"="ServerLibrary::Category"}_cs]]
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D |S ) %!= 'Requirements'  ) %|| 
   ( ( %D get_up ( 'native name' ) ) %!= ''  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  '	after += '
  %IF ( ( %D |e ) %==  false ) 
   %ELSE
    %D get_up ( 'native name' ) 
   %THEN
   %D |N %IF ( ( %D |M ) %== 'ServerLibrary::Category' ) 
    '_cs' 
   %END-IF
  %END-IF
//		libs  += [{%De=false}{%D{native name}}%DN[{"%DM"="ServerLibrary::Category"}_cs]][
  '	libs  += '
  %IF ( ( %D |e ) %==  false ) 
   %ELSE
    %D get_up ( 'native name' ) 
   %THEN
   %D |N %IF ( ( %D |M ) %== 'ServerLibrary::Category' ) 
    '_cs' 
   %END-IF
  %END-IF
  %IF-NOT-EMPTY

//		lit_libs += %D{lit_libs}]
   '	lit_libs += '
   %D get_up ( 'lit_libs' ) 
  %END-IF
//	[{%DS=ServerLibrary&%t_target(%S)=true}	after += %DN
  %IF ( ( %D |S ) %== 'ServerLibrary' %&& 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   '	after += '
   %D |N 
//		libs  += %DN[
   '	libs  += '
   %D |N %IF-NOT-EMPTY

//		lit_libs += %D{lit_libs}]
    '	lit_libs += '
    %D get_up ( 'lit_libs' ) 
   %END-IF
//	][{%DS!=ServerLibrary|%t_target(%S)=true}%f_mpc_all_dep(%D,"zzz")]>
  %END-IF
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] mpc_all_dep %( %D %, 'zzz' )% 
  %END-IF
 %END-FOR

//нужно ли линковаться с библиотекой ANTLR
//f _mpc_need_antrl_proj
; // mpc_all_dep

: mpc_need_antrl_proj OBJECT IN %S
//	[{"%f_mpc_need_antrl_proj_impl(%S)"!=""}{false}true]
 %IF ( ( [%f] mpc_need_antrl_proj_impl %( %S )% ) %!= '' ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF

//f _mpc_need_antrl_proj_impl
; // mpc_need_antrl_proj

: mpc_need_antrl_proj_impl OBJECT IN %S
//	<{}{%De=false&%DS!=Requirements|"%D{native name}"!=""&%DS!=Requirements}[{"%DM"!="ServerLibrary::Category"}[{%D<{}{%AM=Grammar::Class}{%AC}>!=0}.]]\
 %FOR %ITEM-CONDITION ( ( %D |e ) %==  false %&& 
   ( ( %D |S ) %!= 'Requirements'  ) %|| 
   ( ( %D get_up ( 'native name' ) ) %!= ''  ) %&& 
   ( ( %D |S ) %!= 'Requirements'  ) ) 
  %IF ( ( %D |M ) %!= 'ServerLibrary::Category' ) 
   %IF ( ( %D
    %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Grammar::Class' ) 
     ( %A |C ) 
    %END-FOR
 )     %!= 0 ) 
    '.' 
   %END-IF
  %END-IF
//	[{"%DM"="ServerLibrary::Category"&%t_target(%S)=true}[{%D<{}{%AM=Grammar::Class}{%AC}>!=0}.]]\
  %IF ( ( %D |M ) %== 'ServerLibrary::Category' %&& 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   %IF ( ( %D
    %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Grammar::Class' ) 
     ( %A |C ) 
    %END-FOR
 )     %!= 0 ) 
    '.' 
   %END-IF
  %END-IF
//	[{%DS!=ServerLibrary|%t_target(%S)=true}%f_mpc_need_antrl_proj_impl(%D,"zzz")]>
  %IF ( ( %D |S ) %!= 'ServerLibrary' %|| 
    ( ( [%t] target %( %S )% ) %==  true  ) ) 
   [%f] mpc_need_antrl_proj_impl %( %D %, 'zzz' )% 
  %END-IF
 %END-FOR
//#UC END# *47038859005D*
; // mpc_need_antrl_proj_impl


// определяет содержат ли пакеты, ото которых зависит (рекурсивно) Self элементы со стереотип
// Views, озвращает true, или false
//f _contain_views
: contain_views OBJECT IN %S
//#UC START# *47046BEC03A9*
//	[{"<%d<{}{%AS=Views}{C}>>"!="0"}{false}true]
 %IF ( 
  %FOR %d
   %FOR %ITEM-CONDITION ( ( %A |S ) %== 'Views' ) 
    ( 'C' ) 
   %END-FOR
   %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *47046BEC03A9*
; // contain_views


// нужно ли генерить в mpc-шник список idl-ей
//f _need_mpc_idl
: need_mpc_idl OBJECT IN %S
//#UC START# *471604E5008C*
//	[{%SM=ServerInterfaces::Category|%SM=Impl::Category}{false}[{%S%f_need_idl()=true}{false}true]]
 %IF ( ( %S |M ) %== 'ServerInterfaces::Category' %|| 
   ( ( %S |M ) %== 'Impl::Category'  ) ) 
  %ELSE
    false 
  %THEN
  %IF ( ( %S %f need_idl %( )% ) %==  true ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
 %END-IF
//#UC END# *471604E5008C*
; // need_mpc_idl


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

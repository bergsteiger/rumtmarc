////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Library/Library.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Library::Library
//
// Библиотека
// ---
// Определяет элемент линковки, содержащий все вложенные типы и интерфесы (разбитые на юниты) и их
// закрытую реализацию
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Library::Category
implementation @ <<Library>>
//? Библиотека
//? Определяет элемент линковки, содержащий все вложенные типы и интерфесы (разбитые на юниты) и их закрытую реализацию
//> LibSupport::Category
//> Views::Category
//> Impl::Category
//> ComInterfaces::Category
//> Interfaces::Category
//> Unit::Category

//= LibraryGenerator::MDAGenerator
//= ModelSerialize::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_library.gif
//L code_library
//D
// - запрещена форвард-декларация
// Параметры визуализации
//$ C 170,225,245
//$ l 10,100,195
//$ f 10,100,195

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода
//p gui=tie|rtl|gui|prj ? Тип библиотеки --- tie - библиотека с реализацией на C++, используемая в Delphi rtl - утилитная библиотека gui - библиотека представления prj - библиотека специфичная для проекта
//p native name:s ? определяет MPC-имя для внешней (native) библиотеки
//p native lib path:s ? определяет путь где находится внешняя (native) библиотека
//p native includes path:s ? определяет путь где находится нужно искать дополнительные файлы внешней (native) библиотеки
//p exec mode=concluded|idle ? определяет режим исполнения Дома билиотеки. Concluded - дом завершится когда завершаться все исполнители. Idle - дом перейдет в сосотояние ожидания.
//p vendor:s=/Garant ? определяет префикс разработчика
//p defines:s ? определяет файл с условиями компиляции
//p is namespace:b=true ? определяет является ли модуль неймспейсом

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансформаторы стереотипа

// нужно ли запускать выполенение LibHome
//%t _need_to_execute
<<transformator>> need_to_execute OBJECT IN %S
//#UC START# *47037023006Dfor470361CD0148*
//c                          {}
//r {server/stand alone}:    {true}
//r {both}:                  {true}
//r {""=""}:                 {false}
//#UC END# *47037023006Dfor470361CD0148*
; // need_to_execute



// нужно ли регистрировать LibHome
//%t _need_to_reg
<<transformator>> need_to_reg OBJECT IN %S
//#UC START# *4703704402DEfor470361CD0148*
//c           {}
//r {""=""}:  {true}
//#UC END# *4703704402DEfor470361CD0148*
; // need_to_reg


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
 ?inherited
 %IF ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) 
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '* - явно включает генерацию дополнительных секций Юзер-Кода'
//	][{"%S{gui}"!="%S{!gui}"}%f_up_prefix(%S) *gui* = *%S{gui}* - Тип библиотеки --- tie - библиотека с реализацией на C++, используемая в Delphi rtl - утилитная библиотека gui - библиотека представления prj - библиотека специфичная для проекта
 %END-IF
 %IF ( ( %S get_up ( 'gui' ) ) %!= ( %S get_up_def ( 'gui' ) ) ) 
  [%f] up_prefix %( %S )% ' *gui* = *'
  %S get_up ( 'gui' ) '* - Тип библиотеки --- tie - библиотека с реализацией на C++, используемая в Delphi rtl - утилитная библиотека gui - библиотека представления prj - библиотека специфичная для проекта'
//	][{"%S{native name}"!="%S{!native name}"}%f_up_prefix(%S) *native name* = *%S{native name}* - определяет MPC-имя для внешней (native) библиотеки
 %END-IF
 %IF ( ( %S get_up ( 'native name' ) ) %!= ( %S get_up_def ( 'native name' ) ) ) 
  [%f] up_prefix %( %S )% ' *native name* = *'
  %S get_up ( 'native name' ) '* - определяет MPC-имя для внешней (native) библиотеки'
//	][{"%S{native lib path}"!="%S{!native lib path}"}%f_up_prefix(%S) *native lib path* = *%S{native lib path}* - определяет путь где находится внешняя (native) библиотека
 %END-IF
 %IF ( ( %S get_up ( 'native lib path' ) ) %!= ( %S get_up_def ( 'native lib path' ) ) ) 
  [%f] up_prefix %( %S )% ' *native lib path* = *'
  %S get_up ( 'native lib path' ) '* - определяет путь где находится внешняя (native) библиотека'
//	][{"%S{native includes path}"!="%S{!native includes path}"}%f_up_prefix(%S) *native includes path* = *%S{native includes path}* - определяет путь где находится нужно искать дополнительные файлы внешней (native) библиотеки
 %END-IF
 %IF ( ( %S get_up ( 'native includes path' ) ) %!= ( %S get_up_def ( 'native includes path' ) ) ) 
  [%f] up_prefix %( %S )% ' *native includes path* = *'
  %S get_up ( 'native includes path' ) '* - определяет путь где находится нужно искать дополнительные файлы внешней (native) библиотеки'
//	][{"%S{exec mode}"!="%S{!exec mode}"}%f_up_prefix(%S) *exec mode* = *%S{exec mode}* - определяет режим исполнения Дома билиотеки. Concluded - дом завершится когда завершаться все исполнители. Idle - дом перейдет в сосотояние ожидания.
 %END-IF
 %IF ( ( %S get_up ( 'exec mode' ) ) %!= ( %S get_up_def ( 'exec mode' ) ) ) 
  [%f] up_prefix %( %S )% ' *exec mode* = *'
  %S get_up ( 'exec mode' ) '* - определяет режим исполнения Дома билиотеки. Concluded - дом завершится когда завершаться все исполнители. Idle - дом перейдет в сосотояние ожидания.'
//	][{"%S{vendor}"!="%S{!vendor}"}%f_up_prefix(%S) *vendor* = *%S{vendor}* - определяет префикс разработчика
 %END-IF
 %IF ( ( %S get_up ( 'vendor' ) ) %!= ( %S get_up_def ( 'vendor' ) ) ) 
  [%f] up_prefix %( %S )% ' *vendor* = *'
  %S get_up ( 'vendor' ) '* - определяет префикс разработчика'
//	][{"%S{defines}"!="%S{!defines}"}%f_up_prefix(%S) *defines* = *%S{defines}* - определяет файл с условиями компиляции
 %END-IF
 %IF ( ( %S get_up ( 'defines' ) ) %!= ( %S get_up_def ( 'defines' ) ) ) 
  [%f] up_prefix %( %S )% ' *defines* = *'
  %S get_up ( 'defines' ) '* - определяет файл с условиями компиляции'
//	][{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли модуль неймспейсом
 %END-IF
 %IF ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) 
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли модуль неймспейсом'
//	]
 %END-IF

// подключает заколовок LibHome
//%f _include_base_libhome
; // wiki_up_print

: include_base_libhome OBJECT IN %S
//#UC START# *47036D3D00ABfor470361CD0148*
//	[{%X{lid}=cpp}{import ru.garant.shared.Core.Root_i.StdLibHomeBase;}\#include "shared/Core/impl/Root_i/StdLibHomeBase.h"]
 %IF ( ( %X get_up ( 'lid' ) ) %== 'cpp' ) 
  %ELSE
   'import ru.garant.shared.Core.Root_i.StdLibHomeBase;' 
  %THEN
  '#include "shared/Core/impl/Root_i/StdLibHomeBase.h' 
 %END-IF
//#UC END# *47036D3D00ABfor470361CD0148*
; // include_base_libhome


// возвращает базовый класс LibHome, от которого должна наследоваться библиотека
//%f _base_libhome
: base_libhome OBJECT IN %S
//#UC START# *47036DD50128for470361CD0148*
//	[{%X{lid}=cpp}{extends ru.garant.shared.Core.Root_i.StdLibHomeBase}virtual public Core::Root_i::StdLibHomeBase]
 %IF ( ( %X get_up ( 'lid' ) ) %== 'cpp' ) 
  %ELSE
   'extends ru.garant.shared.Core.Root_i.StdLibHomeBase' 
  %THEN
  'virtual public Core::Root_i::StdLibHomeBase' 
 %END-IF
//#UC END# *47036DD50128for470361CD0148*
; // base_libhome


// возвращает namespace к LibHome
//%f _libhome
: libhome OBJECT IN %S
//#UC START# *47036E60006Dfor470361CD0148*
//	[{%X{lid}=cpp}{ru.garant.shared.Core.Root.LibHome}Core::Root::LibHome]
 %IF ( ( %X get_up ( 'lid' ) ) %== 'cpp' ) 
  %ELSE
   'ru.garant.shared.Core.Root.LibHome' 
  %THEN
  'Core::Root::LibHome' 
 %END-IF
//#UC END# *47036E60006Dfor470361CD0148*
; // libhome


// префикс перед именем LibHome
//%f _name_prefix
: name_prefix OBJECT IN %S
//#UC START# *47036F0403A9for470361CD0148*
//#UC END# *47036F0403A9for470361CD0148*
; // name_prefix


// дампит код реализации интерцепоторов
//%f _interceptor_cpp
: interceptor_cpp OBJECT IN %S
//#UC START# *47036F1D0280for470361CD0148*
//#UC END# *47036F1D0280for470361CD0148*
; // interceptor_cpp


// дампит код определения интерцепоторов
//%f _interceptor_h
: interceptor_h OBJECT IN %S
//#UC START# *47036F3A01B5for470361CD0148*
//#UC END# *47036F3A01B5for470361CD0148*
; // interceptor_h


// дампит код интерцепторов на java
//%f _interceptor_java
: interceptor_java OBJECT IN %S
//#UC START# *47036F9A03B9for470361CD0148*
//#UC END# *47036F9A03B9for470361CD0148*
; // interceptor_java


// дампит определение собственных методов LibHome
//%f _self_methods_h
: self_methods_h OBJECT IN %S
//#UC START# *47036FC002AFfor470361CD0148*
//#UC END# *47036FC002AFfor470361CD0148*
; // self_methods_h


// дампит реализацию собственных методов LibHome
//%f _self_methods_cpp
: self_methods_cpp OBJECT IN %S
//#UC START# *47036FDC0280for470361CD0148*
//#UC END# *47036FDC0280for470361CD0148*
; // self_methods_cpp


// дампит реализация собственных методов на java
//%f _self_methods_java
: self_methods_java OBJECT IN %S
//#UC START# *47036FED0128for470361CD0148*
//#UC END# *47036FED0128for470361CD0148*
; // self_methods_java


// дампит дополнительные инклюды
//%f _add_cpp_inc
: add_cpp_inc OBJECT IN %S
//#UC START# *470370AC0261for470361CD0148*
//	[{%XU=cpp|%XU=h}[<{}{%C#f_IsInterfaces()=true|%CS=ServerInterfaces}%C<{}{%CS=Settings}\#include "%f_with_gen_id(h,%CL)"
 %IF ( ( %X |U ) %== 'cpp' %|| 
   ( ( %X |U ) %== 'h'  ) ) 
  %IF-NOT-EMPTY
   %FOR %ITEM-CONDITION ( ( %C %?f IsInterfaces %( )% ) %==  true %|| 
     ( ( %C |S ) %== 'ServerInterfaces'  ) ) 
    %C
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'Settings' ) 
     '#include "'
     [%f] with_gen_id %( 'h' %, %C |L )% 
//	>>]]
    %END-FOR
    %END-FOR
  %END-IF
 %END-IF
//#UC END# *470370AC0261for470361CD0148*
; // add_cpp_inc


// дампит код установки метода запуска LibHome
//%f _set_exec_mode
: set_exec_mode OBJECT IN %S
//#UC START# *470370E200ABfor470361CD0148*
//	[{%S{exec mode}=idle}[{%X{lid}!=java}{			this.setRequestedStatus (ru.garant.shared.Core.Root.ExecutorStatus.ES_IDLE);}	this-\>requested_status (Core::Root::ES_IDLE);]
 %IF ( ( %S get_up ( 'exec mode' ) ) %== 'idle' ) 
  %IF ( ( %X get_up ( 'lid' ) ) %!= 'java' ) 
   %ELSE
    '			this.setRequestedStatus (ru.garant.shared.Core.Root.ExecutorStatus.ES_IDLE);' 
   %THEN
   '	this->requested_status (Core::Root::ES_IDLE);' 
  %END-IF
//	]
 %END-IF
//#UC END# *470370E200ABfor470361CD0148*
; // set_exec_mode


// генерация методов для работы с параметрами: вывод использования, проверка, что обязательные
// параметры заданы
//%f _params_methods_h
: params_methods_h OBJECT IN %S
//#UC START# *492A99DD0033for470361CD0148*
//		void print_usage () const;[{%f_need_check_params(%S)=true}
 '	void print_usage () const;'
 %IF ( ( [%f] need_check_params %( %S )% ) %==  true ) 

//		
  '	'
//		bool check_params () const;]
  '	bool check_params () const;' 
 %END-IF
//#UC END# *492A99DD0033for470361CD0148*
; // params_methods_h


// генерация методов для работы с параметрами: вывод использования, проверка, что обязательные
// параметры заданы
//%f _params_methods_cpp
: params_methods_cpp OBJECT IN %S
//#UC START# *492A9A2101AAfor470361CD0148*
//	void %S%f_name_prefix()LibHomeImpl::print_usage () const {
 'void '
 %S %f name_prefix %( )% 'LibHomeImpl::print_usage () const {'
//	<{}{"%AM"="Settings::Class"}{%A}[%A<{}{%CC=Attribute}{%C}[%C%f_print_usage()
 %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' ) 
  ( %A ) 
  %IF-NOT-EMPTY
   %A
   %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' ) 
    ( %C ) 
    %IF-NOT-EMPTY
     %C %f print_usage %( )% 
//	]>]>
    %END-IF
   %END-FOR
   %END-IF
 %END-FOR
//	}
 '}'
//	[{%f_need_check_params(%S)=true}
 %IF ( ( [%f] need_check_params %( %S )% ) %==  true ) 

//	bool %S%f_name_prefix()LibHomeImpl::check_params () const {
  'bool '
  %S %f name_prefix %( )% 'LibHomeImpl::check_params () const {'
//	%f_set_var(IS_FIRST,"true")\
  [%f] set_var %( 'IS_FIRST' %, true )% 
//	<{}{"%AM"="Settings::Class"}[%A<{}{%CC=Attribute}{%C}[\
  %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' ) 
   %IF-NOT-EMPTY
    %A
    %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' ) 
     ( %C ) 
     %IF-NOT-EMPTY
//		[{%{IS_FIRST}N=true}{res &}%f_set_var(IS_FIRST,"false")bool res ]= check_param\<%t_spec_check_param(%C)\> ("-%CN", [{%C{is_required}=true}{false}true]);
      '	'
      %IF ( ( ( get_global_var ( 'IS_FIRST' ) |N ) ) %==  true ) 
       %ELSE
        'res &' 
       %THEN
       [%f] set_var %( 'IS_FIRST' %, false )% 'bool res ' 
      %END-IF
      '= check_param<'
      [%t] spec_check_param %( %C )% '> ("-'
      %C |N ', '
      %IF ( ( %C get_up ( 'is_required' ) ) %==  true ) 
       %ELSE
         false 
       %THEN
        true 
      %END-IF
      ');'
//	]>]>
     %END-IF
    %END-FOR
    %END-IF
  %END-FOR
//		return res;
  '	return res;'
//	}]
  '}' 
 %END-IF

//t _spec_check_param
; // params_methods_cpp

end. // <<Library>>

<<transformator>> spec_check_param OBJECT IN %S
//c                                     {}
//r {%TS=UMLPrimitive&%TN=boolean}:     {unsigned long}
//r {%f_is_string(%T)=true}:            {std::string}
//r {""=""}:                            {%t_ret(%T,"in")}

//%f _global_methods_cpp
; // spec_check_param

implementation @ <<Library>>
: global_methods_cpp OBJECT IN %S
//	[{%f_need_check_params(%S)=true}\
 %IF ( ( [%f] need_check_params %( %S )% ) %==  true ) 
//		template \<typename T\>
  '	template <typename T>'
//		bool check_param (const char* key, bool is_requared) {
  '	bool check_param (const char* key, bool is_requared) {'
//			bool res = true;
  '		bool res = true;'
//			if (Core::ParamManagerFactory::get ().is_exist (key)) {
  '		if (Core::ParamManagerFactory::get ().is_exist (key)) {'
//				std::string value = Core::ParamManagerFactory::get ().get_string (key);
  '			std::string value = Core::ParamManagerFactory::get ().get_string (key);'
//				try {
  '			try {'
//					boost::lexical_cast\<T\> (value);
  '				boost::lexical_cast<T> (value);'
//				} catch (boost::bad_lexical_cast&) {
  '			} catch (boost::bad_lexical_cast&) {'
//					res = false;
  '				res = false;'
//					LOG_E (("Неверное значение параметра \%s: \%s", key, value.c_str ()));
  '				LOG_E (("Неверное значение параметра %s: %s", key, value.c_str ()));'
//				}
  '			}'
//			} else if (is_requared) {
  '		} else if (is_requared) {'
//				res = false;
  '			res = false;'
//				LOG_E(("Не задан обязательный параметр: \%s", key));
  '			LOG_E(("Не задан обязательный параметр: %s", key));'
//			}
  '		}'
//			
  '		'
//			return res;
  '		return res;'
//		}
  '	}'
//		
  '	'
//		template \<\>
  '	template <>'
//		bool check_param\<std::string\> (const char* key, bool is_requared) {
  '	bool check_param<std::string> (const char* key, bool is_requared) {'
//			if (is_requared && !Core::ParamManagerFactory::get ().is_exist (key)) {
  '		if (is_requared && !Core::ParamManagerFactory::get ().is_exist (key)) {'
//				LOG_E(("Не задан обязательный параметр \<\%s\>", key));
  '			LOG_E(("Не задан обязательный параметр <%s>", key));'
//				return false;
  '			return false;'
//			}
  '		}'
//			return true;
  '		return true;'
//		}%f_clear_list(ENUMS)
  '	}'
  [%f] clear_list %( 'ENUMS' )% 
//		[<{}{%AM=Settings::Class}%A<{}{%CC=Attribute&%C%TS=Enum&%f_exists_in_list(ENUMS,"%C%TU")=false}{%C}%f_add_to_list(ENUMS,"%C%TU")
  '	'
  %IF-NOT-EMPTY
   %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' ) 
    %A
    %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' %&& 
      ( ( %C ->T |S  ) %== 'Enum'  ) %&& 
      ( ( [%f] exists_in_list %( 'ENUMS' %, %C ->T |U  )% ) %==  false  ) ) 
     ( %C ) 
     [%f] add_to_list %( 'ENUMS' %, %C ->T |U  )% 
//		template \<\>
     '	template <>'
//		bool check_param\<%f_type(%C%T)\> (const char* key, bool is_requared) {
     '	bool check_param<'
     [%f] type %( %C ->T  )% '> (const char* key, bool is_requared) {'
//			bool res = true;
     '		bool res = true;'
//			if (Core::ParamManagerFactory::get ().is_exist (key)) {
     '		if (Core::ParamManagerFactory::get ().is_exist (key)) {'
//				res = false;
     '			res = false;'
//				std::string value = Core::ParamManagerFactory::get ().get_string (key);
     '			std::string value = Core::ParamManagerFactory::get ().get_string (key);'
//		%C%T<{}{%CC=Attribute}		res |= value == "%CN";
     '	'
     %C ->T
     %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' ) 
      '		res |= value == "'
      %C |N ';'
//		>		if (!res) {
      '	' 
     %END-FOR
       '		if (!res) {'
//					LOG_E (("Неверное значение параметра \%s: \%s", key, value.c_str ()));
     '				LOG_E (("Неверное значение параметра %s: %s", key, value.c_str ()));'
//				}
     '			}'
//			} else if (is_requared) {
     '		} else if (is_requared) {'
//				res = false;
     '			res = false;'
//				LOG_E(("Не задан обязательный параметр: \%s", key));
     '			LOG_E(("Не задан обязательный параметр: %s", key));'
//			}
     '		}'
//			return res;
     '		return res;'
//		}\
     '	}'
//	>>]]
    %END-FOR
    %END-FOR
  %END-IF
 %END-IF

//f _dump_params_includes
; // global_methods_cpp

end. // <<Library>>

: dump_params_includes OBJECT IN %S
//	%f_clear_list(INCLUDES)\
 [%f] clear_list %( 'INCLUDES' )% 
//	<{}{%AM=Settings::Class}%A<{}{%CC=Attribute&%C%TS=Enum&%f_exists_in_list(INCLUDES,"%f_dump_include_path(%f_with_gen_id(h,%C%TW),%C%T)")=false}{%C}%f_add_to_list(INCLUDES,"%C%TU")[\
 %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' ) 
  %A
  %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' %&& 
    ( ( %C ->T |S  ) %== 'Enum'  ) %&& 
    ( ( [%f] exists_in_list %( 'INCLUDES' %, [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %C ->T |W  )% %, %C ->T  )% )% ) %==  false  ) ) 
   ( %C ) 
   [%f] add_to_list %( 'INCLUDES' %, %C ->T |U  )% %IF-NOT-EMPTY
//	\#include %f_dump_include_path(%f_with_gen_id(h,%C%TW),%C%T)
    '#include '
    [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %C ->T |W  )% %, %C ->T  )% 
//	]>>%f_clear_list(INCLUDES)
   %END-IF
  %END-FOR
  %END-FOR
 [%f] clear_list %( 'INCLUDES' )% 

//f _need_check_params
; // dump_params_includes

: need_check_params OBJECT IN %S
//	[{%S%f_need_dump_params_methods()=true&<{}{%AM=Settings::Class&%A<{}{%CC=Attribute&[{%f_is_string(%C%T)=false|%C{is_required}=true}{false}true]}{%CC}>!=0}{%AC}>!=0}{false}true]
 %IF ( ( %S %f need_dump_params_methods %( )% ) %==  true %&& 
   ( 
  %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' %&& 
    ( ( %A
   %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' %&& 
     ( %IF ( ( [%f] is_string %( %C ->T  )% ) %==  false %|| 
      ( ( %C get_up ( 'is_required' ) ) %==  true  ) ) 
     %ELSE
       false 
     %THEN
      true 
    %END-IF
 ) ) 
    ( %C |C ) 
   %END-FOR
 )    %!= 0  ) ) 
   ( %A |C ) 
  %END-FOR
  %!= 0  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF

//f _check_enum
; // need_check_params

: check_enum OBJECT IN %S
//	
//#UC END# *492A9A2101AAfor470361CD0148*
; // check_enum


// возвращает true, если нужно генерить методы для работы с параметрами...
//%f _need_dump_params_methods
implementation @ <<Library>>
: need_dump_params_methods OBJECT IN %S
//#UC START# *492A9D95027Cfor470361CD0148*
//	[{<{}{%AM=Settings::Class&%A<{%CC=Attribute}{%CC}>!=0}{%AC}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Settings::Class' %&& 
    ( ( %A
   %FOR %ITEM-SEPARATOR %C |C '=Attribute' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |C ) ) 
   %END-FOR
 )    %!= 0  ) ) 
   ( %A |C ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *492A9D95027Cfor470361CD0148*
; // need_dump_params_methods


// Метод генерирует дополнительную декларацию.
//%f _additional_declarations
: additional_declarations OBJECT IN %S
//#UC START# *492D3C81013Ffor470361CD0148*
//#UC END# *492D3C81013Ffor470361CD0148*
; // additional_declarations


// Метод генерирует дополнительную реализацию.
//%f _addition_definitions
: addition_definitions OBJECT IN %S
//#UC START# *492D4842032Cfor470361CD0148*
//#UC END# *492D4842032Cfor470361CD0148*
; // addition_definitions


// Метод генерирует дополнительную реализацию.
//%f _additional_def_java
: additional_def_java OBJECT IN %S
//#UC START# *492E98DB0075for470361CD0148*
//#UC END# *492E98DB0075for470361CD0148*
; // additional_def_java


// Путь к библиотеке
//%f _pas_LibPath
: pas_LibPath OBJECT IN %S
//#UC START# *494913390011for470361CD0148*
//	[{%S{gui}=true}{[{%S{gui}=false}{[{%S{gui}!=prj&%PS!=VCMTestProject}[{%S{gui}=tie&"%XU"!="intf.pas"}{/%S{gui}}]]}/rtl]}/gui]\
 %IF ( ( %S get_up ( 'gui' ) ) %==  true ) 
  %ELSE
   %IF ( ( %S get_up ( 'gui' ) ) %==  false ) 
    %ELSE
     %IF ( ( %S get_up ( 'gui' ) ) %!= 'prj' %&& 
       ( ( %P |S ) %!= 'VCMTestProject'  ) ) 
      %IF ( ( %S get_up ( 'gui' ) ) %== 'tie' %&& 
        ( ( %X |U ) %!= 'intf.pas'  ) ) 
       %ELSE
        '/'
        %S get_up ( 'gui' ) 
       %THEN
      %END-IF
     %END-IF
    %THEN
    '/rtl' 
   %END-IF
  %THEN
  '/gui' 
 %END-IF
//	%t_pas_VendorPrefix(%S)[/%S%f_pas_DecorLibName()]
 [%t] pas_VendorPrefix %( %S )% %IF-NOT-EMPTY
  '/'
  %S %f pas_DecorLibName %( )% 
 %END-IF
//#UC END# *494913390011for470361CD0148*
; // pas_LibPath


// Имя файла библиотеки
//%f _pas_LibUnitName
: pas_LibUnitName OBJECT IN %S
//#UC START# *4954DBDD00A3for470361CD0148*
//	[{%P#f_IsVCMSubsystem()=true}%f_N(%P)_]%f_str_replace(%SN, ,_)_lib.info
 %IF ( ( %P %?f IsVCMSubsystem %( )% ) %==  true ) 
  [%f] N %( %P )% '_' 
 %END-IF
 [%f] str_replace %( %S |N %, ' ' %, '_' )% '_lib.info'
//#UC END# *4954DBDD00A3for470361CD0148*
; // pas_LibUnitName


// Деокрирует имя библиотеки
//%f _pas_DecorLibName
: pas_DecorLibName OBJECT IN %S
//#UC START# *49997EB002BAfor470361CD0148*
//	%f_str_replace(%f_N(%S), ,_)
 [%f] str_replace %( [%f] N %( %S )% %, ' ' %, '_' )% 
//#UC END# *49997EB002BAfor470361CD0148*
; // pas_DecorLibName


// Проверка является ли библиотека базой данных
//%f _check_db_data
: check_db_data OBJECT IN %S
//#UC START# *49B1081100FEfor470361CD0148*
//	false
 false
//#UC END# *49B1081100FEfor470361CD0148*
; // check_db_data


// Перекрывается в переопределённом Library из PMM.
//%f _additional_pre_declarations
: additional_pre_declarations OBJECT IN %S
//#UC START# *4A0AB21B0055for470361CD0148*
//#UC END# *4A0AB21B0055for470361CD0148*
; // additional_pre_declarations


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470361CD0148*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for470361CD0148*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor470361CD0148*
//#UC END# *4705CBD6003Efor470361CD0148*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for470361CD0148*
//#UC END# *470484D50138for470361CD0148*
; // wiki_up_add_gen


// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// Вызывается для генерации специфических cpp-шников (например хидере реализации хранения)
//%f _specific_cpp_files_list
: specific_cpp_files_list OBJECT IN %S
//#UC START# *47EA208B0009for470361CD0148*
//#UC END# *47EA208B0009for470361CD0148*
; // specific_cpp_files_list


// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// Вызывается для генерации специфических хидеров (например хидере реализации хранения)
//%f _specific_h_files_list
: specific_h_files_list OBJECT IN %S
//#UC START# *47EA1ED00157for470361CD0148*
//#UC END# *47EA1ED00157for470361CD0148*
; // specific_h_files_list


// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор файлов реализации для фабрик интерфейсов (.cpp)
//+ fctr.cpp
<<generator>> fctr.cpp OBJECT IN %S
//#UC START# *4705C54B01F4for470361CD0148*
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//P
//C /%SN
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *4705C54B01F4for470361CD0148*
; // fctr.cpp


// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор заголовочных файлов для фабрик интерфейсов (.h)
//+ fctr.h
<<generator>> fctr.h OBJECT IN %S
//#UC START# *4705C5490109for470361CD0148*
//= fctr.cpp
%call-other-gen ( 'fctr.cpp' )
//#UC END# *4705C5490109for470361CD0148*
; // fctr.h


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor470361CD0148*
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//P
//C %S%f_pas_LibPath()
//C /%SN
//O %S%f_name_prefix()LibHome.cpp
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	%f_header(%S)
 [%f] header %( %S )% 
//	[{%f_need_check_params(%S)=true}\
 %IF ( ( [%f] need_check_params %( %S )% ) %==  true ) 
//	\#include "boost/lexical_cast.hpp"
  '#include "boost/lexical_cast.hpp"'
//	\#include "shared/Core/Params/Params.h"
  '#include "shared/Core/Params/Params.h"'
//	]\#include "[{%XU=cpp}{%f_with_gen_id(fctr.h,%SL)}%f_with_gen_id(h,%SL)]"
 %END-IF
 '#include "'
 %IF ( ( %X |U ) %== 'cpp' ) 
  %ELSE
   [%f] with_gen_id %( 'fctr.h' %, %S |L )% 
  %THEN
  [%f] with_gen_id %( 'h' %, %S |L )% 
 %END-IF
 '"'
//	<{}{%AM=Servant::Class|%AM=SrvServant::Class}[{%S%t_need_to_reg(%A)=true&%f_has_factory_methods(%A)=true}\
 %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Servant::Class' %|| 
   ( ( %A |M ) %== 'SrvServant::Class'  ) ) 
  %IF ( ( %S %t need_to_reg %( %A )% ) %==  true %&& 
    ( ( [%f] has_factory_methods %( %A )% ) %==  true  ) ) 
//	[\#include "%f_with_gen_id(fctr.h,%AL)"
   %IF-NOT-EMPTY
    '#include "'
    [%f] with_gen_id %( 'fctr.h' %, %A |L )% 
//	]]>[%f_dump_params_includes(%S)]<{}{%AS=LibExecutor&%S%t_need_to_execute(%A{type})=true}\#include "%f_with_gen_id(h,%AL)"
   %END-IF
  %END-IF
 %END-FOR
 %IF-NOT-EMPTY
  [%f] dump_params_includes %( %S )% 
 %END-IF
 %FOR %ITEM-CONDITION ( ( %A |S ) %== 'LibExecutor' %&& 
   ( ( %S %t need_to_execute %( %A get_up ( 'type' ) )% ) %==  true  ) ) 
  '#include "'
  [%f] with_gen_id %( 'h' %, %A |L )% 
//	>%S%f_add_cpp_inc()[
 %END-FOR
 %S %f add_cpp_inc %( )% %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
  %S %f open_ifdef %( )% 
 %END-IF
//	%SP[namespace %SN {
 %S |P %IF-NOT-EMPTY
  'namespace '
  %S |N ' {'
//	][
 %END-IF
 %IF-NOT-EMPTY

//	namespace {
  'namespace {'
//	%S%f_global_methods_cpp()
  %S %f global_methods_cpp %( )% 
//	} //namespace
  '} //namespace'
//	]
 %END-IF
//	%S%f_self_methods_cpp()\
 %S %f self_methods_cpp %( )% 
//	%S%f_interceptor_cpp()\
 %S %f interceptor_cpp %( )% 
//	%S%f_libhome()& %S%f_name_prefix()LibHomeFactory::get () {
 %S %f libhome %( )% '& '
 %S %f name_prefix %( )% 'LibHomeFactory::get () {'
//		return %S%f_name_prefix()LibHomeImpl::Singleton::instance();
 '	return '
 %S %f name_prefix %( )% 'LibHomeImpl::Singleton::instance();'
//	}
 '}'
//	
//	%S%f_name_prefix()LibHomeImpl::%S%f_name_prefix()LibHomeImpl () {
 %S %f name_prefix %( )% 'LibHomeImpl::'
 %S %f name_prefix %( )% 'LibHomeImpl () {'
//	%S%f_set_exec_mode()\
 %S %f set_exec_mode %( )% 
//	<{}{%AS=LibExecutor&%S%t_need_to_execute(%A{type})=true}	this-\>get_executors ().insert (&%AN::get ());
 %FOR %ITEM-CONDITION ( ( %A |S ) %== 'LibExecutor' %&& 
   ( ( %S %t need_to_execute %( %A get_up ( 'type' ) )% ) %==  true  ) ) 
  '	this->get_executors ().insert (&'
  %A |N '::get ());'
//	>}
 %END-FOR
 '}'
//	
//	void %S%f_name_prefix()LibHomeImpl::registrate_all_factories () const {
 'void '
 %S %f name_prefix %( )% 'LibHomeImpl::registrate_all_factories () const {'
//		%U[{_ENVIRONMENTS_CONFIG}
 '	'
 %U%IF ( '_ENVIRONMENTS_CONFIG' ) 

//		]
  '	' 
 %END-IF
 //	<{}{%AM=Servant::Class|%AM=SrvServant::Class}[{%S%t_need_to_reg(%A)=true&%f_has_factory_methods(%A)=true}
 %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Servant::Class' %|| 
   ( ( %A |M ) %== 'SrvServant::Class'  ) ) 
  %IF ( ( %S %t need_to_reg %( %A )% ) %==  true %&& 
    ( ( [%f] has_factory_methods %( %A )% ) %==  true  ) ) 

//	[	%A%f_open_ifdef()
   %IF-NOT-EMPTY
    '	'
    %A %f open_ifdef %( )% 
//	]	[{%A{Factory auto reg}=true}{%U[{_CUSTOM_REGISTRATE_FOR_%AU_%AN}\n	]}\{
   %END-IF
   '	'
   %IF ( ( %A get_up ( 'Factory auto reg' ) ) %==  true ) 
    %ELSE
     %U%IF ( '_CUSTOM_REGISTRATE_FOR_( '
      %A |U ) '_( '
      %A |N ) ) 
      #13#10'	' 
     %END-IF
     %THEN
    '{'
//			%f_type(%A)_factory_var fctr = new %f_type(%A)_factory ();
    '		'
    [%f] type %( %A )% '_factory_var fctr = new '
    [%f] type %( %A )% '_factory ();'
//			fctr-\>registrate_me([{}{0}%A{factory priority}]);
    '		fctr->registrate_me('
    %IF ( ) 
     %ELSE
      0 
     %THEN
     %A get_up ( 'factory priority' ) 
    %END-IF
    ');'
//		\}][
    '	}' 
   %END-IF
   %IF-NOT-EMPTY

//		%A%f_close_ifdef()]
    '	'
    %A %f close_ifdef %( )% 
   %END-IF
//		]>
   '	' 
  %END-IF
 %END-FOR
//	}
 '}'
//		
 '	'
//	void %S%f_name_prefix()LibHomeImpl::finalize () {
 'void '
 %S %f name_prefix %( )% 'LibHomeImpl::finalize () {'
//	[<{}{%AM=Servant::Class}{r}[{%S%t_need_to_reg(%A)=true&%f_has_factory_methods(%A)=true}[\
//	%f_dump_all_fctr_mng_unreg(%A)
//	]]>
//	]\
//	}[{%S%f_need_dump_params_methods()=true}
 '}'
 %IF ( ( %S %f need_dump_params_methods %( )% ) %==  true ) 

//		
  '	'
//	%S%f_params_methods_cpp()]
  %S %f params_methods_cpp %( )% 
 %END-IF
//	%S%f_addition_definitions()\
 %S %f addition_definitions %( )% 
//	[} // namespace %SN
 %IF-NOT-EMPTY
  '} // namespace '
  %S |N 
//	]%Sp<%CX>
 %END-IF
 %S |p 
 %FOR %C |X 
 %END-FOR
//	%f_footer(%S)
 [%f] footer %( %S )% 

//f _dump_all_fctr_mng_unreg
; // cpp

end. // <<Library>>

: dump_all_fctr_mng_unreg OBJECT IN %S
//	[{}{<%f_dump_all_fctr_mng_unreg(%G)>}<{\n}{%RS=Interface|%RS=ServerInterface}[{%RN!=LibHomeManager}	%f_type(%R)FactoryManager::unregister_all_factories ();]>]
 %IF ( ) 
  %ELSE
   %FOR [%f] dump_all_fctr_mng_unreg %( %G )% 
   %END-FOR
  %THEN
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %R |S ) %== 'Interface' %|| 
    ( ( %R |S ) %== 'ServerInterface'  ) ) 
   %IF ( ( %R |N ) %!= 'LibHomeManager' ) 
    '	'
    [%f] type %( %R )% 'FactoryManager::unregister_all_factories ();' 
   %END-IF
  %END-FOR
 %END-IF

//#UC END# *47022CB8034Bfor470361CD0148*
; // dump_all_fctr_mng_unreg


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
implementation @ <<Library>>
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470361CD0148*
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//P
//C %S%f_pas_LibPath()
//C /%SN
//O %S%f_name_prefix()LibHome.h
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	%f_h_header(%S)
 [%f] h_header %( %S )% 
//	%f_std_inc(%S)
 [%f] std_inc %( %S )% 
//	%S%f_include_base_libhome()[
 %S %f include_base_libhome %( )% %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
  %S %f open_ifdef %( )% 
 %END-IF
//	
//	%SP[namespace %SN {
 %S |P %IF-NOT-EMPTY
  'namespace '
  %S |N ' {'
//	][
 %END-IF
 %IF-NOT-EMPTY

//	%S%f_additional_pre_declarations()]
  %S %f additional_pre_declarations %( )% 
 %END-IF
//	class %S%f_name_prefix()LibHomeFactory {
 'class '
 %S %f name_prefix %( )% 'LibHomeFactory {'
//	public:
 'public:'
//		static %S%f_libhome()& get ();
 '	static '
 %S %f libhome %( )% '& get ();'
//	};
 '};'
//	
//	class %S%f_name_prefix()LibHomeImpl : %S%f_base_libhome() {
 'class '
 %S %f name_prefix %( )% 'LibHomeImpl : '
 %S %f base_libhome %( )% ' {'
//		SET_OBJECT_COUNTER (%S%f_name_prefix()LibHomeImpl)
 '	SET_OBJECT_COUNTER ('
 %S %f name_prefix %( )% 'LibHomeImpl)'
//	[%S%f_interceptor_h()
 %IF-NOT-EMPTY
  %S %f interceptor_h %( )% 
//	

//	]%S%f_self_methods_h()
 %END-IF
 %S %f self_methods_h %( )% 
//	
//	private:
 'private:'
//		friend class %S%f_name_prefix()LibHomeFactory;
 '	friend class '
 %S %f name_prefix %( )% 'LibHomeFactory;'
//		
 '	'
//		REFCOUNT_SINGLETON(%S%f_name_prefix()LibHomeImpl)
 '	REFCOUNT_SINGLETON('
 %S %f name_prefix %( )% 'LibHomeImpl)'
//		
 '	'
//		%S%f_name_prefix()LibHomeImpl ();
 '	'
 %S %f name_prefix %( )% 'LibHomeImpl ();'
//	
//		void registrate_all_factories () const;
 '	void registrate_all_factories () const;'
//		
 '	'
//		void finalize ();[{%S%f_need_dump_params_methods()=true}
 '	void finalize ();'
 %IF ( ( %S %f need_dump_params_methods %( )% ) %==  true ) 

//		
  '	'
//	%S%f_params_methods_h()]
  %S %f params_methods_h %( )% 
 %END-IF
//	};
 '};'
//	<{}{"%aM"="ComTarget::Category"|"%aM"="ExeTarget::Category"|"%aM"="AdapterTarget::Category"|"%aM"="AdapterTargetUnion::Category"}{%a}%f_add_to_list(TARGETS,a)>\
//	<{}{%f_is_empty(TARGETS)=false}{W}[%f_pop_first_to_var(TARGETS,_TS_)%{_TS_}<{}{"%AM"="Settings::Class"}{%A}%A<{}{}{%C}\
//	[{%f_exists_in_list(LIBN,"%CN")=false}[{"%C%TN"!="string"}{std::string}%t_n(%C%T,"%X{lid}")]\
//	 get_%f_to_omg(%CN());
//	 
//	void set_%f_to_omg(%CN([{"%C%TN"!="string"}{const std::string&}%t_arg(%C%T,"in")] value));
//	
//	]>>]>\
//	%S%f_additional_declarations()\
 %S %f additional_declarations %( )% 
//	[} // namespace %SN
 %IF-NOT-EMPTY
  '} // namespace '
  %S |N 
//	]%Sp<%CX>
 %END-IF
 %S |p 
 %FOR %C |X 
 %END-FOR
//	%f_h_footer(%S)
 [%f] h_footer %( %S )% 
//#UC END# *47022C88029Ffor470361CD0148*
; // h


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor470361CD0148*
//= fctr.cpp
%call-other-gen ( 'fctr.cpp' )
//#UC END# *47022CCF00EAfor470361CD0148*
; // i.h


// реализация абстрактного стереотипа COM::MDAGenerator
// генерация файла опрделений для регистрации COM DLL (.rgs)
//+ com.rgs
<<generator>> com.rgs OBJECT IN %S
//#UC START# *470320E002CEfor470361CD0148*
//P
//C /%SN
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470320E002CEfor470361CD0148*
; // com.rgs


// реализация абстрактного стереотипа COM::MDAGenerator
// генератор ODL-файла спецификации COM-интерфейса (.odl)
//+ odl
<<generator>> odl OBJECT IN %S
//#UC START# *47032097038Afor470361CD0148*
//= fctr.cpp
%call-other-gen ( 'fctr.cpp' )
//#UC END# *47032097038Afor470361CD0148*
; // odl


// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
//+ idl
<<generator>> idl OBJECT IN %S
//#UC START# *47022BBE0261for470361CD0148*
//#UC END# *47022BBE0261for470361CD0148*
; // idl


// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций для AMI (.idl)
//+ idl_ami
<<generator>> idl_ami OBJECT IN %S
//#UC START# *47022C0F01E4for470361CD0148*
//#UC END# *47022C0F01E4for470361CD0148*
; // idl_ami


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor470361CD0148*
//P
//C %S%f_pas_LibPath()
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *49F5795900ECfor470361CD0148*
; // dfm


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor470361CD0148*
//R  
//P
//C %S%f_pas_LibPath()
//O %S%f_pas_LibUnitName()
//	[{"%SO"!=""}%SN : %SS - %SD]
 %IF ( ( %S |O ) %!= '' ) 
  %S |N ' : '
  %S |S ' - '
  %S |D 
 %END-IF
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470F1571031Cfor470361CD0148*
; // intf.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for470361CD0148*
//#UC END# *477398E501C0for470361CD0148*
; // intf2.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for470361CD0148*
//#UC END# *4774D2A20372for470361CD0148*
; // intf3.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for470361CD0148*
//#UC END# *4DE79AFC0030for470361CD0148*
; // sd


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor470361CD0148*
//P
//C [{%S{is namespace}=true}/%SN]
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470321C1038Afor470361CD0148*
; // fctr.java


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470361CD0148*
//P
//C [{%S{is namespace}=true}/%SN]
//O %S%f_name_prefix()LibHomeFactory.java
//	%f_header(%S)
 [%f] header %( %S )% 
//	package %f_dump_java_package(%S).%SN;
 'package '
 [%f] dump_java_package %( %S )% '.'
 %S |N ';'
//	
//	[%f_dump_std_java_imports(%S)
 %IF-NOT-EMPTY
  [%f] dump_std_java_imports %( %S )% 
//	][%f_java_core_exceptions(%S)
 %END-IF
 %IF-NOT-EMPTY
  [%f] java_core_exceptions %( %S )% 
//	][%S%f_include_base_libhome()
 %END-IF
 %IF-NOT-EMPTY
  %S %f include_base_libhome %( )% 
//	<{}{%AM=Servant::Class|%AM=SrvServant::Class}[{%S%t_need_to_reg(%A)=true&%f_has_factory_methods(%A)=true}\

//	[%f_with_gen_id(java,%f_java_import(%A))

//	]]>%S%f_add_java_inc()
//	]
 %END-IF
//	public class %S%f_name_prefix()LibHomeFactory {
 'public class '
 %S %f name_prefix %( )% 'LibHomeFactory {'
//		public static %S%f_libhome() get () {
 '	public static '
 %S %f libhome %( )% ' get () {'
//			return %S%f_name_prefix()LibHomeImpl.getInstace ();
 '		return '
 %S %f name_prefix %( )% 'LibHomeImpl.getInstace ();'
//		}
 '	}'
//		
 '	'
//		private static class %S%f_name_prefix()LibHomeImpl %S%f_base_libhome() {
 '	private static class '
 %S %f name_prefix %( )% 'LibHomeImpl '
 %S %f base_libhome %( )% ' {'
//		[
 '	'
 %IF-NOT-EMPTY

//		%S%f_interceptor_java()
  '	'
  %S %f interceptor_java %( )% 
//		]
  '	' 
 %END-IF
//			private static %S%f_libhome() getInstace () {
 '		private static '
 %S %f libhome %( )% ' getInstace () {'
//				return sInstance_;
 '			return sInstance_;'
//			}[
 '		}'
 %IF-NOT-EMPTY

//			
  '		'
//		%S%f_self_methods_java()]
  '	'
  %S %f self_methods_java %( )% 
 %END-IF
//		
 '	'
//			private %S%f_name_prefix()LibHomeImpl () {
 '		private '
 %S %f name_prefix %( )% 'LibHomeImpl () {'
//	%S%f_set_exec_mode()\
 %S %f set_exec_mode %( )% 
//	<{}{%AS=LibExecutor&%S%t_need_to_execute(%A{type})=true}			this.getExecutors ().add(%f_type(%A).get());
 %FOR %ITEM-CONDITION ( ( %A |S ) %== 'LibExecutor' %&& 
   ( ( %S %t need_to_execute %( %A get_up ( 'type' ) )% ) %==  true  ) ) 
  '			this.getExecutors ().add('
  [%f] type %( %A )% '.get());'
//	>		}
 %END-FOR
 '		}'
//		
 '	'
//			public void registrateAllFactories () {
 '		public void registrateAllFactories () {'
//				%U[{_ENVIRONMENTS_CONFIG}
 '			'
 %U%IF ( '_ENVIRONMENTS_CONFIG' ) 

//				]
  '			' 
 %END-IF
 //	<{}{%AM=Servant::Class|%AM=SrvServant::Class}[{%S%t_need_to_reg(%A)=true&%f_has_factory_methods(%A)=true}
 %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Servant::Class' %|| 
   ( ( %A |M ) %== 'SrvServant::Class'  ) ) 
  %IF ( ( %S %t need_to_reg %( %A )% ) %==  true %&& 
    ( ( [%f] has_factory_methods %( %A )% ) %==  true  ) ) 

//	[{%A{Factory auto reg}=true}{			%U[{_CUSTOM_REGISTRATE_FOR_%AU_%AN}\n			]}\
   %IF ( ( %A get_up ( 'Factory auto reg' ) ) %==  true ) 
    %ELSE
     '			'
     %U%IF ( '_CUSTOM_REGISTRATE_FOR_( '
      %A |U ) '_( '
      %A |N ) ) 
      #13#10'			' 
     %END-IF
     %THEN
//				try {
    '			try {'
//					%f_type(%A)FactoryImpl fctr = new %f_type(%A)FactoryImpl ();
    '				'
    [%f] type %( %A )% 'FactoryImpl fctr = new '
    [%f] type %( %A )% 'FactoryImpl ();'
//					fctr.registrateMe((short)[{}{0}%A{factory priority}]);
    '				fctr.registrateMe((short)'
    %IF ( ) 
     %ELSE
      0 
     %THEN
     %A get_up ( 'factory priority' ) 
    %END-IF
    ');'
//				} catch (DuplicatedFactoryKey ex) {
    '			} catch (DuplicatedFactoryKey ex) {'
//					Logs.LOG_SEX (ex);
    '				Logs.LOG_SEX (ex);'
//				}]
    '			}' 
   %END-IF
//	]>
  %END-IF
 %END-FOR
//			}
 '		}'
//		
 '	'
//			public void finalize () {
 '		public void finalize () {'
//			}
 '		}'
//		
 '	'
//			private static %S%f_name_prefix()LibHomeImpl sInstance_ = new %S%f_name_prefix()LibHomeImpl ();
 '		private static '
 %S %f name_prefix %( )% 'LibHomeImpl sInstance_ = new '
 %S %f name_prefix %( )% 'LibHomeImpl ();'
//		<%CX>
 '	'
 %FOR %C |X 
 %END-FOR
//		} // class %S%f_name_prefix()LibHomeImpl[
 '	} // class '
 %S %f name_prefix %( )% 'LibHomeImpl'
 %IF-NOT-EMPTY

//		
  '	'
//		%S%f_additional_def_java()]
  '	'
  %S %f additional_def_java %( )% 
 %END-IF
//	} // class %S%f_name_prefix()LibHomeFactory
 '} // class '
 %S %f name_prefix %( )% 'LibHomeFactory'
//	%f_footer(%S)
 [%f] footer %( %S )% 

//f _dump_all_fctr_mng_unreg_java
; // java

end. // <<Library>>

: dump_all_fctr_mng_unreg_java OBJECT IN %S
//	[{}{<%f_dump_all_fctr_mng_unreg_java(%G)>}<{\n}{%RS=Interface|%RS=ServerInterface}[{%RN!=LibHomeManager}%f_type(%R)FactoryManager.unregisterAllFactories ();]>]
 %IF ( ) 
  %ELSE
   %FOR [%f] dump_all_fctr_mng_unreg_java %( %G )% 
   %END-FOR
  %THEN
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %R |S ) %== 'Interface' %|| 
    ( ( %R |S ) %== 'ServerInterface'  ) ) 
   %IF ( ( %R |N ) %!= 'LibHomeManager' ) 
    [%f] type %( %R )% 'FactoryManager.unregisterAllFactories ();' 
   %END-IF
  %END-FOR
 %END-IF

//#UC END# *470321950119for470361CD0148*
; // dump_all_fctr_mng_unreg_java


// реализация абстрактного стереотипа ModelSerialize::MDAGenerator
// генератор структуры модели в описание на языке FORTH
//+ forth_structure
implementation @ <<Library>>
<<generator>> forth_structure OBJECT IN %S
//R  
//#UC START# *4F368B80039Efor470361CD0148*
//= Requirements::Category;forth_structure
%call-other-gen ( 'Requirements' 'forth_structure' )
//#UC END# *4F368B80039Efor470361CD0148*
; // forth_structure


// реализация абстрактного стереотипа Генератор настроек::MDAGenerator
// Генерация настроек в ini-файл (.ini)
//+ config
<<generator>> config OBJECT IN %S
//#UC START# *48A2868003B9for470361CD0148*
//C /%SN
//P
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *48A2868003B9for470361CD0148*
; // config


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// С++ TIE-обвязка для DLL (_tie.cpp)
//+ dll.cpp
<<generator>> dll.cpp OBJECT IN %S
//#UC START# *47032ED002DEfor470361CD0148*
//= fctr.cpp
%call-other-gen ( 'fctr.cpp' )
//#UC END# *47032ED002DEfor470361CD0148*
; // dll.cpp


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// С++ TIE-обвязка для DLL (_tie.h)
//+ dll.h
<<generator>> dll.h OBJECT IN %S
//#UC START# *47032EC4032Cfor470361CD0148*
//= fctr.cpp
%call-other-gen ( 'fctr.cpp' )
//#UC END# *47032EC4032Cfor470361CD0148*
; // dll.h


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// Delphi интерфейсы для адаптера (.pas)
//+ pas
<<generator>> pas OBJECT IN %S
//#UC START# *470F152700FAfor470361CD0148*
//P
//C /%f_N(%S)
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470F152700FAfor470361CD0148*
; // pas


// реализация абстрактного стереотипа Дельфи-DLL Адаптер проектные файлы::MDAGenerator
// MPC для TIE-обвязки (.mpc)
//+ mpc.dll
<<generator>> mpc.dll OBJECT IN %S
//#UC START# *470F252801D4for470361CD0148*
//P
//C /%SN/targets
//O %SN_tie.mpc
//X W:/shared/support/mpc/scripts/mpc_comp.bat %SR%Sd %SN_tie library
//	%f_header(%S)
 [%f] header %( %S )% 
//	project (%SN_tie) : project_generic_core[{%f_use_server(%S)=true}_corba] {
 'project ('
 %S |N '_tie) : project_generic_core'
 %IF ( ( [%f] use_server %( %S )% ) %==  true ) 
  '_corba' 
 %END-IF
 ' {'
//		sharedname = %SN_tie
 '	sharedname = '
 %S |N '_tie'
//		staticname = %SN_tie
 '	staticname = '
 %S |N '_tie'
//		
 '	'
//		includes += %f_root_relative_path(%S)
 '	includes += '
 [%f] root_relative_path %( %S )% 
//		
 '	'
//		after += %SN
 '	after += '
 %S |N 
//		libs  += %SN
 '	libs  += '
 %S |N 
//		
 '	'
//		Header_Files {
 '	Header_Files {'
//			Std_Headers {
 '		Std_Headers {'
//			<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(dll.h,C)
 '		'
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= 'Category' ) 
  ( 'Sn' ) 
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'dll.h' %, 'C' )% 
//			]>}
   '		' 
  %END-IF
 %END-FOR
 '}'
//		<{}{"%CC"="Category"}{Sn}
 '	'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Category' ) 
  ( 'Sn' ) 

//			%CN {
  '		'
  %C |N ' {'
//			[	%f_normolized_path(dll.h,C)
  '		'
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'dll.h' %, 'C' )% 
//			]%C<{}{}{%ASn}[	%f_normolized_path(dll.h,A)
   '		' 
  %END-IF
  %C
  %FOR ( %A |S 'n' ) 
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'dll.h' %, 'A' )% 
//			]>[{%S{need UC}=true}%U[{_%CN_Manual_Headers}
    '		' 
   %END-IF
  %END-FOR
   %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
   %U%IF ( '_( '
    %C |N ) '_Manual_Headers' ) 

//			]
    '		' 
   %END-IF
 //			]}
   '		' 
  %END-IF
  '}'
//		>[{%S{need UC}=true}
  '	' 
 %END-FOR
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 

//			Rest_Headers {
  '		Rest_Headers {'
//			%U[{_Rest_Manual_Headers}
  '		'
  %U%IF ( '_Rest_Manual_Headers' ) 

//			]
   '		' 
  %END-IF
 //			}]
  '		}' 
 %END-IF
//		}
 '	}'
//	[{%S{need UC}=true}
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 

//		Inline_Files {
  '	Inline_Files {'
//			%U[{_Manual_Inlines}
  '		'
  %U%IF ( '_Manual_Inlines' ) 

//			]
   '		' 
  %END-IF
 //		}
  '	}'
//	]
 %END-IF
//		Source_Files {
 '	Source_Files {'
//			Std_Sources {				
 '		Std_Sources {				'
//			<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(dll.cpp,C)
 '		'
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= 'Category' ) 
  ( 'Sn' ) 
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'dll.cpp' %, 'C' )% 
//			]>}
   '		' 
  %END-IF
 %END-FOR
 '}'
//		<{}{"%CC"="Category"}{Sn}
 '	'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Category' ) 
  ( 'Sn' ) 

//			%CN {
  '		'
  %C |N ' {'
//			[	%f_normolized_path(dll.cpp,C)
  '		'
  %IF-NOT-EMPTY
   '	'
   [%f] normolized_path %( 'dll.cpp' %, 'C' )% 
//			]%C<{}{}{%ASn}[	%f_normolized_path(dll.cpp,A)
   '		' 
  %END-IF
  %C
  %FOR ( %A |S 'n' ) 
   %IF-NOT-EMPTY
    '	'
    [%f] normolized_path %( 'dll.cpp' %, 'A' )% 
//			]>[{%S{need UC}=true}%U[{_%CN_Manual_Sources}
    '		' 
   %END-IF
  %END-FOR
   %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
   %U%IF ( '_( '
    %C |N ) '_Manual_Sources' ) 

//			]
    '		' 
   %END-IF
 //			]}
   '		' 
  %END-IF
  '}'
//		>[{%S{need UC}=true}
  '	' 
 %END-FOR
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 

//			Rest_Sources {
  '		Rest_Sources {'
//			%U[{_Rest_Manual_Sources}
  '		'
  %U%IF ( '_Rest_Manual_Sources' ) 

//			]
   '		' 
  %END-IF
 //			}]
  '		}' 
 %END-IF
//		}
 '	}'
//	[{%S{need UC}=true}
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 

//		Resource_Files {
  '	Resource_Files {'
//		%U[{_RESOURCE_FILES}
  '	'
  %U%IF ( '_RESOURCE_FILES' ) 

//		]
   '	' 
  %END-IF
 //		}]
  '	}' 
 %END-IF
//	}
 '}'
//	%f_footer(%S)
 [%f] footer %( %S )% 
//#UC END# *470F252801D4for470361CD0148*
; // mpc.dll


// реализация абстрактного стереотипа Документация::MDAGenerator
// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor470361CD0148*
//#UC END# *4E65F581015Afor470361CD0148*
; // link_to_requests_hack


// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for470361CD0148*
//C /%SN:%SU
//O %SN
//L code_library
//S %SN

//	%f_wiki_header(%S)
 [%f] wiki_header %( %S )% 
//	[h2. Модель[
 %IF-NOT-EMPTY
  'h2. Модель'
  %IF-NOT-EMPTY

//	{info}Включает реализацию требований:%f_collect_req(%S)
   '{info}Включает реализацию требований:'
   [%f] collect_req %( %S )% 
//	<{}{%f_exists_in_list(REQS,a)=true}* %f_k_link(%a)
   %FOR %ITEM-CONDITION ( ( [%f] exists_in_list %( 'REQS' %, 'a' )% ) %==  true ) 
    '* '
    [%f] k_link %( %a )% 
//	>{info}][
   %END-FOR
   '{info}' 
  %END-IF
  %IF-NOT-EMPTY

//	

//	{info}Использует модули:
   '{info}Использует модули:'
//	<{}{%DS!=Requirements}* %f_k_link(%D)
   %FOR %ITEM-CONDITION ( ( %D |S ) %!= 'Requirements' ) 
    '* '
    [%f] k_link %( %D )% 
//	>{info}][
   %END-FOR
   '{info}' 
  %END-IF
  %IF-NOT-EMPTY

//	

//	{info}Используется из модулей:
   '{info}Используется из модулей:'
//	<{}{%aS!=Requirements&%t_target_ex(%a)!=true}{Sp}* %f_k_link(%a)
   %FOR %ITEM-CONDITION ( ( %a |S ) %!= 'Requirements' %&& 
     ( ( [%t] target_ex %( %a )% ) %!=  true  ) ) 
    ( 'Sp' ) 
    '* '
    [%f] k_link %( %a )% 
//	>{info}][
   %END-FOR
   '{info}' 
  %END-IF
  %IF-NOT-EMPTY

//	

//	{info}Включается в таргеты:
   '{info}Включается в таргеты:'
//	<{}{%aS!=Requirements&%t_target_ex(%a)=true}{Sp}* %f_k_link(%a)
   %FOR %ITEM-CONDITION ( ( %a |S ) %!= 'Requirements' %&& 
     ( ( [%t] target_ex %( %a )% ) %==  true  ) ) 
    ( 'Sp' ) 
    '* '
    [%f] k_link %( %a )% 
//	>{info}][\
   %END-FOR
   '{info}' 
  %END-IF
  %IF-NOT-EMPTY
//	%f_k_common_elem_docs(%S)][{%mx=true&%Cx=true}
   [%f] k_common_elem_docs %( %S )% 
  %END-IF
  %IF ( ( %m |x ) %==  true %&& 
    ( ( %C |x ) %==  true  ) ) 

//	

//	<{----\n}_[{%mN!=Main}{Основная}%mN] диаграмма модуля:_
   %FOR %ITEM-SEPARATOR '----'#13#10 ; // %ITEM-SEPARATOR 
    '_'
    %IF ( ( %m |N ) %!= 'Main' ) 
     %ELSE
      'Основная' 
     %THEN
     %m |N 
    %END-IF
    ' диаграмма модуля:_'
//	%f_dump_diagram(m){ShowDiagram:%mU.jpg}
    [%f] dump_diagram %( 'm' )% '{ShowDiagram:'
    %m |U '.jpg}'
//	>]][
   %END-FOR
  %END-IF
 %END-IF
 %IF-NOT-EMPTY

//	

//	h2. Состав модуля[
  'h2. Состав модуля'
  %IF-NOT-EMPTY

//	

//	_Интерфейсные пакеты:_<{}{%C#f_wiki_interface_package()=true}{%CSn}
   '_Интерфейсные пакеты:_'
   %FOR %ITEM-CONDITION ( ( %C %?f wiki_interface_package %( )% ) %==  true ) 
    ( %C |S 'n' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Утилитные пакеты:_<{}{%C#f_wiki_utility_package()=true}{%CSn}
   '_Утилитные пакеты:_'
   %FOR %ITEM-CONDITION ( ( %C %?f wiki_utility_package %( )% ) %==  true ) 
    ( %C |S 'n' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Схемы данных:_<{}{%C#f_data_scheme_package()=true}{%CSn}
   '_Схемы данных:_'
   %FOR %ITEM-CONDITION ( ( %C %?f data_scheme_package %( )% ) %==  true ) 
    ( %C |S 'n' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF-NOT-EMPTY

//	

//	_Пакеты реализации и вспомогательные пакеты:_<{}{%C#f_wiki_impl_or_support_package()=true}{%CSn}
   '_Пакеты реализации и вспомогательные пакеты:_'
   %FOR %ITEM-CONDITION ( ( %C %?f wiki_impl_or_support_package %( )% ) %==  true ) 
    ( %C |S 'n' ) 

//	\# *%f_k_link(%C)*
    '# *'
    [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>]]<%CX>
    '_'
    %C |? '_'
    %IF-NOT-EMPTY
     ', '
     [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
    %END-IF
   %END-FOR
  %END-IF
 %END-IF
 %FOR %C |X 
 %END-FOR
//	%f_wiki_footer(%S)
 [%f] wiki_footer %( %S )% 
//#UC END# *46E6D4BB0339for470361CD0148*
; // wiki


// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// mpc/mwc файлы проектов (mpc/mwc)
//+ mpc
<<generator>> mpc OBJECT IN %S
//#UC START# *47031E41002Efor470361CD0148*
//P
//O %SN.mpc
//X W:/shared/support/mpc/scripts/mpc_comp.bat %SR%Sd %SN library
//	%f_header(%S)
 [%f] header %( %S )% 
//	project (%SN) : project_generic_core[{%f_use_server(%S)=true}_corba][{"<{}{%CM=ComInterfaces::Category}{C}>"!="0"}, project_compile_odl][{<{}{%AM=Grammar::Class}{%AC}>!=0}, project_compile_g] {
 'project ('
 %S |N ') : project_generic_core'
 %IF ( ( [%f] use_server %( %S )% ) %==  true ) 
  '_corba' 
 %END-IF
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C |M ) %== 'ComInterfaces::Category' ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  ', project_compile_odl' 
 %END-IF
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Grammar::Class' ) 
   ( %A |C ) 
  %END-FOR
  %!= 0 ) 
  ', project_compile_g' 
 %END-IF
 ' {'
//		sharedname = %SN
 '	sharedname = '
 %S |N 
//		staticname = %SN
 '	staticname = '
 %S |N 
//	[
 %IF-NOT-EMPTY

//	%f_mpc_all_includes(%S)
  [%f] mpc_all_includes %( %S )% 
//	%f_mpc_all_libpaths(%S)
  [%f] mpc_all_libpaths %( %S )% 
//	][{%f_use_server(%S)=true&%SN!=Core&%SN!=CoreSrv}
 %END-IF
 %IF ( ( [%f] use_server %( %S )% ) %==  true %&& 
   ( ( %S |N ) %!= 'Core'  ) %&& 
   ( ( %S |N ) %!= 'CoreSrv'  ) ) 

//		after += CoreSrv_cs
  '	after += CoreSrv_cs'
//		libs  += CoreSrv_cs
  '	libs  += CoreSrv_cs'
//	]
 %END-IF
//	%f_library_mpc_base(%S)
 [%f] library_mpc_base %( %S )% 
//	}
 '}'
//	%f_footer(%S)
 [%f] footer %( %S )% 
//#UC END# *47031E41002Efor470361CD0148*
; // mpc


// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// Файлы ресурсов (rc)
//+ rc
<<generator>> rc OBJECT IN %S
//#UC START# *471442BE033Cfor470361CD0148*
//C /%SN
//P
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *471442BE033Cfor470361CD0148*
; // rc


// реализация абстрактного стереотипа Проектные файлы Java::MDAGenerator
// генерация файлов для сборки в Ecllipse
//+ build.xml
<<generator>> build.xml OBJECT IN %S
//#UC START# *47032262037Afor470361CD0148*
//C /%SN
//I <!--UC_BEGIN
//i -->
//J <!--UC_END
//j -->
//O build.xml
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	\<?xml version="1.0" encoding="windows-1251"?\>
 '<?xml version="1.0" encoding="windows-1251"?>'
//	\<project name="%SN" basedir="."\>
 '<project name="'
 %S |N '" basedir=".">'
//		\<property environment="env"/\>
 '	<property environment="env"/>'
//		\<property name="build.dir" value="$\{env.JAVA_SOURCE_ROOT}/build/target"/\>
 '	<property name="build.dir" value="${env.JAVA_SOURCE_ROOT}/build/target"/>'
//		
 '	'
//		\<target name="idlcomp"/\>
 '	<target name="idlcomp"/>'
//		\<target name="gcomp"\>
 '	<target name="gcomp">'
//	%f_all_generators(%S)[{%f_exists_in_list(ALL_GENERATORS_ID,"g.java")=true}[<{}{"%f_with_gen_id(g.java,%Ao)"!=""}{%A}%f_gcomp_antlr(%A)
 [%f] all_generators %( %S )% %IF ( ( [%f] exists_in_list %( 'ALL_GENERATORS_ID' %, 'g.java' )% ) %==  true ) 
  %IF-NOT-EMPTY
   %FOR %ITEM-CONDITION ( ( [%f] with_gen_id %( 'g.java' %, %A |o )% ) %!= '' ) 
    ( %A ) 
    [%f] gcomp_antlr %( %A )% 
//		>]]\
    '	' 
   %END-FOR
  %END-IF
 %END-IF
//		\</target\>
 '	</target>'
//		\<target name="makejar"\>
 '	<target name="makejar">'
//			\<mkdir dir="${build.dir}/jar"/\>
 '		<mkdir dir="${build.dir}/jar"/>'
//			\<jar destfile="${build.dir}/jar/%SN.jar"\>
 '		<jar destfile="${build.dir}/jar/'
 %S |N '.jar">'
//				\<fileset dir ="${build.dir}/classes"\>
 '			<fileset dir ="${build.dir}/classes">'
//					\<include name="%f_str_replace(%f_dump_java_package(%S),.,/)/%SN/"/\>
 '				<include name="'
 [%f] str_replace %( [%f] dump_java_package %( %S )% %, '.' %, '/' )% '/'
 %S |N '/"/>'
//				\</fileset\>[
 '			</fileset>'
 %IF-NOT-EMPTY

//	%f_dump_file_set_dir(%S)]
  [%f] dump_file_set_dir %( %S )% 
 %END-IF
//			\</jar\>
 '		</jar>'
//		\</target\>
 '	</target>'
//		<%CX>
 '	'
 %FOR %C |X 
 %END-FOR
//	\</project\>
 '</project>'

//f _dump_file_set_dir
; // build.xml

end. // <<Library>>

: dump_file_set_dir OBJECT IN %S
//	%f_set_var(SELF,S)%f_clear_list(DIRS)\
 [%f] set_var %( 'SELF' %, 'S' )% [%f] clear_list %( 'DIRS' )% 
//	[{<{}{"%f_with_gen_id(output.xml,%AO)"!=""}{%AC}>!=0}[{%f_exists_in_list(DIRS,"%f_with_gen_id(output.xml,%{SELF}R%{SELF}d)")=false}%f_add_to_list(DIRS,"%f_with_gen_id(output.xml,%{SELF}R%{SELF}d)")]]\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( [%f] with_gen_id %( 'output.xml' %, %A |O )% ) %!= '' ) 
   ( %A |C ) 
  %END-FOR
  %!= 0 ) 
  %IF ( ( [%f] exists_in_list %( 'DIRS' %, [%f] with_gen_id %( 'output.xml' %, ( get_global_var ( 'SELF' ) |R ) ( get_global_var ( 'SELF' ) |d ) )% )% ) %==  false ) 
   [%f] add_to_list %( 'DIRS' %, [%f] with_gen_id %( 'output.xml' %, ( get_global_var ( 'SELF' ) |R ) ( get_global_var ( 'SELF' ) |d ) )% )% 
  %END-IF
 %END-IF
//	[{<{}{"%f_with_gen_id(vm,%AO)"!=""}{%AC}>!=0}[{%f_exists_in_list(DIRS,"%f_with_gen_id(vm,%{SELF}R%{SELF}d)")=false}%f_add_to_list(DIRS,"%f_with_gen_id(vm,%{SELF}R%{SELF}d)")]]\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( [%f] with_gen_id %( 'vm' %, %A |O )% ) %!= '' ) 
   ( %A |C ) 
  %END-FOR
  %!= 0 ) 
  %IF ( ( [%f] exists_in_list %( 'DIRS' %, [%f] with_gen_id %( 'vm' %, ( get_global_var ( 'SELF' ) |R ) ( get_global_var ( 'SELF' ) |d ) )% )% ) %==  false ) 
   [%f] add_to_list %( 'DIRS' %, [%f] with_gen_id %( 'vm' %, ( get_global_var ( 'SELF' ) |R ) ( get_global_var ( 'SELF' ) |d ) )% )% 
  %END-IF
 %END-IF
//	[<{\n}{%f_is_empty(DIRS)=false}{W}%f_pop_last_to_var(DIRS,DIR)\
 %IF-NOT-EMPTY
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( [%f] is_empty %( 'DIRS' )% ) %==  false ) 
   ( 'W' ) 
   [%f] pop_last_to_var %( 'DIRS' %, 'DIR' )% 
//				\<fileset dir ="%f_cut_postfix(%{DIR}N,/%{SELF}N)"\>
   '			<fileset dir ="'
   [%f] cut_postfix %( ( get_global_var ( 'DIR' ) |N ) %, '/'
   ( get_global_var ( 'SELF' ) |N ) )% '>'
//					\<include name="%{SELF}N/*"/\>
   '				<include name="'
   ( get_global_var ( 'SELF' ) |N ) '/*"/>'
//					\<include name="%{SELF}N/**/*"/\>
   '				<include name="'
   ( get_global_var ( 'SELF' ) |N ) '/**/*"/>'
//				\</fileset\>>]
   '			</fileset>' 
  %END-FOR
 %END-IF
//#UC END# *47032262037Afor470361CD0148*
; // dump_file_set_dir


// реализация абстрактного стереотипа Проектные файлы Java::MDAGenerator
// генератор файлов с описанием плагинов для Confluence
//+ output.xml
implementation @ <<Library>>
<<generator>> output.xml OBJECT IN %S
//#UC START# *4703223D01A5for470361CD0148*
//C /%SN
//P
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *4703223D01A5for470361CD0148*
; // output.xml


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for470361CD0148*
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *4A41A13D03D5for470361CD0148*
; // spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Library>>


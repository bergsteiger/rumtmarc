////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/MultiMap.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::MultiMap
//
// Мульти-Карта
// ---
// Сортированный индексный контейнер с заданным ключем .
// Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа
// определяется ключем связи со этим атрибутом.
// Дополнительно могут быть указанны тип аллокатора данных и тип функтора-сравнения, как атрибуты
// со стереотипами <<allocator>> и <<compare>> соотвественно.
// Используется для хранения коллекций данных, где каждая коллекция связана с собственным ключем
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: MultiMap::Class
implementation @ <<MultiMap>>
//? Мульти-Карта
//? Сортированный индексный контейнер с заданным ключем .
//? Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа определяется ключем связи со этим атрибутом.
//? Дополнительно могут быть указанны тип аллокатора данных и тип функтора-сравнения, как атрибуты со стереотипами <<allocator>> и <<compare>> соотвественно.
//? Используется для хранения коллекций данных, где каждая коллекция связана с собственным ключем
//= Map::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
//%f _dump_container_def_h
; // st_space_key

: dump_container_def_h OBJECT IN %S
//#UC START# *49015EE401E1for470F0379030D*
//	%f_dump_container_fwds_h(%S)\
 [%f] dump_container_fwds_h %( %S )% 
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	[#%S%f_open_ifdef()
 %IF-NOT-EMPTY
  out_indent %S %f open_ifdef %( )% 
//	]#typedef std::multimap \< %f_key_dump(%S), %f_data_dump(%S)%f_comp_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;[
 %END-IF
 out_indent 'typedef std::multimap < '
 [%f] key_dump %( %S )% ', '
 [%f] data_dump %( %S )% [%f] comp_dump %( %S )% 
 %FOR %ITEM-CONDITION ( ( %C |S ) %== 'allocator' ) 
  ', '
  [%f] type %( %C ->T  )% 
 %END-FOR
 ' > '
 %S |N ';'
 %IF-NOT-EMPTY

//	#%S%f_close_ifdef()]
  out_indent %S %f close_ifdef %( )% 
 %END-IF
//#UC END# *49015EE401E1for470F0379030D*
; // dump_container_def_h



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<MultiMap>>


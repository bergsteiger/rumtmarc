////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/AllGenerators/DelphiGens/Delphi интерфейсы и реализация.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAGenerator::Class>> MDProcess$Templates::CommonTemplates::AllGenerators::DelphiGens::Delphi интерфейсы и реализация
//
// группа генераторов в Delphi
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Delphi интерфейсы и реализация::MDAGenerator
implementation @ "Delphi интерфейсы и реализация"
//? группа генераторов в Delphi
//= Документация::MDAGenerator
//= Ifdef::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p finished:b=true ? Определяет, что элемент полностью описан на модели.
//p children prefix:s ? Префикс непосредственных детей.
//p elements prefix:s ? Префикс приписываемый вложенным элементам. <none> - ничего не приписывать. Если не задан, то берём у родителя.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансформаторы стереотипа

//%t _IsTypeForCleanup
<<transformator>> IsTypeForCleanup OBJECT IN %S
//#UC START# *4AE0718003CDfor470F151302FD*
//@ %SU
//c          {}
//r {%t_interface(%S)=true}: {true}
//r {%f_IsVector(%S)=true}: {true}
//r {%S#f_IsStruct()=true}: {true}
//r {""=""}: {false}
//#UC END# *4AE0718003CDfor470F151302FD*
; // IsTypeForCleanup



//%t _IsStereoForCleanup
<<transformator>> IsStereoForCleanup OBJECT IN %S
//#UC START# *4AE074330009for470F151302FD*
//c          {}
//r {%SC=Attribute&"%SS"=""}: {true}
//r {""=""}: {false}
//#UC END# *4AE074330009for470F151302FD*
; // IsStereoForCleanup


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{finished}"!="%S{!finished}"}%f_up_prefix(%S) *finished* = *%S{finished}* - Определяет, что элемент полностью описан на модели.
 ?inherited
 %IF ( ( %S get_up ( 'finished' ) ) %!= ( %S get_up_def ( 'finished' ) ) ) 
  [%f] up_prefix %( %S )% ' *finished* = *'
  %S get_up ( 'finished' ) '* - Определяет, что элемент полностью описан на модели.'
//	][{"%S{children prefix}"!="%S{!children prefix}"}%f_up_prefix(%S) *children prefix* = *%S{children prefix}* - Префикс непосредственных детей.
 %END-IF
 %IF ( ( %S get_up ( 'children prefix' ) ) %!= ( %S get_up_def ( 'children prefix' ) ) ) 
  [%f] up_prefix %( %S )% ' *children prefix* = *'
  %S get_up ( 'children prefix' ) '* - Префикс непосредственных детей.'
//	][{"%S{elements prefix}"!="%S{!elements prefix}"}%f_up_prefix(%S) *elements prefix* = *%S{elements prefix}* - Префикс приписываемый вложенным элементам. \<none\> - ничего не приписывать. Если не задан, то берём у родителя.
 %END-IF
 %IF ( ( %S get_up ( 'elements prefix' ) ) %!= ( %S get_up_def ( 'elements prefix' ) ) ) 
  [%f] up_prefix %( %S )% ' *elements prefix* = *'
  %S get_up ( 'elements prefix' ) '* - Префикс приписываемый вложенным элементам. <none> - ничего не приписывать. Если не задан, то берём у родителя.'
//	]
 %END-IF

// Определяет префикс элемента
//%f _pas_ElementPrefix
; // wiki_up_print

: pas_ElementPrefix OBJECT IN %S
// параметры: anElement: void = %1
//#UC START# *493D246701FEfor470F151302FD*
//@ %SU_%1C
//	%S%f_pas_ElementPrefixBase(%1)[{"%S%f_pas_ElementPrefixBase(%1)"!=""}[{%1C!=Operation|"%S{children prefix}"!=""}_]]%S{children prefix}
 %S %f pas_ElementPrefixBase %( %1 )% %IF ( ( %S %f pas_ElementPrefixBase %( %1 )% ) %!= '' ) 
  %IF ( ( %1 |C ) %!= 'Operation' %|| 
    ( ( %S get_up ( 'children prefix' ) ) %!= ''  ) ) 
   '_' 
  %END-IF
 %END-IF
 %S get_up ( 'children prefix' ) 
//#UC END# *493D246701FEfor470F151302FD*
; // pas_ElementPrefix


// нет документации
//%f _pas_ElementPrefixBase
: pas_ElementPrefixBase OBJECT IN %S
// параметры: anElement: void = %1
//#UC START# *493D246A025Bfor470F151302FD*
//@ %SU
//	[{%S#f_pas_ElementPrefixPrim(%1)=\<none\>}{%S#f_pas_ElementPrefixPrim(%1)}]
 %IF ( ( %S %?f pas_ElementPrefixPrim %( %1 )% ) %== '<none>' ) 
  %ELSE
   %S %?f pas_ElementPrefixPrim %( %1 )% 
  %THEN
 %END-IF
//#UC END# *493D246A025Bfor470F151302FD*
; // pas_ElementPrefixBase


// Рекурсивно определяет префикс элемента
//%f _pas_ElementPrefixPrim
: pas_ElementPrefixPrim OBJECT IN %S
// параметры: anElement: void = %1
//#UC START# *493D246E0016for470F151302FD*
//@ %SU
//	[{}{[%P#f_pas_ElementPrefixPrim(%1)]}%S{elements prefix}]
 %IF ( ) 
  %ELSE
   %IF-NOT-EMPTY
    %P %?f pas_ElementPrefixPrim %( %1 )% 
   %END-IF
  %THEN
  %S get_up ( 'elements prefix' ) 
 %END-IF
//#UC END# *493D246E0016for470F151302FD*
; // pas_ElementPrefixPrim


// Префикс имени
//%f _pas_Prefix
: pas_Prefix OBJECT IN %S
//#UC START# *493D24710142for470F151302FD*
//@ %SU
//	%P%f_pas_ElementPrefix(%S)
 %P %f pas_ElementPrefix %( %S )% 
//#UC END# *493D24710142for470F151302FD*
; // pas_Prefix


// Определяет, что это свойство.
//%f _IsProp
: IsProp OBJECT IN %S
//#UC START# *493D2D510282for470F151302FD*
//	false
 false
//#UC END# *493D2D510282for470F151302FD*
; // IsProp


// Определяет, что метод глобальный
//%f _IsGlobal
: IsGlobal OBJECT IN %S
//#UC START# *493D2E45011Bfor470F151302FD*
//@ %SU
//	[{%P#f_IsUtilityPack()=true|%PS=Function|%S{isGlobal}=true}{\
 %IF ( ( %P %?f IsUtilityPack %( )% ) %==  true %|| 
   ( ( %P |S ) %== 'Function'  ) %|| 
   ( ( %S get_up ( 'isGlobal' ) ) %==  true  ) ) 
  %ELSE
//	[{%P#f_IsMethod()=true&%P%P#f_IsUtilityPack()=true}{\
   %IF ( ( %P %?f IsMethod %( )% ) %==  true %&& 
     ( ( %P ->P %?f IsUtilityPack %( )%  ) %==  true  ) ) 
    %ELSE
//	false\
      false 
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *493D2E45011Bfor470F151302FD*
; // IsGlobal


// Является ли простым классом реализации
//%f _IsSimpleClass
: IsSimpleClass OBJECT IN %S
//#UC START# *4947E4DA0227for470F151302FD*
//@ %SU
//	[{%SS=SimpleClass|%SS=GuiControl|%SS=ViewAreaControllerImp}{false}true]
 %IF ( ( %S |S ) %== 'SimpleClass' %|| 
   ( ( %S |S ) %== 'GuiControl'  ) %|| 
   ( ( %S |S ) %== 'ViewAreaControllerImp'  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4947E4DA0227for470F151302FD*
; // IsSimpleClass


// Является ли примесью
//%f _IsMixIn
: IsMixIn OBJECT IN %S
//#UC START# *4947E5D40127for470F151302FD*
//	false
 false
//#UC END# *4947E5D40127for470F151302FD*
; // IsMixIn


// Определяет, что элемент производит файл (Unit)
//%f _IsUnitFileProducer
: IsUnitFileProducer OBJECT IN %S
//#UC START# *4947EC0F0380for470F151302FD*
//@ %SU
//	[{%S#f_IsUtilityPack()=true|%S#f_IsSimpleClass()=true|%S#f_IsMixIn()=true}{false}true]
 %IF ( ( %S %?f IsUtilityPack %( )% ) %==  true %|| 
   ( ( %S %?f IsSimpleClass %( )% ) %==  true  ) %|| 
   ( ( %S %?f IsMixIn %( )% ) %==  true  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4947EC0F0380for470F151302FD*
; // IsUnitFileProducer


// Имя типа
//%f _pas_TypeName
: pas_TypeName OBJECT IN %S
//#UC START# *4947F8AD02A1for470F151302FD*
//#UC END# *4947F8AD02A1for470F151302FD*
; // pas_TypeName


// Элемент определён на стороне обёртки С++
//%f _InTie
: InTie OBJECT IN %S
//#UC START# *494802B40121for470F151302FD*
//@ %SU
//	[{%P%P{gui}=tie|%P{gui}=tie}{false}true]
 %IF ( ( %P ->P get_up ( 'gui' )  ) %== 'tie' %|| 
   ( ( %P get_up ( 'gui' ) ) %== 'tie'  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *494802B40121for470F151302FD*
; // InTie


// Имя модуля в котором содержится элемент
//%f _pas_UnitName
: pas_UnitName OBJECT IN %S
//#UC START# *4948065C01DFfor470F151302FD*
//#UC END# *4948065C01DFfor470F151302FD*
; // pas_UnitName


// Путь к модулю
//%f _pas_UnitPath
: pas_UnitPath OBJECT IN %S
//#UC START# *4948C3290020for470F151302FD*
//	%S{path prefix}
 %S get_up ( 'path prefix' ) 
//#UC END# *4948C3290020for470F151302FD*
; // pas_UnitPath


// нет документации
//%f _pas_DefaultAncestor
: pas_DefaultAncestor OBJECT IN %S
//#UC START# *4948E5B60391for470F151302FD*
//#UC END# *4948E5B60391for470F151302FD*
; // pas_DefaultAncestor


// Добавляет файлы необходимые элементу с точки зрения метамодели
//%f _pas_ImplUses
: pas_ImplUses OBJECT IN %S
//#UC START# *4948EB2601FAfor470F151302FD*
//#UC END# *4948EB2601FAfor470F151302FD*
; // pas_ImplUses


// Выводит дополнительные модули необходимые элементу в интерфейсной секции
//%f _pas_IntfUses
: pas_IntfUses OBJECT IN %S
//#UC START# *4948F2EE0334for470F151302FD*
//#UC END# *4948F2EE0334for470F151302FD*
; // pas_IntfUses


// Определяет, что элемент это readonly-свойство
//%f _IsReadOnlyProp
: IsReadOnlyProp OBJECT IN %S
//#UC START# *4948F9190291for470F151302FD*
//	[{%S#f_IsAttribute()=true}{false}[{%SS=readonly|%S#f_IsVCMArea()=true}{false}true]]
 %IF ( ( %S %?f IsAttribute %( )% ) %==  true ) 
  %ELSE
    false 
  %THEN
  %IF ( ( %S |S ) %== 'readonly' %|| 
    ( ( %S %?f IsVCMArea %( )% ) %==  true  ) ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
 %END-IF
//#UC END# *4948F9190291for470F151302FD*
; // IsReadOnlyProp


// Определяет, что элемент это writeonly-свойство
//%f _IsWriteOnlyProp
: IsWriteOnlyProp OBJECT IN %S
//#UC START# *4948F93D038Afor470F151302FD*
//	[{%S#f_IsAttribute()=true}{false}[{%SS=writeonly}{false}true]]
 %IF ( ( %S %?f IsAttribute %( )% ) %==  true ) 
  %ELSE
    false 
  %THEN
  %IF ( ( %S |S ) %== 'writeonly' ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
 %END-IF

//f _OutIncludePrim
; // IsWriteOnlyProp

end. // "Delphi интерфейсы и реализация"

: OutIncludePrim OBJECT IN %S
//@ %SU
//	#\{$Include %f_str_replace(%SR%Sd,/,\\)\\%f_pas_UnitFileName(%S)\}
 out_indent '{$Include '
 [%f] str_replace %( %S |R %S |d %, '/' %, '\' )% '\'
 [%f] pas_UnitFileName %( %S )% '}'

//f _OutInclude
; // OutIncludePrim

: OutInclude OBJECT IN %S
//	[%1%f_open_ifdef()\n]\
 %IF-NOT-EMPTY
  %1 %f open_ifdef %( )% #13#10 
 %END-IF
//	%f_OutIncludePrim(%S)\
 [%f] OutIncludePrim %( %S )% 
//	[\n%1%f_close_ifdef()]
 %IF-NOT-EMPTY
  #13#10
  %1 %f close_ifdef %( )% 
 %END-IF
//#UC END# *4948F93D038Afor470F151302FD*
; // OutInclude


// Выводит объявление класса
//%f _pas_OutClassInterface
implementation @ "Delphi интерфейсы и реализация"
: pas_OutClassInterface OBJECT IN %S
//#UC START# *494B7197025Afor470F151302FD*
//	[{%S#f_IsMixIn()=true}\
 %IF ( ( %S %?f IsMixIn %( )% ) %==  true ) 
//	%f_set_var(POS,"%f_string_find(%S{ifndef},DesignTimeLibrary)")\
  [%f] set_var %( 'POS' %, [%f] string_find %( %S get_up ( 'ifndef' ) %, 'DesignTimeLibrary' )% )% 
//	[{%{POS}N!=-1}\
  %IF ( ( ( get_global_var ( 'POS' ) |N ) ) %!= -1 ) 
//	\n\{$IfDef DesignTimeLibrary\}
   #13#10'{$IfDef DesignTimeLibrary}'
//	 %f_pas_TypeName(%S) = %f_pas_ImpurityParentName(%S);
   ' '
   [%f] pas_TypeName %( %S )% ' = '
   [%f] pas_ImpurityParentName %( %S )% ';'
//	\{$EndIf DesignTimeLibrary\}
   '{$EndIf DesignTimeLibrary}'
//	]\
  %END-IF
//	]\
 %END-IF

//	[\n%S%f_open_ifdef()]\
 %IF-NOT-EMPTY
  #13#10
  %S %f open_ifdef %( )% 
 %END-IF
//	<{}{%t_interface(%R)=true}%R<{}{%CS=impurity value}%f_set_var(%CN,"%f_pas_TypeName(%C%T)")>>\
 %FOR %ITEM-CONDITION ( ( [%t] interface %( %R )% ) %==  true ) 
  %R
  %FOR %ITEM-CONDITION ( ( %C |S ) %== 'impurity value' ) 
   [%f] set_var %( %C |N %, [%f] pas_TypeName %( %C ->T  )% )% 
  %END-FOR
  %END-FOR
// - устанавливаем типы параметров реализуемых методов
//	[{%S#f_IsMixIn()=true}%f_set_var(WAS_TYPE,"1")]\
 %IF ( ( %S %?f IsMixIn %( )% ) %==  true ) 
  [%f] set_var %( 'WAS_TYPE' %, 1 )% 
 %END-IF
// - чтобы лишнее ключевое слово не выводить
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	<{}{%CV!=PrivateAccess&%C%f_IsClassInner()!=true&"%CO"=""}\
 %FOR %ITEM-CONDITION ( ( %C |V ) %!= 'PrivateAccess' %&& 
   ( ( %C %f IsClassInner %( )% ) %!=  true  ) %&& 
   ( ( %C |O ) %== ''  ) ) 
//	[{%CS!=Typedef|%C%GU!=%SU|%C{isClassRef}=true}\
  %IF ( ( %C |S ) %!= 'Typedef' %|| 
    ( ( %C ->G |U  ) %!= ( %S |U )  ) %|| 
    ( ( %C get_up ( 'isClassRef' ) ) %==  true  ) ) 
//	[{"%C{ifdef}"!=""|"%C{ifndef}"!=""}\
   %IF ( ( %C get_up ( 'ifdef' ) ) %!= '' %|| 
     ( ( %C get_up ( 'ifndef' ) ) %!= ''  ) ) 
//	%f_pas_OpenType(%S)\
    [%f] pas_OpenType %( %S )% 
//	]\
   %END-IF
//	[%CX\n]]\
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-IF
//	>\
 %END-FOR

//	%f_shift_intend(+1)\
 [%f] shift_intend %( 1 )% 
//	%f_pas_OpenType(%S)\
 [%f] pas_OpenType %( %S )% 
//	[{%S{need UC}=true}%U[{ci}\n]\n]\
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  %U%IF ( 'ci' ) 
   #13#10 
  %END-IF
   #13#10 
 %END-IF
//	%S%f_pas_OutMixInValues()\
 %S %f pas_OutMixInValues %( )% 
//	<{}{"%CS"="impurity value"}\
 %FOR %ITEM-CONDITION ( ( %C |S ) %== 'impurity value' ) 
//	[{%SU=%C%TU}%SF]\
  %IF ( ( %S |U ) %== ( %C ->T |U  ) ) 
   %S |F 
  %END-IF
//	#_%CN_ = %f_pas_TypeName(%C%T);\n\
  out_indent '_'
  %C |N '_ = '
  [%f] pas_TypeName %( %C ->T  )% ';'#13#10
//	>\
 %END-FOR
//	<{}{%C#f_IsDefine()=true&%CV=PublicAccess}%CX>\
 %FOR %ITEM-CONDITION ( ( %C %?f IsDefine %( )% ) %==  true %&& 
   ( ( %C |V ) %== 'PublicAccess'  ) ) 
  %C |X 
 %END-FOR
//
//	[{%S#f_IsMixIn()=true}{\
 %IF ( ( %S %?f IsMixIn %( )% ) %==  true ) 
  %ELSE
//	%f_set_var(PARENT,"%f_pas_MainParentName(%S)")}\
   [%f] set_var %( 'PARENT' %, [%f] pas_MainParentName %( %S )% )% 
  %THEN
//	[{<{}{%G#f_IsMixIn()!=true}{C}>=0}{\
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %!=  true ) 
    ( 'C' ) 
   %END-FOR
   %== 0 ) 
   %ELSE
//	%f_set_var(PARENT,"%f_pas_TypeName(%G)")}\
    [%f] set_var %( 'PARENT' %, [%f] pas_TypeName %( %G )% )% 
   %THEN
//	%f_set_var(PARENT,"%f_pas_ImpurityParentName(%S)")\
   [%f] set_var %( 'PARENT' %, [%f] pas_ImpurityParentName %( %S )% )% 
//	]\
  %END-IF
//	]\
 %END-IF
//
//	%f_set_var(WAS_PROLOGUE,"false")\
 [%f] set_var %( 'WAS_PROLOGUE' %, false )% 
//	<{}{%G#f_IsMixIn()=true}\
 %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %==  true ) 

//	[{"%{PARENT}N"!=""}#%f_pas_ImpurityParentName(%G) = %{PARENT}N;\n]\
//	[{%G<{}{%g#f_IsMixIn()!=true}{C}>=0&"%{PARENT}N"!=""}#%f_pas_ImpurityParentName(%G) = %{PARENT}N;\n]\
  %IF ( ( %G
   %FOR %ITEM-CONDITION ( ( %g %?f IsMixIn %( )% ) %!=  true ) 
    ( 'C' ) 
   %END-FOR
 )    %== 0 %&& 
    ( ( ( get_global_var ( 'PARENT' ) |N ) ) %!= ''  ) ) 
   out_indent [%f] pas_ImpurityParentName %( %G )% ' = '
   ( get_global_var ( 'PARENT' ) |N ) ';'#13#10 
  %END-IF
//	%f_set_var(PARENT,"%f_pas_TypeName(%G)")\
  [%f] set_var %( 'PARENT' %, [%f] pas_TypeName %( %G )% )% 
//	%S%f_OutL3ItemsPrologue(%G,"WAS_PROLOGUE")\
  %S %f OutL3ItemsPrologue %( %G %, 'WAS_PROLOGUE' )% 
//	%f_OutIncludePrim(%G)\n\
  [%f] OutIncludePrim %( %G )% #13#10
//	>\
 %END-FOR
//
//	<{}{%R#f_IsMixIn()=true}\
 %FOR %ITEM-CONDITION ( ( %R %?f IsMixIn %( )% ) %==  true ) 
//	#%f_pas_ImpurityParentName(%R) = %{PARENT}N;\n\
  out_indent [%f] pas_ImpurityParentName %( %R )% ' = '
  ( get_global_var ( 'PARENT' ) |N ) ';'#13#10
//	%f_set_var(PARENT,"%f_pas_TypeName(%R)")\
  [%f] set_var %( 'PARENT' %, [%f] pas_TypeName %( %R )% )% 
//	%S%f_OutL3ItemsPrologue(%R,"WAS_PROLOGUE")\
  %S %f OutL3ItemsPrologue %( %R %, 'WAS_PROLOGUE' )% 
//	%f_OutIncludePrim(%R)\n\
  [%f] OutIncludePrim %( %R )% #13#10
//	>\
 %END-FOR
//
//	#%f_pas_TypeName(%S) = \
 out_indent [%f] pas_TypeName %( %S )% ' = '
//	[{%Sa=abstract}{\
 %IF ( ( %S |a ) %== 'abstract' ) 
  %ELSE
//	[{%Sa=final}{\
   %IF ( ( %S |a ) %== 'final' ) 
    %ELSE
//	%f_set_var(CLASS_MARK_PREFIX,"")\
     [%f] set_var %( 'CLASS_MARK_PREFIX' %, '' )% 
//	}\
    %THEN
//	%f_set_var(CLASS_MARK_PREFIX,"final")\
    [%f] set_var %( 'CLASS_MARK_PREFIX' %, 'final' )% 
//	]}\
   %END-IF
  %THEN
//	%f_set_var(CLASS_MARK_PREFIX,"abstract")\
  [%f] set_var %( 'CLASS_MARK_PREFIX' %, 'abstract' )% 
//	]\
 %END-IF
//	[{"%S%f_pas_OutClassMark()"!=""}{\
 %IF ( ( %S %f pas_OutClassMark %( )% ) %!= '' ) 
  %ELSE
//	[{"%{CLASS_MARK_PREFIX}N"!=""}\{%{CLASS_MARK_PREFIX}N\} ]\
   %IF ( ( ( get_global_var ( 'CLASS_MARK_PREFIX' ) |N ) ) %!= '' ) 
    '{'
    ( get_global_var ( 'CLASS_MARK_PREFIX' ) |N ) '} ' 
   %END-IF
//	}\
  %THEN
//	\{\
  '{'
//	[{"%{CLASS_MARK_PREFIX}N"!=""}%{CLASS_MARK_PREFIX}N ]\
  %IF ( ( ( get_global_var ( 'CLASS_MARK_PREFIX' ) |N ) ) %!= '' ) 
   ( get_global_var ( 'CLASS_MARK_PREFIX' ) |N ) ' ' 
  %END-IF
//	%S%f_pas_OutClassMark()\} ]\
  %S %f pas_OutClassMark %( )% '} ' 
 %END-IF
//	class[(%S%f_pas_OutAncestor()\
 'class'
 %IF-NOT-EMPTY
  '('
  %S %f pas_OutAncestor %( )% 
//	[, <{, }{%R#f_ClassImplementable()=true&%S%f_SomeAncestorImplements(%R)!=true}\
  %IF-NOT-EMPTY
   ', '
   %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %R %?f ClassImplementable %( )% ) %==  true %&& 
     ( ( %S %f SomeAncestorImplements %( %R )% ) %!=  true  ) ) 
//	%f_pas_TypeName(%R)\
    [%f] pas_TypeName %( %R )% 
//	[, %R<{, }{%R#f_ClassImplementable()=true&%1#f_Implements(%R)!=true}\
    %IF-NOT-EMPTY
     ', '
     %R
     %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
      %ITEM-CONDITION ( ( %R %?f ClassImplementable %( )% ) %==  true %&& 
       ( ( %1 %?f Implements %( %R )% ) %!=  true  ) ) 
//	%f_pas_TypeName(%R) \{from %f_pas_TypeName(%S)\}>\
      [%f] pas_TypeName %( %R )% ' {from '
      [%f] pas_TypeName %( %S )% '}' 
     %END-FOR
 //	]>\
    %END-IF
   %END-FOR
//	])\
  %END-IF
  ')'
//	]\
 %END-IF
//	[\n# \{* %f_Doc(%S) \}]\
 %IF-NOT-EMPTY
  #13#10
  out_indent ' {* '
  [%f] Doc %( %S )% ' }' 
 %END-IF
//	%S%f_pas_OutBeforeFields()
 %S %f pas_OutBeforeFields %( )% 
//	[#private
 %IF-NOT-EMPTY
  out_indent 'private'
//	#// private fields
  out_indent '// private fields'
//	<{}{%CV=PrivateAccess&%C#f_IsAttribute()=true&%C#f_IsProp()!=true&%CS!=static}[%CX\n]>]\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PrivateAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsProp %( )% ) %!=  true  ) %&& 
    ( ( %C |S ) %!= 'static'  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
 %END-IF
//	\

//	[{%S%f_HasAnyVCMAreaLink()=true}\
////	#private
////	#// auto fields
//////	%f_with_gen_id(intf3.pas,<%R<{}{%CC=Class&%C#f_IsVCMAreaLink()=true}[%CX\n]>>)\
////	%f_with_gen_id(intf3.pas,<{}{%o#f_IsVCMAreaLink()=true}[%oX\n]>)\

//	#protected
//	#  procedure ClearRefs; override;
//	]\

//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	%S%f_pas_OutOverridesIntf()\
  %S %f pas_OutOverridesIntf %( )% 
//	]\
 %END-IF
//	\
//	[#private
//	#// property fields
//	%f_with_gen_id(intf3.pas,<{}{%C#f_IsStaticObject()!=true&%C#f_IsStruct()!=true}[%CX\n]>)]\
//	\
//	[#private
 %IF-NOT-EMPTY
  out_indent 'private'
//	#// private methods
  out_indent '// private methods'
//	<{}{%CV=PrivateAccess&%C#f_IsAttribute()!=true&%C%f_IsClassInner()=true}[%CX\n]>]\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PrivateAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %C %f IsClassInner %( )% ) %==  true  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
 %END-IF
//	\
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// property methods
  out_indent '// property methods'
//	<{}{%C#f_IsProp()=true}[%CX\n]>]\
  %FOR %ITEM-CONDITION ( ( %C %?f IsProp %( )% ) %==  true ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
 %END-IF
//	\

//	%f_clear_list(REALIZED_METHODS)\
 [%f] clear_list %( 'REALIZED_METHODS' )% 
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// realized methods\
  out_indent '// realized methods'



// Генерируем интерфейс методов "квадратиком", вложенных в фасеты/интерфейсы:
//	<\
  %FOR 

//	%R<{}{%CC=Class&%C#f_IsClassImplementableElement()=true&%C#f_IsRealizedBySomeClassElement(%1)!=true}\
   %R
   %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Class' %&& 
     ( ( %C %?f IsClassImplementableElement %( )% ) %==  true  ) %&& 
     ( ( %C %?f IsRealizedBySomeClassElement %( %1 )% ) %!=  true  ) ) 
//	[\n%C%f_pas_MethodInterface(%1,"r")]\
    %IF-NOT-EMPTY
     #13#10
     %C %f pas_MethodInterface %( %1 %, 'r' )% 
    %END-IF
//	>\
   %END-FOR
 

//	%R<{}{%1#f_Implements(%G)!=true}{%G}\
   %R
   %FOR %ITEM-CONDITION ( ( %1 %?f Implements %( %G )% ) %!=  true ) 
    ( %G ) 
//	%G<{}{%CC=Class&%C#f_IsClassImplementableElement()=true&%C#f_IsRealizedBySomeClassElement(%2)!=true}\
    %G
    %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Class' %&& 
      ( ( %C %?f IsClassImplementableElement %( )% ) %==  true  ) %&& 
      ( ( %C %?f IsRealizedBySomeClassElement %( %2 )% ) %!=  true  ) ) 
//	[\n%C%f_pas_MethodInterface(%2,"r")]\
     %IF-NOT-EMPTY
      #13#10
      %C %f pas_MethodInterface %( %2 %, 'r' )% 
     %END-IF
//	>\
    %END-FOR
 //	>\
   %END-FOR
 

//	>\
  %END-FOR

// end Генерируем интерфейс методов "квадратиком"...


//	<{}{%oS!=inline}\
  %FOR %ITEM-CONDITION ( ( %o |S ) %!= 'inline' ) 
//	[{%o#f_IsAttribute()=true|%S%f_IsPublicRealizedMethod(%o)!=true}\
   %IF ( ( %o %?f IsAttribute %( )% ) %==  true %|| 
     ( ( %S %f IsPublicRealizedMethod %( %o )% ) %!=  true  ) ) 
//	[\n%o%f_pas_MethodInterface(%S,"r")]\
    %IF-NOT-EMPTY
     #13#10
     %o %f pas_MethodInterface %( %S %, 'r' )% 
    %END-IF
//	]\
   %END-IF
//	>\n\
  %END-FOR
  #13#10
//	]\
 %END-IF
//	#protected

//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// realized methods
  out_indent '// realized methods'
//	<{\n}{%oS!=inline}\
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %o |S ) %!= 'inline' ) 
//	[{%o#f_IsAttribute()!=true&%S%f_IsPublicRealizedMethod(%o)=true}\
   %IF ( ( %o %?f IsAttribute %( )% ) %!=  true %&& 
     ( ( %S %f IsPublicRealizedMethod %( %o )% ) %==  true  ) ) 
//	%o%f_pas_MethodInterface(%S,"r")\
    %o %f pas_MethodInterface %( %S %, 'r' )% 
//	]\
   %END-IF
//	>\n\
  %END-FOR
  #13#10
//	]\
 %END-IF
//	#public

//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// overridden property methods
  out_indent '// overridden property methods'
//	<{\n}{%O#f_IsAttribute()=true}%O%f_pas_MethodInterface(%S,"o")>\n]\
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %O %?f IsAttribute %( )% ) %==  true ) 
   %O %f pas_MethodInterface %( %S %, 'o' )% 
  %END-FOR
  #13#10 
 %END-IF
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// overridden protected methods
  out_indent '// overridden protected methods'
//	<{\n}{%OV=ProtectedAccess&%O#f_IsAttribute()!=true&%OS!=inline}\
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %O |V ) %== 'ProtectedAccess' %&& 
    ( ( %O %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %O |S ) %!= 'inline'  ) ) 
//	%O%f_pas_MethodInterface(%S,"o")\
   %O %f pas_MethodInterface %( %S %, 'o' )% 
//	>\n\
  %END-FOR
  #13#10
//	]\
 %END-IF
//	#protected

//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// overridden public methods
  out_indent '// overridden public methods'
//	<{\n}{%OV=PublicAccess&%O#f_IsAttribute()!=true&%OS!=inline}\
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %O |V ) %== 'PublicAccess' %&& 
    ( ( %O %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %O |S ) %!= 'inline'  ) ) 
//	%O%f_pas_MethodInterface(%S,"o")\
   %O %f pas_MethodInterface %( %S %, 'o' )% 
//	>\n\
  %END-FOR
  #13#10
//	]\
 %END-IF
//	#public

//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// protected fields
  out_indent '// protected fields'
//	<{}{%CV=ProtectedAccess&%C#f_IsAttribute()=true&%C#f_IsProp()!=true&%CS!=static}[%CX\n]>\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'ProtectedAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsProp %( )% ) %!=  true  ) %&& 
    ( ( %C |S ) %!= 'static'  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
//	]\
 %END-IF

//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// public fields
  out_indent '// public fields'
//	<{}{%CV=PublicAccess&%C#f_IsAttribute()=true&%C#f_IsProp()!=true&%CS!=static}[%CX\n]>\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsProp %( )% ) %!=  true  ) %&& 
    ( ( %C |S ) %!= 'static'  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
//	]\
 %END-IF

//	\
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// protected methods
  out_indent '// protected methods'
//	<{}{%CV=ProtectedAccess&%C#f_IsAttribute()!=true&%C%f_IsClassInner()=true&%C#f_IsPublishedAccess()!=true}[%CX\n]>]\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'ProtectedAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %C %f IsClassInner %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsPublishedAccess %( )% ) %!=  true  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
 %END-IF
//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// public methods
  out_indent '// public methods'
//	<{}{%CV=PublicAccess&%C#f_IsAttribute()!=true&%C%f_IsClassInner()=true&%C#f_IsPublishedAccess()!=true}[%CX\n]>]\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %C %f IsClassInner %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsPublishedAccess %( )% ) %!=  true  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
 %END-IF
//	\
//	[#private
 %IF-NOT-EMPTY
  out_indent 'private'
//	#// private properties
  out_indent '// private properties'
//	%f_with_gen_id(intf2.pas,<{}{%CV=PrivateAccess}[%CX\n]>)]\
  [%f] with_gen_id %( 'intf2.pas' %, 
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PrivateAccess' ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
)%  %END-IF
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// protected properties
  out_indent '// protected properties'
//	%f_with_gen_id(intf2.pas,<{}{%CV=ProtectedAccess}[%CX\n]>)]\
  [%f] with_gen_id %( 'intf2.pas' %, 
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'ProtectedAccess' ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
)%  %END-IF

//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// public properties
  out_indent '// public properties'
//	%f_with_gen_id(intf2.pas,<{}{%CV=PublicAccess}[%CX\n]>)\
  [%f] with_gen_id %( 'intf2.pas' %, 
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-FOR
)% //	%f_with_gen_id(intf2.pas,<{}{%o#f_IsProp()=true&%o%P#f_IsContract()=true}[%oX\n]>)\
  [%f] with_gen_id %( 'intf2.pas' %, 
  %FOR %ITEM-CONDITION ( ( %o %?f IsProp %( )% ) %==  true %&& 
    ( ( %o ->P %?f IsContract %( )%  ) %==  true  ) ) 
   %IF-NOT-EMPTY
    %o |X #13#10 
   %END-IF
  %END-FOR
)% //	]\
 %END-IF

//	[{%S{need UC}=true}%U[{publ}\n]\n]\
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  %U%IF ( 'publ' ) 
   #13#10 
  %END-IF
   #13#10 
 %END-IF
//	[{%S{singleton}=true&<{}{%C#f_IsFactory()=true}{C}>=0}\
 %IF ( ( %S get_up ( 'singleton' ) ) %==  true %&& 
   ( 
  %FOR %ITEM-CONDITION ( ( %C %?f IsFactory %( )% ) %==  true ) 
   ( 'C' ) 
  %END-FOR
  %== 0  ) ) 
//	#public
  out_indent 'public'
//	#// singleton factory method
  out_indent '// singleton factory method'
//	#  class function Instance: %f_pas_TypeName(%S);
  out_indent '  class function Instance: '
  [%f] pas_TypeName %( %S )% ';'
//	#   {- возвращает экземпляр синглетона. }
  out_indent '   {- возвращает экземпляр синглетона. }'
//	]\
 %END-IF

//	%f_clear_list(CAST_METHODS)\
 [%f] clear_list %( 'CAST_METHODS' )% 
//	[#protected
 %IF-NOT-EMPTY
  out_indent 'protected'
//	#// Методы преобразования к реализуемым интерфейсам
  out_indent '// Методы преобразования к реализуемым интерфейсам'
//	<{}{%t_interface(%R)=true&%R%f_InTie()!=true}\
  %FOR %ITEM-CONDITION ( ( [%t] interface %( %R )% ) %==  true %&& 
    ( ( %R %f InTie %( )% ) %!=  true  ) ) 
//	%R<{\n}{%R#f_IsPureMixIn()!=true&%t_interface(%R)=true&%f_exists_in_list(CAST_METHODS,R)!=true}\
   %R
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %R %?f IsPureMixIn %( )% ) %!=  true %&& 
     ( ( [%t] interface %( %R )% ) %==  true  ) %&& 
     ( ( [%f] exists_in_list %( 'CAST_METHODS' %, 'R' )% ) %!=  true  ) ) 
//	%f_add_to_list(CAST_METHODS,R)\
    [%f] add_to_list %( 'CAST_METHODS' %, 'R' )% 
//	%f_pas_OutCastMethodInterface(%R,%1)\
    [%f] pas_OutCastMethodInterface %( %R %, %1 )% 
//	>\
   %END-FOR
 //	>
  %END-FOR
//	]\
 %END-IF
//	%f_clear_list(CAST_METHODS)\
 [%f] clear_list %( 'CAST_METHODS' )% 

//	[#published
 %IF-NOT-EMPTY
  out_indent 'published'
//	#// published methods
  out_indent '// published methods'
//	<{}{%CV=PublicAccess&%C#f_IsAttribute()!=true&%C%f_IsClassInner()=true&%C#f_IsPublishedAccess()=true&%C{isPublishedAccess}!=true}\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %!=  true  ) %&& 
    ( ( %C %f IsClassInner %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsPublishedAccess %( )% ) %==  true  ) %&& 
    ( ( %C get_up ( 'isPublishedAccess' ) ) %!=  true  ) ) 
//	[%CX\n]\
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
//	>\
  %END-FOR
//	]\
 %END-IF

//	%S%f_pas_BeforeClassEnd()\
 %S %f pas_BeforeClassEnd %( )% 
//	#end;//%f_pas_TypeName(%S)\
 out_indent 'end;//'
 [%f] pas_TypeName %( %S )% 
//	%S%f_pas_AfterClassEnd()\
 %S %f pas_AfterClassEnd %( )% 
//	<{}{%t_interface(%R)=true}%R<{}{%CS=impurity value}%f_set_var(%CN,"")>>\
 %FOR %ITEM-CONDITION ( ( [%t] interface %( %R )% ) %==  true ) 
  %R
  %FOR %ITEM-CONDITION ( ( %C |S ) %== 'impurity value' ) 
   [%f] set_var %( %C |N %, '' )% 
  %END-FOR
  %END-FOR
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 

//	<{}{%CV!=PrivateAccess&%C%f_IsClassInner()!=true&"%CO"=""}\
 %FOR %ITEM-CONDITION ( ( %C |V ) %!= 'PrivateAccess' %&& 
   ( ( %C %f IsClassInner %( )% ) %!=  true  ) %&& 
   ( ( %C |O ) %== ''  ) ) 
//	[{%CS=Typedef&%C%GU=%SU&%C{isClassRef}!=true}[%CX\n]]\
  %IF ( ( %C |S ) %== 'Typedef' %&& 
    ( ( %C ->G |U  ) %== ( %S |U )  ) %&& 
    ( ( %C get_up ( 'isClassRef' ) ) %!=  true  ) ) 
   %IF-NOT-EMPTY
    %C |X #13#10 
   %END-IF
  %END-IF
//	>\
 %END-FOR

//	%f_shift_intend(+1)\
 [%f] shift_intend %( 1 )% 
//	%S%f_pas_BeforeClassCloseIfDef()\
 %S %f pas_BeforeClassCloseIfDef %( )% 
//	[\n%S%f_close_ifdef()]\
 %IF-NOT-EMPTY
  #13#10
  %S %f close_ifdef %( )% 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 
//	%f_warning(%SN)\
//	%f_with_gen_id(intf3.pas,<{}{%C#f_IsStaticObject()=true|%C#f_IsStruct()=true}\
 [%f] with_gen_id %( 'intf3.pas' %, 
 %FOR %ITEM-CONDITION ( ( %C %?f IsStaticObject %( )% ) %==  true %|| 
   ( ( %C %?f IsStruct %( )% ) %==  true  ) ) 

//	%f_warning(%CN)\
//	[\n%CX]>)\
  %IF-NOT-EMPTY
   #13#10
   %C |X 
  %END-IF
 %END-FOR
)% // - генерируем псевдо-конструкторы записей и StaticObject'ов
//	%f_shift_intend(+1)\
 [%f] shift_intend %( 1 )% 
//	[\n\
 %IF-NOT-EMPTY
  #13#10
//	<{}{%CV=PublicAccess&%C#f_IsAttribute()=true&%C#f_IsProp()!=true&%CS=static}\
  %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
    ( ( %C %?f IsAttribute %( )% ) %==  true  ) %&& 
    ( ( %C %?f IsProp %( )% ) %!=  true  ) %&& 
    ( ( %C |S ) %== 'static'  ) ) 
//	[\n%CX]\
   %IF-NOT-EMPTY
    #13#10
    %C |X 
   %END-IF
//	>\
  %END-FOR
//	]\
 %END-IF

//	%f_clear_list(REALIZED_METHODS)
 [%f] clear_list %( 'REALIZED_METHODS' )% 
//#UC END# *494B7197025Afor470F151302FD*
; // pas_OutClassInterface


// Выводит спец-метку класса
//%f _pas_OutClassMark
: pas_OutClassMark OBJECT IN %S
//#UC START# *494B74D7016Bfor470F151302FD*
//#UC END# *494B74D7016Bfor470F151302FD*
; // pas_OutClassMark


// Выводит значения параметров примесей
//%f _pas_OutMixInValues
: pas_OutMixInValues OBJECT IN %S
//#UC START# *494B7E6D0125for470F151302FD*
//#UC END# *494B7E6D0125for470F151302FD*
; // pas_OutMixInValues


// Определяет является ли элемент контроллером прецедента
//%f _IsUseCaseController
: IsUseCaseController OBJECT IN %S
//#UC START# *494B7E8B02B1for470F151302FD*
//	false
 false
//#UC END# *494B7E8B02B1for470F151302FD*
; // IsUseCaseController


// Выводит интерфейс переопределённых методов
//%f _pas_OutOverridesIntf
: pas_OutOverridesIntf OBJECT IN %S
//#UC START# *494B856502ECfor470F151302FD*
//	[{%S%f_NeedCleanupFields()=true}\
//	#  procedure ClearFields; override;
//	]
//#UC END# *494B856502ECfor470F151302FD*
; // pas_OutOverridesIntf


// Выводит реализацию переопределённых методов
//%f _pas_OutOverridesImpl
: pas_OutOverridesImpl OBJECT IN %S
//#UC START# *494B86B5014Bfor470F151302FD*
//	[{%S%f_NeedCleanupFields()=true}\
//	%f_pas_OpenMethodImplementation("ClearFields",%S)\
//	procedure %f_pas_TypeName(%S).ClearFields;
//	begin
//	<{}{%C#f_IsFieldForCleanup()=true}\
//	 [{%C%T#f_IsStruct()=true}{\
//	[{"%C%{clearViaProperty}N"!=""}{%C%f_pas_AttrName()}%C%{clearViaProperty}N]\
//	 := nil\
//	}\
//	Finalize(%C%f_pas_AttrName())];\n\
//	>\
//	 inherited;
//	end;\
//	]
//#UC END# *494B86B5014Bfor470F151302FD*
; // pas_OutOverridesImpl


// Имя атрибута
//%f _pas_AttrName
: pas_AttrName OBJECT IN %S
//#UC START# *494B9868000Afor470F151302FD*
//	%SN
 %S |N 
//#UC END# *494B9868000Afor470F151302FD*
; // pas_AttrName


// Заглушка-реализация метода
//%f _pas_MethodStub
: pas_MethodStub OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2
//#UC START# *494BAFBF00C0for470F151302FD*
//	 !!! Needs to be implemented !!!
 ' !!! Needs to be implemented !!!'
//#UC END# *494BAFBF00C0for470F151302FD*
; // pas_MethodStub


// Выводит тело метода
// 
// Modification = get|set|area|areareaf|o|r|f
//%f _pas_MethodBodyPrim
: pas_MethodBodyPrim OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2, RealizeType: a-string = %3, aOverrider: MDAClass = %4
//#UC START# *494BB3A201A2for470F151302FD*
//	\n\
 #13#10
//	[{"%4N"!=""}{\
 %IF ( ( %4 |N ) %!= '' ) 
  %ELSE
//	%S%f_pas_MethodDeclarations(%1,%2)\
   %S %f pas_MethodDeclarations %( %1 %, %2 )% 
//	}\
  %THEN
//	%4%f_pas_MethodDeclarations(%1,%2)\
  %4 %f pas_MethodDeclarations %( %1 %, %2 )% 
//	]\
 %END-IF
//	\n\
 #13#10
//	%S%f_Ind()\
 %S %f Ind %( )% 
//	[{%S{isAsm}=true}{\
 %IF ( ( %S get_up ( 'isAsm' ) ) %==  true ) 
  %ELSE
//	begin\
   'begin'
//	}\
  %THEN
//	asm\
  'asm'
//	]
 %END-IF
//	%S%f_pas_BeforeMethodBodyImplementation(%1,%2)\
 %S %f pas_BeforeMethodBodyImplementation %( %1 %, %2 )% 
//	%S%f_pas_MethodBodyImplementation(%1,%2)
 %S %f pas_MethodBodyImplementation %( %1 %, %2 )% 
//	%S%f_Ind()\
 %S %f Ind %( )% 
//	end;//%f_pas_FullMethodName(%S,%1,%3,%2)
 'end;//'
 [%f] pas_FullMethodName %( %S %, %1 %, %3 %, %2 )% 
//#UC END# *494BB3A201A2for470F151302FD*
; // pas_MethodBodyPrim


// Выводит реализацию итератора
//%f _pas_IteratorBody
: pas_IteratorBody OBJECT IN %S
//#UC START# *494BBE430242for470F151302FD*
//	\n\
 #13#10
//	var
 'var'
//	 Hack : Pointer absolute anAction;
 ' Hack : Pointer absolute anAction;'
//	begin
 'begin'
//	 try
 ' try'
//	  \
 '  '
//	[{%S{needs result}=true}\
 %IF ( ( %S get_up ( 'needs result' ) ) %==  true ) 
//	Result := \
  'Result := '
//	]\
 %END-IF
//	%SN(anAction[, <{, }%CN>]);
 %S |N '(anAction'
 %IF-NOT-EMPTY
  ', '
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %C |N 
  %END-FOR
 %END-IF
 ');'
//	 finally
 ' finally'
//	  l3FreeLocalStub(Hack);
 '  l3FreeLocalStub(Hack);'
//	 end;//try..finally
 ' end;//try..finally'
//	end;
 'end;'
//#UC END# *494BBE430242for470F151302FD*
; // pas_IteratorBody


// Выводит имя метода
//%f _pas_MethodName
: pas_MethodName OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for470F151302FD*
//@ %SU_%1N
//	[{%P#f_IsUtilityPack()=true}%S%f_pas_Prefix()]%t_pas_MethodName(%S,%1)
 %IF ( ( %P %?f IsUtilityPack %( )% ) %==  true ) 
  %S %f pas_Prefix %( )% 
 %END-IF
 [%t] pas_MethodName %( %S %, %1 )% 
//#UC END# *494BD6C80075for470F151302FD*
; // pas_MethodName


// Параметры операции
//%f _pas_Params
: pas_Params OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor470F151302FD*
//	[{%t_interface(%P)=true&%P#f_InTie()=true}{\
 %IF ( ( [%t] interface %( %P )% ) %==  true %&& 
   ( ( %P %?f InTie %( )% ) %==  true  ) ) 
  %ELSE
//	%f_set_var(FIRST_PARAM,"true")\
   [%f] set_var %( 'FIRST_PARAM' %, true )% 
//	<{}{%C#f_IsNotParam()!=true}\
   %FOR %ITEM-CONDITION ( ( %C %?f IsNotParam %( )% ) %!=  true ) 
//	[\n#  %C#f_open_ifdef()\n#  ]\
    %IF-NOT-EMPTY
     #13#10
     out_indent '  '
     %C %?f open_ifdef %( )% #13#10
     out_indent '  ' 
    %END-IF
//	[{%{FIRST_PARAM}N!=true}{\
    %IF ( ( ( get_global_var ( 'FIRST_PARAM' ) |N ) ) %!=  true ) 
     %ELSE
//	%f_set_var(FIRST_PARAM,"false")\
      [%f] set_var %( 'FIRST_PARAM' %, false )% 
//	}\
     %THEN
//	;\n#  \
     ';'#13#10
     out_indent '  '
//	%S%f_Ind()\
     %S %f Ind %( )% 
//	]\
    %END-IF
//	%t_pas_ParamPrefix(%C)%CN\
    [%t] pas_ParamPrefix %( %C )% %C |N 
//	[: %t_pas_ParamType(%C%T)]\
    %IF-NOT-EMPTY
     ': '
     [%t] pas_ParamType %( %C ->T  )% 
    %END-IF
//	[{"%C%VN"!=""} = %C%V%T#f_pas_ElementPrefix()%C%VN]\
    %IF ( ( %C ->V |N  ) %!= '' ) 
     ' = '
     %C ->V ->T %?f pas_ElementPrefix %( )%   %C ->V |N  
    %END-IF
//	[{%CD!=undefined}[\n#  \{* %f_Doc(%C)\}]]\
    %IF ( ( %C |D ) %!= 'undefined' ) 
     %IF-NOT-EMPTY
      #13#10
      out_indent '  {* '
      [%f] Doc %( %C )% '}' 
     %END-IF
    %END-IF
//	[\n#  %C#f_close_ifdef()\n#  ]\
    %IF-NOT-EMPTY
     #13#10
     out_indent '  '
     %C %?f close_ifdef %( )% #13#10
     out_indent '  ' 
    %END-IF
//	>\
   %END-FOR
//	}\
  %THEN
//	%f_set_var(FIRST_PARAM,"true")\
  [%f] set_var %( 'FIRST_PARAM' %, true )% 
//	<{;\n#  }{%C#f_IsNotParam()!=true}\
  %FOR %ITEM-SEPARATOR ';'#13#10
   out_indent '  ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C %?f IsNotParam %( )% ) %!=  true ) 
//	%f_set_var(FIRST_PARAM,"false")\
   [%f] set_var %( 'FIRST_PARAM' %, false )% 
//	%t_pas_ParamPrefix(%C)a%f_to_borland(%CN)\
   [%t] pas_ParamPrefix %( %C )% 'a'
   [%f] to_borland %( %C |N )% 
//	[: %t_pas_ParamType(%C%T)][{"%C%VN"!=""} = %C%V%T#f_pas_ElementPrefix()%C%VN]\
   %IF-NOT-EMPTY
    ': '
    [%t] pas_ParamType %( %C ->T  )% 
   %END-IF
   %IF ( ( %C ->V |N  ) %!= '' ) 
    ' = '
    %C ->V ->T %?f pas_ElementPrefix %( )%   %C ->V |N  
   %END-IF
//	[{%CD!=undefined}[\n#  \{* %f_Doc(%C)\}]]>\
   %IF ( ( %C |D ) %!= 'undefined' ) 
    %IF-NOT-EMPTY
     #13#10
     out_indent '  {* '
     [%f] Doc %( %C )% '}' 
    %END-IF
   %END-IF
  %END-FOR


//	[{"%S%f_pas_ResultTypeName()"=""&"%f_pas_TypeName(%T)"!=""}\
  %IF ( ( %S %f pas_ResultTypeName %( )% ) %== '' %&& 
    ( ( [%f] pas_TypeName %( %T )% ) %!= ''  ) ) 
//	[{%{FIRST_PARAM}N!=true}; ]\
   %IF ( ( ( get_global_var ( 'FIRST_PARAM' ) |N ) ) %!=  true ) 
    '; ' 
   %END-IF
//	out aRet \{: %f_pas_TypeName(%T)\}\
   'out aRet {: '
   [%f] pas_TypeName %( %T )% '}'
//	]\
  %END-IF


//	]
 %END-IF
//#UC END# *494BDCF3030Efor470F151302FD*
; // pas_Params


// Имя типа результата функции
//%f _pas_ResultTypeName
: pas_ResultTypeName OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDD190361for470F151302FD*
//@ %SU
//	%f_pas_ResultTypeNamePrim(%T,%S)
 [%f] pas_ResultTypeNamePrim %( %T %, %S )% 
//#UC END# *494BDD190361for470F151302FD*
; // pas_ResultTypeName


// выводит параметры и результат метода
//%f _pas_MethodParams
: pas_MethodParams OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BE0CC0226for470F151302FD*
//	[(%S%f_pas_Params(%1))]\
 %IF-NOT-EMPTY
  '('
  %S %f pas_Params %( %1 )% ')' 
 %END-IF
//	[: %S%f_pas_ResultTypeName(%1)]
 %IF-NOT-EMPTY
  ': '
  %S %f pas_ResultTypeName %( %1 )% 
 %END-IF
//#UC END# *494BE0CC0226for470F151302FD*
; // pas_MethodParams


// Параметры и результат итератора
//%f _pas_IteratorParams
: pas_IteratorParams OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BE0DB007Afor470F151302FD*
//	(anAction: %f_pas_TypeName(%S%{Action})\
 '(anAction: '
 [%f] pas_TypeName %( %S ( get_object_var ( 'Action' ) )  )% 
//	[;\n#  %S%f_pas_Params(%1)])\
 %IF-NOT-EMPTY
  ';'#13#10
  out_indent '  '
  %S %f pas_Params %( %1 )% 
 %END-IF
 ')'
//	[{%S{needs result}=true}\
 %IF ( ( %S get_up ( 'needs result' ) ) %==  true ) 
//	: Integer\
  ': Integer'
//	]
 %END-IF
//#UC END# *494BE0DB007Afor470F151302FD*
; // pas_IteratorParams


// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor470F151302FD*
//	%S%f_pas_DoMethodInterface(%1,%2,%3)
 %S %f pas_DoMethodInterface %( %1 %, %2 %, %3 )% 
//#UC END# *494BEC6A038Afor470F151302FD*
; // pas_MethodInterface


// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for470F151302FD*
//	%S%f_pas_DoMethodImplementation(%1,%2,%3)
 %S %f pas_DoMethodImplementation %( %1 %, %2 %, %3 )% 
//#UC END# *494BEC7C03E5for470F151302FD*
; // pas_MethodImplementation


// выводит ключевое слова типа абстракности
// 
// RealizeType = o|r|f
// Modification = get|set|area|arearef
//%f _pas_AbstractionKeyword
: pas_AbstractionKeyword OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3
//#UC START# *494BF05502ACfor470F151302FD*
//@ %SU_%1N_%2N_%3N
//	[{%3N!=recall}{\
 %IF ( ( %3 |N ) %!= 'recall' ) 
  %ELSE
//	%f_delphi_overload(%S)\
   [%f] delphi_overload %( %S )% 
//	}\
  %THEN


//	[{"%1N"=""|%t_interface(%P)=true|%P#f_IsPureMixIn()=true}\
  %IF ( ( %1 |N ) %== '' %|| 
    ( ( [%t] interface %( %P )% ) %==  true  ) %|| 
    ( ( %P %?f IsPureMixIn %( )% ) %==  true  ) ) 
//	[{%S#f_IsFactory()=true|%P#f_IsFactory()=true}{\
   %IF ( ( %S %?f IsFactory %( )% ) %==  true %|| 
     ( ( %P %?f IsFactory %( )% ) %==  true  ) ) 
    %ELSE
//	[{%SN=Create|%PN=Create}\
     %IF ( ( %S |N ) %== 'Create' %|| 
       ( ( %P |N ) %== 'Create'  ) ) 
//	[{%S#f_IsConstructor()=true|%P#f_IsConstructor()=true} reintroduce;]\
      %IF ( ( %S %?f IsConstructor %( )% ) %==  true %|| 
        ( ( %P %?f IsConstructor %( )% ) %==  true  ) ) 
       ' reintroduce;' 
      %END-IF
//	]\
     %END-IF
//	}\
    %THEN
//	 reintroduce;\
    ' reintroduce;'
//	]\
   %END-IF
//	[%f_delphi_overload(%S) ]\
   %IF-NOT-EMPTY
    [%f] delphi_overload %( %S )% ' ' 
   %END-IF
//	]\
  %END-IF

//	"%1N"=""|%t_interface(%P)=true|%P#f_IsPureMixIn()=true


//	[{%S#f_IsGlobal()!=true}\
  %IF ( ( %S %?f IsGlobal %( )% ) %!=  true ) 
//	[{%P#f_IsContract()!=true}{\
   %IF ( ( %P %?f IsContract %( )% ) %!=  true ) 
    %ELSE
//	[{"%2N"="r"|"%1N"=""}{\
     %IF ( ( %2 |N ) %== 'r' %|| 
       ( ( %1 |N ) %== ''  ) ) 
      %ELSE
//	 override;\
       ' override;'
//	}\
      %THEN
//	 virtual; abstract;\
      ' virtual; abstract;'
//	]\
     %END-IF
//	}\
    %THEN
//	[{%t_interface(%P)!=true&%P#f_IsPureMixIn()!=true}{\
    %IF ( ( [%t] interface %( %P )% ) %!=  true %&& 
      ( ( %P %?f IsPureMixIn %( )% ) %!=  true  ) ) 
     %ELSE


//	[{"%1N"!=""&"%2N"="o"}\
      %IF ( ( %1 |N ) %!= '' %&& 
        ( ( %2 |N ) %== 'o'  ) ) 
//	%f_error("Метод %f_pas_FullMethodName(%S,%1,%2,%3) не может быть перекрыт")\
       [%f] error %( 'Метод '
       [%f] pas_FullMethodName %( %S %, %1 %, %2 %, %3 )% ' не может быть перекрыт' )% 
//	]}\
      %END-IF
     %THEN


//	[{"%1N"=""}{\
     %IF ( ( %1 |N ) %== '' ) 
      %ELSE
//	 override;}\
       ' override;' 
      %THEN

// - проверили, что это декларация обычного класса, и что метод не унаследован
//	[{%SS!=override}{\
      %IF ( ( %S |S ) %!= 'override' ) 
       %ELSE
//	 override;}\
        ' override;' 
       %THEN
//	[{%SS!=message}{\
       %IF ( ( %S |S ) %!= 'message' ) 
        %ELSE
//	 message %S{Message ID};}\
         ' message '
         %S get_up ( 'Message ID' ) ';' 
        %THEN
//	[{%Sa=abstract}{\
        %IF ( ( %S |a ) %== 'abstract' ) 
         %ELSE
//	[{%S%f_IsVirtual()=true} virtual;]}\
          %IF ( ( %S %f IsVirtual %( )% ) %==  true ) 
           ' virtual;' 
          %END-IF
         %THEN
//	 virtual; abstract;\
         ' virtual; abstract;'
//	]\
        %END-IF
//	]\
       %END-IF
//	]\
      %END-IF
//	]\
     %END-IF
//	]\
    %END-IF

//	%t_interface(%P)!=true&%P#f_IsPureMixIn()!=true


//	]\
   %END-IF
//	]\
  %END-IF

//	%S#f_IsGlobal()!=true


//	[{"%2N"!="o"}\
  %IF ( ( %2 |N ) %!= 'o' ) 
//	%S%f_pas_CallingConventionsDirective()\
   %S %f pas_CallingConventionsDirective %( )% 
//	]\
  %END-IF

//	"%2N"!="o"


//	]
 %END-IF
//#UC END# *494BF05502ACfor470F151302FD*
; // pas_AbstractionKeyword


// нет документации
//%f _pas_DoMethodInterface
: pas_DoMethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494FAB950174for470F151302FD*
//	[{%S#f_IsGlobal()=true}%f_shift_intend(-7)]\
 %IF ( ( %S %?f IsGlobal %( )% ) %==  true ) 
  [%f] shift_intend %( '-7' )% 
 %END-IF
//	[# %S%f_open_ifdef()\n]\
 %IF-NOT-EMPTY
  out_indent ' '
  %S %f open_ifdef %( )% #13#10 
 %END-IF
//	[{%S#f_IsAttribute()=true}{\
 %IF ( ( %S %?f IsAttribute %( )% ) %==  true ) 
  %ELSE
//	%f_pas_MethodSigInterface(%S,%1,%2,%3)\
   [%f] pas_MethodSigInterface %( %S %, %1 %, %2 %, %3 )% 
//	%S%f_pas_AbstractionKeyword(%1,%2,%3)\
   %S %f pas_AbstractionKeyword %( %1 %, %2 %, %3 )% 
// - выводим спецификатор абстрактности метода
//	[ // can raise <{, }%f_pas_TypeName(%E)>\
   %IF-NOT-EMPTY
    ' // can raise '
    %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
     [%f] pas_TypeName %( %E )% 
    %END-FOR
//	]\
   %END-IF

// - выводим список поднимаемых исключений
//	%f_set_var(METHOD_DOC,"")\
   [%f] set_var %( 'METHOD_DOC' %, '' )% 
//	[{%P#f_IsMethod()=true&"%PD"!=""}\
   %IF ( ( %P %?f IsMethod %( )% ) %==  true %&& 
     ( ( %P |D ) %!= ''  ) ) 
//	%f_set_var(METHOD_DOC,"%f_Doc(%P)")\
    [%f] set_var %( 'METHOD_DOC' %, [%f] Doc %( %P )% )% 
//	]\
   %END-IF


//	[{"%{METHOD_DOC}N"=""}\
   %IF ( ( ( get_global_var ( 'METHOD_DOC' ) |N ) ) %== '' ) 
//	%f_set_var(METHOD_DOC,"%f_Doc(%S)")\
    [%f] set_var %( 'METHOD_DOC' %, [%f] Doc %( %S )% )% 
//	]\
   %END-IF


//	[{"%{METHOD_DOC}N"!=""}\
   %IF ( ( ( get_global_var ( 'METHOD_DOC' ) |N ) ) %!= '' ) 
//	\n[{%S#f_IsGlobal()!=true}  ]\
    #13#10
    %IF ( ( %S %?f IsGlobal %( )% ) %!=  true ) 
     '  ' 
    %END-IF
//	   \{* %{METHOD_DOC}N \}\
    '   {* '
    ( get_global_var ( 'METHOD_DOC' ) |N ) ' }'
//	]\
   %END-IF
//	%f_set_var(METHOD_DOC,"")\
   [%f] set_var %( 'METHOD_DOC' %, '' )% 
// - выводим документацию метода
//	}%S%f_pas_PropertyMethodInterface(%1,%2,%3)\
  %THEN
  %S %f pas_PropertyMethodInterface %( %1 %, %2 %, %3 )% 
// - выводим методы от атрибута
//	]\
 %END-IF
//	[\n# %S%f_close_ifdef()]\
 %IF-NOT-EMPTY
  #13#10
  out_indent ' '
  %S %f close_ifdef %( )% 
 %END-IF
//	[{%S#f_IsGlobal()=true}%f_shift_intend(+7)]
 %IF ( ( %S %?f IsGlobal %( )% ) %==  true ) 
  [%f] shift_intend %( '+7' )% 
 %END-IF
//#UC END# *494FAB950174for470F151302FD*
; // pas_DoMethodInterface


// нет документации
//%f _pas_DoMethodImplementation
: pas_DoMethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494FABD00055for470F151302FD*
//	%f_shift_intend(-7)\
 [%f] shift_intend %( '-7' )% 
//	[{%S#f_IsFactory()=true&%P{singleton}=true}\
 %IF ( ( %S %?f IsFactory %( )% ) %==  true %&& 
   ( ( %P get_up ( 'singleton' ) ) %==  true  ) ) 
//	[{%t_interface(%T)!=true}%f_error("Неверный тип синглетона - %f_pas_TypeName(%T) в %f_pas_FullMethodName(%S,%1,%2,%3) ")]\
  %IF ( ( [%t] interface %( %T )% ) %!=  true ) 
   [%f] error %( 'Неверный тип синглетона - '
   [%f] pas_TypeName %( %T )% ' в '
   [%f] pas_FullMethodName %( %S %, %1 %, %2 %, %3 )% ' ' )% 
  %END-IF
//	%f_pas_OpenMethodImplementation(%S,%1,%2,%3)\
  [%f] pas_OpenMethodImplementation %( %S %, %1 %, %2 %, %3 )% 
//	var g_%f_pas_TypeName(%P,%1) : Pointer = nil;
  'var g_'
  [%f] pas_TypeName %( %P %, %1 )% ' : Pointer = nil;'
//	

//	procedure %f_pas_TypeName(%P,%1)Free;
  'procedure '
  [%f] pas_TypeName %( %P %, %1 )% 'Free;'
//	begin
  'begin'
//	 IUnknown(g_%f_pas_TypeName(%P,%1)) := nil;
  ' IUnknown(g_'
  [%f] pas_TypeName %( %P %, %1 )% ') := nil;'
//	end;
  'end;'
//	]\
 %END-IF
//	[{%Sa!=abstract|"%1N"!=""}\
 %IF ( ( %S |a ) %!= 'abstract' %|| 
   ( ( %1 |N ) %!= ''  ) ) 
//	[{%P#f_IsContract()!=true|"%2N"!="r"}\
  %IF ( ( %P %?f IsContract %( )% ) %!=  true %|| 
    ( ( %2 |N ) %!= 'r'  ) ) 

// - для абстрактных методов не генерируем реализацию
//	[{%S#f_IsAttribute()=true}{\
   %IF ( ( %S %?f IsAttribute %( )% ) %==  true ) 
    %ELSE
//	%f_pas_MethodSigImplementation(%S,%1,%2,%3)\
     [%f] pas_MethodSigImplementation %( %S %, %1 %, %2 %, %3 )% 
//	[ // can raise <{, }%f_pas_TypeName(%E)>]\
     %IF-NOT-EMPTY
      ' // can raise '
      %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
       [%f] pas_TypeName %( %E )% 
      %END-FOR
     %END-IF

// - выводим список поднимаемых исключений
//	%f_pas_MethodBody(%S,%1,%3,%2,%4)\
     [%f] pas_MethodBody %( %S %, %1 %, %3 %, %2 %, %4 )% 
// - выводим реализацию метода
//	[\n%S%f_close_ifdef()]\
     %IF-NOT-EMPTY
      #13#10
      %S %f close_ifdef %( )% 
     %END-IF
//	}%S%f_pas_PropertyMethodImplementation(%1,%2,%3)\
    %THEN
    %S %f pas_PropertyMethodImplementation %( %1 %, %2 %, %3 )% 
//	]\
   %END-IF
//	]\
  %END-IF
//	]\
 %END-IF
// - выводим методы от атрибута
//	]\
 ']'
//	endif{%S#f_IsAttribute()=true
//	%f_shift_intend(+7)
 [%f] shift_intend %( '+7' )% 
//#UC END# *494FABD00055for470F151302FD*
; // pas_DoMethodImplementation


// Определяет, что элемент может реализовываться классом
//%f _ClassImplementable
: ClassImplementable OBJECT IN %S
//#UC START# *49551CA202CFfor470F151302FD*
//@ %SU
//	[{%S#f_IsMixIn()!=true&%S#f_IsPureMixIn()!=true&%S#f_evd_IsSchemaElement()!=true&%S#f_IsVCMOperations()!=true}{false}true]
 %IF ( ( %S %?f IsMixIn %( )% ) %!=  true %&& 
   ( ( %S %?f IsPureMixIn %( )% ) %!=  true  ) %&& 
   ( ( %S %?f evd_IsSchemaElement %( )% ) %!=  true  ) %&& 
   ( ( %S %?f IsVCMOperations %( )% ) %!=  true  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *49551CA202CFfor470F151302FD*
; // ClassImplementable


// Определяет, что элемент является чистой примесью
//%f _IsPureMixIn
: IsPureMixIn OBJECT IN %S
//#UC START# *4977065602B3for470F151302FD*
//	false
 false
//#UC END# *4977065602B3for470F151302FD*
; // IsPureMixIn


// Определяет, что стереотип содержит хотя бы один VCM-контроллер среди своих детей
//%f _HasAnyVCMController
: HasAnyVCMController OBJECT IN %S
//#UC START# *497874AD00B1for470F151302FD*
//@ %SU
//	[{<{}{%C#f_IsVCMController()=true}{C}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C %?f IsVCMController %( )% ) %==  true ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *497874AD00B1for470F151302FD*
; // HasAnyVCMController


// Определяет, что стереотип содержит хотя бы один именованный VCM-контроллер среди своих детей
//%f _HasAnyNamedVCMController
: HasAnyNamedVCMController OBJECT IN %S
//#UC START# *4978770402B4for470F151302FD*
//@ %SU
//	[{<{}{%C#f_IsVCMController()=true&"%CN"!=""}{C}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C %?f IsVCMController %( )% ) %==  true %&& 
    ( ( %C |N ) %!= ''  ) ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4978770402B4for470F151302FD*
; // HasAnyNamedVCMController


// Определяет, что элемент является контролелром области вывода
//%f _IsViewAreaController
: IsViewAreaController OBJECT IN %S
//#UC START# *497DF8C8028Efor470F151302FD*
//	false
 false
//#UC END# *497DF8C8028Efor470F151302FD*
; // IsViewAreaController


// Определяет, что элемент является интерфейсом
//%f _IsInterface
: IsInterface OBJECT IN %S
//#UC START# *49809333028Cfor470F151302FD*
//	false
 false
//#UC END# *49809333028Cfor470F151302FD*
; // IsInterface


// Выводит родительский класс по-умолчанию
//%f _pas_OutDefaultAncestor
: pas_OutDefaultAncestor OBJECT IN %S
//#UC START# *4986B4FA0093for470F151302FD*
//	[{%S%f_IsMixIn()!=true}%S%f_pas_DefaultAncestor()]
 %IF ( ( %S %f IsMixIn %( )% ) %!=  true ) 
  %S %f pas_DefaultAncestor %( )% 
 %END-IF
//#UC END# *4986B4FA0093for470F151302FD*
; // pas_OutDefaultAncestor


// Выводит родительский класс
//%f _pas_OutAncestor
: pas_OutAncestor OBJECT IN %S
//#UC START# *4989EB520196for470F151302FD*
//	[{}{%S%f_pas_OutDefaultAncestor()}\
 %IF ( ) 
  %ELSE
   %S %f pas_OutDefaultAncestor %( )% 
  %THEN
//	%{PARENT}N]
  ( get_global_var ( 'PARENT' ) |N ) 
 %END-IF
//#UC END# *4989EB520196for470F151302FD*
; // pas_OutAncestor


// Выводит код перед поляпи класса. Для переопределения в потомках
//%f _pas_OutBeforeFields
: pas_OutBeforeFields OBJECT IN %S
//#UC START# *498B054F03A1for470F151302FD*
//	<{}{%C#f_IsPublishedAccess()=true&%C#f_IsMethod()!=true}[\n%CX]>
 %FOR %ITEM-CONDITION ( ( %C %?f IsPublishedAccess %( )% ) %==  true %&& 
   ( ( %C %?f IsMethod %( )% ) %!=  true  ) ) 
  %IF-NOT-EMPTY
   #13#10
   %C |X 
  %END-IF
 %END-FOR
//#UC END# *498B054F03A1for470F151302FD*
; // pas_OutBeforeFields


// Выводит код после секции implementation
//%f _pas_OutAfterUnitImplementation
: pas_OutAfterUnitImplementation OBJECT IN %S
//#UC START# *498B059101B3for470F151302FD*
//#UC END# *498B059101B3for470F151302FD*
; // pas_OutAfterUnitImplementation


// Разделитель имени метода
//%f _pas_MethodOwnerDelim
: pas_MethodOwnerDelim OBJECT IN %S
//#UC START# *4999789602FFfor470F151302FD*
//	.
 '.'
//#UC END# *4999789602FFfor470F151302FD*
; // pas_MethodOwnerDelim


// документация отсутствует
//%f _pas_AttrIndexes
: pas_AttrIndexes OBJECT IN %S
//#UC START# *49998CA903A8for470F151302FD*
//	<{; }%t_pas_InPrefix(%C%T)%CN: %f_pas_TypeName(%C%T)>
 %FOR %ITEM-SEPARATOR '; ' ; // %ITEM-SEPARATOR 
  [%t] pas_InPrefix %( %C ->T  )% %C |N ': '
  [%f] pas_TypeName %( %C ->T  )% 
 %END-FOR
//#UC END# *49998CA903A8for470F151302FD*
; // pas_AttrIndexes


// Выводит реализацию тела метода
//%f _pas_MethodBodyImplementation
: pas_MethodBodyImplementation OBJECT IN %S
//#UC START# *499A7D7E028Afor470F151302FD*
//	%S%f_Ind()\
 %S %f Ind %( )% 
//	%U[{_%f_pas_MethodOwnerID(%S,%1)%2N_impl}
 %U%IF ( '_( '
  [%f] pas_MethodOwnerID %( %S %, %1 )% ) ( %2 |N ) '_impl' ) 

//	%S%f_Ind()\
  %S %f Ind %( )% 
//	%S%f_pas_MethodStub(%1,%2)
  %S %f pas_MethodStub %( %1 %, %2 )% 
//	%S%f_Ind()\
  %S %f Ind %( )% 
//	]
 %END-IF
 //#UC END# *499A7D7E028Afor470F151302FD*
; // pas_MethodBodyImplementation


// Выводит имя владельца метода
//%f _pas_MethodOwnerName
: pas_MethodOwnerName OBJECT IN %S
//#UC START# *49CB3C99034Bfor470F151302FD*
//	%f_pas_TypeName(%S)
 [%f] pas_TypeName %( %S )% 
//#UC END# *49CB3C99034Bfor470F151302FD*
; // pas_MethodOwnerName


// Определяет, что элемент является "внутренностью" класса, атрибутом или операцией
//%f _IsClassInner
: IsClassInner OBJECT IN %S
//#UC START# *49CB3EE70382for470F151302FD*
//	[{%SC=Class}{true}false]
 %IF ( ( %S |C ) %== 'Class' ) 
  %ELSE
    true 
  %THEN
   false 
 %END-IF
//#UC END# *49CB3EE70382for470F151302FD*
; // IsClassInner


// Выводит секцию определений метода
//%f _pas_MethodDeclarations
: pas_MethodDeclarations OBJECT IN %S
//#UC START# *49CB54AA033Afor470F151302FD*
//	%S%f_Ind()\
 %S %f Ind %( )% 
//	%U[{_%f_pas_MethodOwnerID(%S,%1)%2N_var}\n\
 %U%IF ( '_( '
  [%f] pas_MethodOwnerID %( %S %, %1 )% ) ( %2 |N ) '_var' ) 
  #13#10
//	%S%f_Ind()\
  %S %f Ind %( )% 
//	]
 %END-IF
 //#UC END# *49CB54AA033Afor470F151302FD*
; // pas_MethodDeclarations


// Префикс типа
//%f _TypePrefix
: TypePrefix OBJECT IN %S
//#UC START# *49F5C7BD00B4for470F151302FD*
//#UC END# *49F5C7BD00B4for470F151302FD*
; // TypePrefix


// Суффикс типа
//%f _TypeSuffix
: TypeSuffix OBJECT IN %S
//#UC START# *49F5C87903C0for470F151302FD*
//#UC END# *49F5C87903C0for470F151302FD*
; // TypeSuffix


// Элемент попадает в секцию Published
//%f _IsPublishedAccess
: IsPublishedAccess OBJECT IN %S
//#UC START# *49F703730268for470F151302FD*
//	[{%S{isPublishedAccess}=true}{\
 %IF ( ( %S get_up ( 'isPublishedAccess' ) ) %==  true ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *49F703730268for470F151302FD*
; // IsPublishedAccess


// Определяет, что стереотип описывает область ввода (как составную часть прецедента)
//%f _IsVCMArea
: IsVCMArea OBJECT IN %S
//#UC START# *4A3665370285for470F151302FD*
//	false
 false
//#UC END# *4A3665370285for470F151302FD*
; // IsVCMArea


// Определяет, что это Link на область ввода, а не Reference
//%f _IsVCMAreaLink
: IsVCMAreaLink OBJECT IN %S
//#UC START# *4A37945D011Ffor470F151302FD*
//	false
 false
//#UC END# *4A37945D011Ffor470F151302FD*
; // IsVCMAreaLink


// Определяет, что стереотип является атрибутом
//%f _IsAttribute
: IsAttribute OBJECT IN %S
//#UC START# *4A37B6A9016Ffor470F151302FD*
//	[{%SC=Attribute}{false}true]
 %IF ( ( %S |C ) %== 'Attribute' ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4A37B6A9016Ffor470F151302FD*
; // IsAttribute


// Имеет ли стереотип хотя бы одну область ввода
//%f _HasAnyVCMArea
: HasAnyVCMArea OBJECT IN %S
//#UC START# *4A37C60A0273for470F151302FD*
//@ %SU
//	[{<{}{%R<{}{%CC=Class&%C#f_IsVCMArea()=true}{C}>!=0}{C}>!=0|<{}{%o#f_IsVCMArea()=true}{C}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %R
   %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Class' %&& 
     ( ( %C %?f IsVCMArea %( )% ) %==  true  ) ) 
    ( 'C' ) 
   %END-FOR
 )    %!= 0 ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 %|| 
   ( 
  %FOR %ITEM-CONDITION ( ( %o %?f IsVCMArea %( )% ) %==  true ) 
   ( 'C' ) 
  %END-FOR
  %!= 0  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4A37C60A0273for470F151302FD*
; // HasAnyVCMArea


// Имеет ли стереотип хотя бы одну ССЫЛКУ на область ввода
//%f _HasAnyVCMAreaLink
: HasAnyVCMAreaLink OBJECT IN %S
//#UC START# *4A37C6510297for470F151302FD*
//@ %SU
//	[{<{}{%o#f_IsVCMAreaLink()=true}{C}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %o %?f IsVCMAreaLink %( )% ) %==  true ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//	[{<{}{%R<{}{%CC=Class&%C#f_IsVCMAreaLink()=true}{C}>!=0}{C}>!=0|<{}{%o#f_IsVCMAreaLink()=true}{C}>!=0}{false}true]
//#UC END# *4A37C6510297for470F151302FD*
; // HasAnyVCMAreaLink


// Определяет, что метод должен быть реализован публично
//%f _IsPublicRealizedMethod
: IsPublicRealizedMethod OBJECT IN %S
// параметры: aMethod: void = %1
//#UC START# *4A42517502CEfor470F151302FD*
//	[{%1%P#f_IsPureMixIn()=true}{false}true]
 %IF ( ( %1 ->P %?f IsPureMixIn %( )%  ) %==  true ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4A42517502CEfor470F151302FD*
; // IsPublicRealizedMethod


// Определяет, что элемент является контролом
//%f _IsControl
: IsControl OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A794AED0078for470F151302FD*
//	false
 false
//#UC END# *4A794AED0078for470F151302FD*
; // IsControl


// Определяет - нужно ли определять поле данных для свойства.
//%f _pas_NeedsField
: pas_NeedsField OBJECT IN %S
//#UC START# *4A796BE403D6for470F151302FD*
//	[{%S#f_ReadsField()=true|%S{writes field}=true}{\
 %IF ( ( %S %?f ReadsField %( )% ) %==  true %|| 
   ( ( %S get_up ( 'writes field' ) ) %==  true  ) ) 
  %ELSE
//	[{%Sa=abstract}{\
   %IF ( ( %S |a ) %== 'abstract' ) 
    %ELSE
//	[{%S{needs field}=true}{\
     %IF ( ( %S get_up ( 'needs field' ) ) %==  true ) 
      %ELSE
//	false\
        false 
//	}\
      %THEN
//	true\
       true 
//	]\
     %END-IF
//	}\
    %THEN
//	false\
     false 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4A796BE403D6for470F151302FD*
; // pas_NeedsField


// выводит интерфейс методов для свойства
//%f _pas_PropertyMethodInterface
: pas_PropertyMethodInterface OBJECT IN %S
//#UC START# *4A7ADF400052for470F151302FD*
//	[{%TS!=Constants}\
 %IF ( ( %T |S ) %!= 'Constants' ) 
//	[# %S%f_open_ifdef()\n]\
  %IF-NOT-EMPTY
   out_indent ' '
   %S %f open_ifdef %( )% #13#10 
  %END-IF

// - не выводим атрибуты, указывающие на константы
//	[{%f_pas_NeedsGetter(%S)=true}\
  %IF ( ( [%f] pas_NeedsGetter %( %S )% ) %==  true ) 
//	%f_pas_MethodDefInterface(%S,%1,%2,"get")[(%S%f_pas_AttrIndexes())]: %S%f_pas_ResultTypeName();\
   [%f] pas_MethodDefInterface %( %S %, %1 %, %2 %, 'get' )% %IF-NOT-EMPTY
    '('
    %S %f pas_AttrIndexes %( )% ')' 
   %END-IF
   ': '
   %S %f pas_ResultTypeName %( )% ';'
//	%S%f_pas_AbstractionKeyword(%1,%2,"get")\
   %S %f pas_AbstractionKeyword %( %1 %, %2 %, 'get' )% 
// - выводим спецификатор абстрактности метода
//	]\
  %END-IF

// - выводим метод для чтения
//	[{%f_pas_NeedsSetter(%S)=true}\
  %IF ( ( [%f] pas_NeedsSetter %( %S )% ) %==  true ) 
//	[{%f_pas_NeedsGetter(%S)=true}\n]\
   %IF ( ( [%f] pas_NeedsGetter %( %S )% ) %==  true ) 
    #13#10 
   %END-IF
//	%f_pas_MethodDefInterface(%S,%1,%2,"set")([%S%f_pas_AttrIndexes(); ]%f_pas_InAttr(%S));\
   [%f] pas_MethodDefInterface %( %S %, %1 %, %2 %, 'set' )% '('
   %IF-NOT-EMPTY
    %S %f pas_AttrIndexes %( )% '; ' 
   %END-IF
   [%f] pas_InAttr %( %S )% ');'
//	%S%f_pas_AbstractionKeyword(%1,%2,"set")\
   %S %f pas_AbstractionKeyword %( %1 %, %2 %, 'set' )% 
// - выводим спецификатор абстрактности метода
//	]\
  %END-IF
//	[{%S#f_IsVCMArea()=true}\
  %IF ( ( %S %?f IsVCMArea %( )% ) %==  true ) 
//	[{"%1N"!=""}
   %IF ( ( %1 |N ) %!= '' ) 

//	%f_pas_MethodDefInterface(%S,%1,%2,"area")[(%S%f_pas_AttrIndexes())]: %S%f_pas_ResultTypeName();\
    [%f] pas_MethodDefInterface %( %S %, %1 %, %2 %, 'area' )% %IF-NOT-EMPTY
     '('
     %S %f pas_AttrIndexes %( )% ')' 
    %END-IF
    ': '
    %S %f pas_ResultTypeName %( )% ';'
//	%S%f_pas_AbstractionKeyword(%1,%2,"area")\
    %S %f pas_AbstractionKeyword %( %1 %, %2 %, 'area' )% 
//	[\n# %S%f_close_ifdef()]\
//	]\
   %END-IF
//	[{%S#f_IsVCMAreaLink()!=true}
   %IF ( ( %S %?f IsVCMAreaLink %( )% ) %!=  true ) 

//	%f_pas_MethodDefInterface(%S,%1,%2,"arearef")[(%S%f_pas_AttrIndexes())]: IvcmViewAreaControllerRef;\
    [%f] pas_MethodDefInterface %( %S %, %1 %, %2 %, 'arearef' )% %IF-NOT-EMPTY
     '('
     %S %f pas_AttrIndexes %( )% ')' 
    %END-IF
    ': IvcmViewAreaControllerRef;'
//	%S%f_pas_AbstractionKeyword(%1,%2,"arearef")\
    %S %f pas_AbstractionKeyword %( %1 %, %2 %, 'arearef' )% 
//	[\n# %S%f_close_ifdef()]\
//	]\
   %END-IF
//	]\
  %END-IF
//	[\n# %S%f_close_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   out_indent ' '
   %S %f close_ifdef %( )% 
  %END-IF

// -  выводим метод для записи
//	]
 %END-IF
//#UC END# *4A7ADF400052for470F151302FD*
; // pas_PropertyMethodInterface


// выводит реализацию методов для свойства
//%f _pas_PropertyMethodImplementation
: pas_PropertyMethodImplementation OBJECT IN %S
//#UC START# *4A7ADF4E0277for470F151302FD*
//	[{%TS!=Constants}\
 %IF ( ( %T |S ) %!= 'Constants' ) 

// - не выводим атрибуты, указывающие на константы
//	[{%f_pas_NeedsGetter(%S)=true}\
  %IF ( ( [%f] pas_NeedsGetter %( %S )% ) %==  true ) 
//	%f_pas_MethodDefImplementation(%S,%1,%2,"get")[(%S%f_pas_AttrIndexes())]: %S%f_pas_ResultTypeName();\
   [%f] pas_MethodDefImplementation %( %S %, %1 %, %2 %, 'get' )% %IF-NOT-EMPTY
    '('
    %S %f pas_AttrIndexes %( )% ')' 
   %END-IF
   ': '
   %S %f pas_ResultTypeName %( )% ';'
//	%f_pas_MethodBody(%S,%1,"get",%2)\
   [%f] pas_MethodBody %( %S %, %1 %, 'get"' %, %2 )% 
//	]\
  %END-IF

// - выводим метод для чтения
//	[{%f_pas_NeedsSetter(%S)=true}\
  %IF ( ( [%f] pas_NeedsSetter %( %S )% ) %==  true ) 
//	[{%f_pas_NeedsGetter(%S)=true}[\n%S%f_close_ifdef()]]\
   %IF ( ( [%f] pas_NeedsGetter %( %S )% ) %==  true ) 
    %IF-NOT-EMPTY
     #13#10
     %S %f close_ifdef %( )% 
    %END-IF
   %END-IF
//	%f_pas_MethodDefImplementation(%S,%1,%2,"set")([%S%f_pas_AttrIndexes(); ]%f_pas_InAttr(%S));\
   [%f] pas_MethodDefImplementation %( %S %, %1 %, %2 %, 'set' )% '('
   %IF-NOT-EMPTY
    %S %f pas_AttrIndexes %( )% '; ' 
   %END-IF
   [%f] pas_InAttr %( %S )% ');'
//	%f_pas_MethodBody(%S,%1,"set",%2)\
   [%f] pas_MethodBody %( %S %, %1 %, 'set"' %, %2 )% 
//	]\
  %END-IF
//	[{%S#f_IsVCMArea()=true}\
  %IF ( ( %S %?f IsVCMArea %( )% ) %==  true ) 
//	%f_pas_MethodDefImplementation(%S,%1,%2,"area")[(%S%f_pas_AttrIndexes())]: %S%f_pas_ResultTypeName();\
   [%f] pas_MethodDefImplementation %( %S %, %1 %, %2 %, 'area' )% %IF-NOT-EMPTY
    '('
    %S %f pas_AttrIndexes %( )% ')' 
   %END-IF
   ': '
   %S %f pas_ResultTypeName %( )% ';'
//	%f_pas_MethodBody(%S,%1,"area")\
   [%f] pas_MethodBody %( %S %, %1 %, 'area' )% 
//	[\n%S%f_close_ifdef()]\
   %IF-NOT-EMPTY
    #13#10
    %S %f close_ifdef %( )% 
   %END-IF
//	[{%S#f_IsVCMAreaLink()!=true}\
   %IF ( ( %S %?f IsVCMAreaLink %( )% ) %!=  true ) 
//	%f_pas_MethodDefImplementation(%S,%1,%2,"arearef")[(%S%f_pas_AttrIndexes())]: IvcmViewAreaControllerRef;\
    [%f] pas_MethodDefImplementation %( %S %, %1 %, %2 %, 'arearef' )% %IF-NOT-EMPTY
     '('
     %S %f pas_AttrIndexes %( )% ')' 
    %END-IF
    ': IvcmViewAreaControllerRef;'
//	%f_pas_MethodBody(%S,%1,"arearef")\
    [%f] pas_MethodBody %( %S %, %1 %, 'arearef' )% 
//	[\n%S%f_close_ifdef()]\
    %IF-NOT-EMPTY
     #13#10
     %S %f close_ifdef %( )% 
    %END-IF
//	]\
   %END-IF
//	]\
  %END-IF

// -  выводим метод для записи
//	[{%f_pas_NeedsGetter(%S)=true|%f_pas_NeedsSetter(%S)=true}\
  %IF ( ( [%f] pas_NeedsGetter %( %S )% ) %==  true %|| 
    ( ( [%f] pas_NeedsSetter %( %S )% ) %==  true  ) ) 
//	[\n%S%f_close_ifdef()]\
   %IF-NOT-EMPTY
    #13#10
    %S %f close_ifdef %( )% 
   %END-IF
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4A7ADF4E0277for470F151302FD*
; // pas_PropertyMethodImplementation


// документация отсутствует
//%f _pas_dump_Property
: pas_dump_Property OBJECT IN %S
//#UC START# *4A7ADFAE0118for470F151302FD*
//	[{%TS!=Constants}%f_shift_intend(-1)\
 %IF ( ( %T |S ) %!= 'Constants' ) 
  [%f] shift_intend %( -1 )% 
//	[#%S%f_open_ifdef()\n]\
  %IF-NOT-EMPTY
   out_indent %S %f open_ifdef %( )% #13#10 
  %END-IF
//	   property %S%f_pas_AttrName()[\[%S%f_pas_AttrIndexes()\]]: %S%f_pas_ResultTypeName()\
  '   property '
  %S %f pas_AttrName %( )% %IF-NOT-EMPTY
   '['
   %S %f pas_AttrIndexes %( )% ']' 
  %END-IF
  ': '
  %S %f pas_ResultTypeName %( )% 
//	[{%S#f_IsWriteOnlyProp()!=true}\n\
  %IF ( ( %S %?f IsWriteOnlyProp %( )% ) %!=  true ) 
   #13#10
//	     read [{%S#f_ReadsField()!=true}{%f_pas_FieldName(%S)}%S%f_pas_MethodName("get")]]\
   '     read '
   %IF ( ( %S %?f ReadsField %( )% ) %!=  true ) 
    %ELSE
     [%f] pas_FieldName %( %S )% 
    %THEN
    %S %f pas_MethodName %( 'get' )% 
   %END-IF
  %END-IF
//	[{%S#f_IsReadOnlyProp()!=true}\n\
  %IF ( ( %S %?f IsReadOnlyProp %( )% ) %!=  true ) 
   #13#10
//	     write [{%S{writes field}!=true}{%f_pas_FieldName(%S)}%S%f_pas_MethodName("set")]]\
   '     write '
   %IF ( ( %S get_up ( 'writes field' ) ) %!=  true ) 
    %ELSE
     [%f] pas_FieldName %( %S )% 
    %THEN
    %S %f pas_MethodName %( 'set' )% 
   %END-IF
  %END-IF

//	[\n     default %VN];\


//	[{%S{needs stored directive}=true}\
  %IF ( ( %S get_up ( 'needs stored directive' ) ) %==  true ) 
//	\n     stored %S%f_pas_AttrName()Stored\
   #13#10'     stored '
   %S %f pas_AttrName %( )% 'Stored'
//	]\
  %END-IF


//	[{"%VN"!=""}\n     default %S%f_OutValue()];\
  %IF ( ( %V |N ) %!= '' ) 
   #13#10'     default '
   %S %f OutValue %( )% 
  %END-IF
  ';'
//	[{%S{is default}=true}\n     default;]\
  %IF ( ( %S get_up ( 'is default' ) ) %==  true ) 
   #13#10'     default;' 
  %END-IF
//	[\n     \{* %f_Doc(%S) \}]\
  %IF-NOT-EMPTY
   #13#10'     {* '
   [%f] Doc %( %S )% ' }' 
  %END-IF
//	[{%S#f_IsVCMArea()=true&%S#f_IsVCMAreaLink()!=true}
  %IF ( ( %S %?f IsVCMArea %( )% ) %==  true %&& 
    ( ( %S %?f IsVCMAreaLink %( )% ) %!=  true  ) ) 

//	   property %SNRef[\[%S%f_pas_AttrIndexes()\]]: IvcmViewAreaControllerRef
   '   property '
   %S |N 'Ref'
   %IF-NOT-EMPTY
    '['
    %S %f pas_AttrIndexes %( )% ']' 
   %END-IF
   ': IvcmViewAreaControllerRef'
//	     read %S%f_pas_MethodName("arearef");\
   '     read '
   %S %f pas_MethodName %( 'arearef' )% ';'
//	[\n     \{* Ссылка на "%f_Doc(%S)" \}]\
   %IF-NOT-EMPTY
    #13#10'     {* Ссылка на "'
    [%f] Doc %( %S )% ' }' 
   %END-IF
//	]\
  %END-IF
//	[\n#%S%f_close_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   out_indent %S %f close_ifdef %( )% 
  %END-IF
//	%f_shift_intend(+1)]
  [%f] shift_intend %( 1 )% 
 %END-IF
//#UC END# *4A7ADFAE0118for470F151302FD*
; // pas_dump_Property


//%f _pas_BeforeClassEnd
: pas_BeforeClassEnd OBJECT IN %S
//#UC START# *4A9293AE02DCfor470F151302FD*
//#UC END# *4A9293AE02DCfor470F151302FD*
; // pas_BeforeClassEnd


//%f _pas_BeforeClassCloseIfDef
: pas_BeforeClassCloseIfDef OBJECT IN %S
//#UC START# *4A9293C601B6for470F151302FD*
//#UC END# *4A9293C601B6for470F151302FD*
; // pas_BeforeClassCloseIfDef


//%f _pas_TotalUses
: pas_TotalUses OBJECT IN %S
//#UC START# *4AA8B1D901E5for470F151302FD*
//	[{"%SS"!=""|"%SC"!=""}\
 %IF ( ( %S |S ) %!= '' %|| 
   ( ( %S |C ) %!= ''  ) ) 
//	[{%S%{INTOTAL}N!=1}\
  %IF ( ( %S ( get_object_var ( 'INTOTAL' ) |N )  ) %!= 1 ) 
//	%S%f_set_var(INTOTAL,"1")\
   %S %f set_var %( 'INTOTAL' %, 1 )% 
//	%f_add_to_list(TOTAL_USES,S)\
   [%f] add_to_list %( 'TOTAL_USES' %, 'S' )% 
//	[{"%SS"=""&"%SC"=""}{\


//	[{%SC!=Category|%S#f_IsTarget()=true}\
   %IF ( ( %S |C ) %!= 'Category' %|| 
     ( ( %S %?f IsTarget %( )% ) %==  true  ) ) 


//	<{}{%CS=uses&%CC=Dependency&%C{isHighPriority}=true}\
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'uses' %&& 
      ( ( %C |C ) %== 'Dependency'  ) %&& 
      ( ( %C get_up ( 'isHighPriority' ) ) %==  true  ) ) 
//	%C%T#f_pas_TotalUses()\
     %C ->T %?f pas_TotalUses %( )%  
//	>\
    %END-FOR


//	[{%S#f_IsAdapterTarget()=true}\
    %IF ( ( %S %?f IsAdapterTarget %( )% ) %==  true ) 
//	<{}{%DS=Library&%PU=%D%PU}\
     %FOR %ITEM-CONDITION ( ( %D |S ) %== 'Library' %&& 
       ( ( %P |U ) %== ( %D ->P |U  )  ) ) 
//	%D<{}{}\
      %D
      %FOR 
//	%C#f_pas_TotalUses()\
       %C %?f pas_TotalUses %( )% 
//	[{%C#f_IsUnit()=true}\
       %IF ( ( %C %?f IsUnit %( )% ) %==  true ) 
//	%C<{}{}\
        %C
        %FOR 
//	%C#f_pas_TotalUses()\
         %C %?f pas_TotalUses %( )% 
//	>\
        %END-FOR
 //	]\
       %END-IF
//	>\
      %END-FOR
 //	>\
     %END-FOR
//	]\
    %END-IF


//	<%D#f_pas_TotalUses()>\
    %FOR %D %?f pas_TotalUses %( )% 
    %END-FOR
//	<%w#f_pas_TotalUses()>\
    %FOR %w %?f pas_TotalUses %( )% 
    %END-FOR
//	<%G#f_pas_TotalUses()>\
    %FOR %G %?f pas_TotalUses %( )% 
    %END-FOR
//	<%R#f_pas_TotalUses()>\
    %FOR %R %?f pas_TotalUses %( )% 
    %END-FOR
//	<%O#f_pas_TotalUses()>\
    %FOR %O %?f pas_TotalUses %( )% 
    %END-FOR
//	<%o#f_pas_TotalUses()>\
    %FOR %o %?f pas_TotalUses %( )% 
    %END-FOR
//	[{%S#f_IsInterfaces()=true}\
    %IF ( ( %S %?f IsInterfaces %( )% ) %==  true ) 
//	<%C#f_pas_TotalUses()>\
     %FOR %C %?f pas_TotalUses %( )% 
     %END-FOR
//	]\
    %END-IF
//	[{%SS=TagTable}\
    %IF ( ( %S |S ) %== 'TagTable' ) 
//	<%C<{}{%LS=Wrapper}%L#f_pas_TotalUses()>>\
     %FOR %C
      %FOR %ITEM-CONDITION ( ( %L |S ) %== 'Wrapper' ) 
       %L %?f pas_TotalUses %( )% 
      %END-FOR
      %END-FOR
//	<%C<{}{%LS=InterfaceFactory}%L#f_pas_TotalUses()>>\
     %FOR %C
      %FOR %ITEM-CONDITION ( ( %L |S ) %== 'InterfaceFactory' ) 
       %L %?f pas_TotalUses %( )% 
      %END-FOR
      %END-FOR
//	<%C<{}{%LS=TagImplementator}%L%G#f_pas_TotalUses()\
     %FOR %C
      %FOR %ITEM-CONDITION ( ( %L |S ) %== 'TagImplementator' ) 
       %L ->G %?f pas_TotalUses %( )%  
//	%L#f_pas_TotalUses()>>\
       %L %?f pas_TotalUses %( )% 
      %END-FOR
      %END-FOR
//	]\
    %END-IF

//	%S#f_pas_IntfUses()\

//	%S#f_pas_ImplUses()\


//	[{%S#f_IsTest()=true}\
    %IF ( ( %S %?f IsTest %( )% ) %==  true ) 

// Сначала перебираем чужие тестовые библиотеки:
//	<{}{%DS=TestLibrary&%D%PU!=%PU}\
     %FOR %ITEM-CONDITION ( ( %D |S ) %== 'TestLibrary' %&& 
       ( ( %D ->P |U  ) %!= ( %P |U )  ) ) 
//	%D<{}{%CS=TestUnit}\
      %D
      %FOR %ITEM-CONDITION ( ( %C |S ) %== 'TestUnit' ) 
//	%C<{}{%CS=TestCase}\
       %C
       %FOR %ITEM-CONDITION ( ( %C |S ) %== 'TestCase' ) 
//	%C#f_pas_TotalUses()\
        %C %?f pas_TotalUses %( )% 
//	>\
       %END-FOR
 //	>\
      %END-FOR
 //	>\
     %END-FOR



// Потом перебираем свои тестовые библиотеки:
//	<{}{%DS=TestLibrary&%D%PU=%PU}\
     %FOR %ITEM-CONDITION ( ( %D |S ) %== 'TestLibrary' %&& 
       ( ( %D ->P |U  ) %== ( %P |U )  ) ) 
//	%D<{}{%CS=TestUnit}\
      %D
      %FOR %ITEM-CONDITION ( ( %C |S ) %== 'TestUnit' ) 
//	%C<{}{%CS=TestCase}\
       %C
       %FOR %ITEM-CONDITION ( ( %C |S ) %== 'TestCase' ) 
//	%C#f_pas_TotalUses()\
        %C %?f pas_TotalUses %( )% 
//	>\
       %END-FOR
 //	>\
      %END-FOR
 //	>\
     %END-FOR
//	]\
    %END-IF


//	<\
    %FOR 
//	[{%CS=uses&%CC=Dependency}{\
     %IF ( ( %C |S ) %== 'uses' %&& 
       ( ( %C |C ) %== 'Dependency'  ) ) 
      %ELSE
//	%C#f_pas_TotalUses()}\
       %C %?f pas_TotalUses %( )% 
      %THEN
//	%C%T#f_pas_TotalUses()\
      %C ->T %?f pas_TotalUses %( )%  
//	]\
     %END-IF
//	>\
    %END-FOR


//	]\
   %END-IF


//	[{%S#f_IsPureMixIn()!=true}\
   %IF ( ( %S %?f IsPureMixIn %( )% ) %!=  true ) 
//	[{"%So"!=""}{\
    %IF ( ( %S |o ) %!= '' ) 
     %ELSE
//	<%P#f_pas_TotalUses()>\
      %FOR %P %?f pas_TotalUses %( )% 
      %END-FOR
//	}\
     %THEN
//	%f_pas_PutToUses(%S)\
     [%f] pas_PutToUses %( %S )% 
//	]\
    %END-IF
//	]\
   %END-IF
//	<{}{%aC=Dependency&%aS=friend}{Sg}\
   %FOR %ITEM-CONDITION ( ( %a |C ) %== 'Dependency' %&& 
     ( ( %a |S ) %== 'friend'  ) ) 
    ( 'Sg' ) 
//	%f_pas_PutToUses(%a%P)\
    [%f] pas_PutToUses %( %a ->P  )% 

//	%a%P<\
    %a ->P
    %FOR 
//	%f_pas_PutToUses(%g)\
//	%g#f_pas_TotalUses()\
     %g %?f pas_TotalUses %( )% 
//	>\
    %END-FOR
  

//	%a%P<\
    %a ->P
    %FOR 
//	%f_pas_PutToUses(%r)\
//	%r#f_pas_TotalUses()\
     %r %?f pas_TotalUses %( )% 
//	>\
    %END-FOR
  

//	%a%P<{}{%CS=uses&%CC=Dependency}\
    %a ->P
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'uses' %&& 
      ( ( %C |C ) %== 'Dependency'  ) ) 
//	%C%T#f_pas_TotalUses()\
     %C ->T %?f pas_TotalUses %( )%  
//	%f_pas_PutToUses(%C%T)\
//	>\
    %END-FOR
  //	>\
   %END-FOR



//	}\

//	%f_pas_PutToUses(%S)\

//	]\
//	]\
  %END-IF
//	]
 %END-IF

//f _clear_TotalUses
; // pas_TotalUses

end. // "Delphi интерфейсы и реализация"

: clear_TotalUses OBJECT IN %S
//	%{TOTAL_USES}<%C%f_del_var(INTOTAL)>\
//	<{}{"%AC"!=""&%A%{INTOTAL}N=1}%A%f_set_var(INTOTAL,"")>\
//	%{TOTAL_USES}<{}{"%CC"!=""}%C%f_set_var(INTOTAL,"")>\
 ( get_global_var ( 'TOTAL_USES' ) ) 
 %FOR %ITEM-CONDITION ( ( %C |C ) %!= '' ) 
  %C %f set_var %( 'INTOTAL' %, '' )% 
 %END-FOR
//	%f_clear_list(TOTAL_USES)\
 [%f] clear_list %( 'TOTAL_USES' )% 
//	%f_clear_USED_UNITS(%S)
 [%f] clear_USED_UNITS %( %S )% 
//#UC END# *4AA8B1D901E5for470F151302FD*
; // clear_TotalUses


// Читаем ли из поля
//%f _ReadsField
implementation @ "Delphi интерфейсы и реализация"
: ReadsField OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4ACB78A4017Ffor470F151302FD*
//	[{%S{reads field}=true}{false}true]
 %IF ( ( %S get_up ( 'reads field' ) ) %==  true ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4ACB78A4017Ffor470F151302FD*
; // ReadsField


// Пишем ли в поле
//%f _WritesField
: WritesField OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4ACB78D500C2for470F151302FD*
//#UC END# *4ACB78D500C2for470F151302FD*
; // WritesField


//%f _IsConstructor
: IsConstructor OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE025440082for470F151302FD*
//	[{%SS=ctor|%SS=vctor}{false}true]
 %IF ( ( %S |S ) %== 'ctor' %|| 
   ( ( %S |S ) %== 'vctor'  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4AE025440082for470F151302FD*
; // IsConstructor


//%f _IsFactory
: IsFactory OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE026A90143for470F151302FD*
//	false
 false
//#UC END# *4AE026A90143for470F151302FD*
; // IsFactory


//%f _pas_VCMFormFactoryParams
: pas_VCMFormFactoryParams OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4AE062A601E1for470F151302FD*
//	[{%S%f_IsMakeSingleChild()=true}\
 %IF ( ( %S %f IsMakeSingleChild %( )% ) %==  true ) 
//	\n#  const aCont   : IvcmContainer;\
  #13#10
  out_indent '  const aCont   : IvcmContainer;'
//	[{%S%f_NeedAggregate()=true}\
  %IF ( ( %S %f NeedAggregate %( )% ) %==  true ) 
//	\n#  const anAgg   : IvcmAggregate;\
   #13#10
   out_indent '  const anAgg   : IvcmAggregate;'
//	]\
  %END-IF
//	]\
 %END-IF

//	[{%S%f_IsMakeSingleChild()!=true}\
 %IF ( ( %S %f IsMakeSingleChild %( )% ) %!=  true ) 
//	\n#  const aParams : IvcmMakeParams = nil;\
  #13#10
  out_indent '  const aParams : IvcmMakeParams = nil;'
//	]
 %END-IF
//	#  aZoneType     : TvcmZoneType = vcm_ztAny;
 out_indent '  aZoneType     : TvcmZoneType = vcm_ztAny;'
//	#  aUserType     : TvcmEffectiveUserType = 0\
 out_indent '  aUserType     : TvcmEffectiveUserType = 0'
//	[{%S#f_FirstParamIsViewAreaController()!=true};
 %IF ( ( %S %?f FirstParamIsViewAreaController %( )% ) %!=  true ) 
  ';'
//	#  aDataSource   : IvcmFormDataSource = nil]
  out_indent '  aDataSource   : IvcmFormDataSource = nil' 
 %END-IF
//#UC END# *4AE062A601E1for470F151302FD*
; // pas_VCMFormFactoryParams


// Есть ли у операции параметры
//%f _HasParams
: HasParams OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE065E20005for470F151302FD*
//@ %SU
//	[{%Cx=true}{false}true]
 %IF ( ( %C |x ) %==  true ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4AE065E20005for470F151302FD*
; // HasParams


//%f _OutCallParams
: OutCallParams OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4AE066F202E2for470F151302FD*
//	[(<{, }%CN>)]
 %IF-NOT-EMPTY
  '('
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %C |N 
  %END-FOR
  ')' 
 %END-IF
//#UC END# *4AE066F202E2for470F151302FD*
; // OutCallParams


// Нужно ли очищать поля объекта
//%f _NeedCleanupFields
: NeedCleanupFields OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE06FBA02FEfor470F151302FD*
//@ %SU
//	[{%S%f_IsSimpleClass()=true|%S%f_IsMixIn()=true}{\
 %IF ( ( %S %f IsSimpleClass %( )% ) %==  true %|| 
   ( ( %S %f IsMixIn %( )% ) %==  true  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	[{<{}{%C#f_IsFieldForCleanup()=true}{C}>!=0}{false}true]\
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %C %?f IsFieldForCleanup %( )% ) %==  true ) 
    ( 'C' ) 
   %END-FOR
   %!= 0 ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
//	]
 %END-IF
//#UC END# *4AE06FBA02FEfor470F151302FD*
; // NeedCleanupFields


//%f _IsStereoForCleanup
: IsStereoForCleanup OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE0713E0081for470F151302FD*
//	[{%S%f_IsAttribute()=true&%S%t_IsStereoForCleanup()=true}{false}true]
 %IF ( ( %S %f IsAttribute %( )% ) %==  true %&& 
   ( ( %S %t IsStereoForCleanup %( )% ) %==  true  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4AE0713E0081for470F151302FD*
; // IsStereoForCleanup


//%f _IsFieldForCleanup
: IsFieldForCleanup OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4AE0738A0004for470F151302FD*
//@ %SU
//	[{%Sl=ref&%S%f_IsStereoForCleanup()=true&%S%T#t_IsTypeForCleanup()=true}{false}true]
 %IF ( ( %S |l ) %== 'ref' %&& 
   ( ( %S %f IsStereoForCleanup %( )% ) %==  true  ) %&& 
   ( ( %S ->T %?t IsTypeForCleanup %( )%  ) %==  true  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4AE0738A0004for470F151302FD*
; // IsFieldForCleanup


//%f _pas_AfterClassEnd
: pas_AfterClassEnd OBJECT IN %S
//#UC START# *4B17BC05001Efor470F151302FD*
//#UC END# *4B17BC05001Efor470F151302FD*
; // pas_AfterClassEnd


//%f _DoSpell
: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor470F151302FD*
//	[{%S#f_IsInterface()!=true&%S#f_IsVCMFormSetFactory()!=true&%S#f_IsVCMZone()!=true}\
 %IF ( ( %S %?f IsInterface %( )% ) %!=  true %&& 
   ( ( %S %?f IsVCMFormSetFactory %( )% ) %!=  true  ) %&& 
   ( ( %S %?f IsVCMZone %( )% ) %!=  true  ) ) 
//	%f_set_var(PARENT_CLASS,S)\
  [%f] set_var %( 'PARENT_CLASS' %, 'S' )% 
//	<{}{%P#f_IsControl()!=true}\

//	%f_set_var(PARENT_CLASS,P)\

//	%f_cycle_break(%S)\

//	>\


//	<{}{%o#f_IsVCMAreaLink()=true}\
  %FOR %ITEM-CONDITION ( ( %o %?f IsVCMAreaLink %( )% ) %==  true ) 
//	[{"%{IvcmViewAreaControllerRef}N"=""}%f_find_element(IvcmViewAreaControllerRef,IvcmViewAreaControllerRef)]\
   %IF ( ( ( get_global_var ( 'IvcmViewAreaControllerRef' ) |N ) ) %== '' ) 
    [%f] find_element %( 'IvcmViewAreaControllerRef' %, 'IvcmViewAreaControllerRef' )% 
   %END-IF
//	%{PARENT_CLASS}%f_make_accessable(%{IvcmViewAreaControllerRef}U)\
   ( get_global_var ( 'PARENT_CLASS' ) %f make_accessable %( ( get_global_var ( 'IvcmViewAreaControllerRef' ) |U ) )% ) 
//	%{PARENT_CLASS}%f_add_attribute(%oU_AutoField,,\
   ( get_global_var ( 'PARENT_CLASS' ) %f add_attribute %( %o |U '_AutoField' %, '' %, 
//	f_%oN: %{IvcmViewAreaControllerRef}U,\
   'f_'
   %o |N ': '
   ( get_global_var ( 'IvcmViewAreaControllerRef' ) |U ) %, 
//	Attr_Inst)\
   'Attr_Inst' )% ) 
//	%{Attr_Inst}%f_set_link_type(ref)\
   ( get_global_var ( 'Attr_Inst' ) %f set_link_type %( 'ref' )% ) 
//	%{Attr_Inst}%f_set_abstraction_type(final)\
//	%{Attr_Inst}%f_set_visibility_type(PrivateAccess)\
   ( get_global_var ( 'Attr_Inst' ) %f set_visibility_type %( 'PrivateAccess' )% ) 
//	%{Attr_Inst}%f_set_up(ifdef,%o{ifdef})\
   ( get_global_var ( 'Attr_Inst' ) %f set_up %( 'ifdef' %, %o get_up ( 'ifdef' ) )% ) 
//	%{Attr_Inst}%f_set_up(ifndef,%o{ifndef})\
   ( get_global_var ( 'Attr_Inst' ) %f set_up %( 'ifndef' %, %o get_up ( 'ifndef' ) )% ) 
//	%{Attr_Inst}%f_set_applied_gen(cpp,false)\
   ( get_global_var ( 'Attr_Inst' ) %f set_applied_gen %( 'cpp' %, false )% ) 
//	%{Attr_Inst}%f_set_applied_gen(h,false)\
   ( get_global_var ( 'Attr_Inst' ) %f set_applied_gen %( 'h' %, false )% ) 
//	%{Attr_Inst}%f_set_documentation(Поле для области вывода %oN)\
   ( get_global_var ( 'Attr_Inst' ) %f set_documentation %( 'Поле для области вывода '
   %o |N )% ) 
//	>\
  %END-FOR
//	]
 %END-IF
//#UC END# *4B2A19E3038Bfor470F151302FD*
; // DoSpell


//%f _pas_BeforeCloseUnit
: pas_BeforeCloseUnit OBJECT IN %S
//#UC START# *4B2A253F0051for470F151302FD*
//#UC END# *4B2A253F0051for470F151302FD*
; // pas_BeforeCloseUnit


//%f _IsMethod
: IsMethod OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B2A29440092for470F151302FD*
//	false
 false
//#UC END# *4B2A29440092for470F151302FD*
; // IsMethod


//%f _IsExeTarget
: IsExeTarget OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B2A4565034Dfor470F151302FD*
//	false
 false
//#UC END# *4B2A4565034Dfor470F151302FD*
; // IsExeTarget


// Определяет, что элемент является секцией инициализации
//%f _IsIni
: IsIni OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B38844D0399for470F151302FD*
//	false
 false
//#UC END# *4B38844D0399for470F151302FD*
; // IsIni


// Определяет, что элемент является секцией финализации
//%f _IsFini
: IsFini OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B388478009Ffor470F151302FD*
//	false
 false
//#UC END# *4B388478009Ffor470F151302FD*
; // IsFini


// Выводит секции инициализации
//%f _pas_OutIni
: pas_OutIni OBJECT IN %S
//#UC START# *4B3886890063for470F151302FD*
//	<\
 %FOR 
//	[{%C#f_IsIni()=true}{\
  %IF ( ( %C %?f IsIni %( )% ) %==  true ) 
   %ELSE
//	[{%f_pas_IsSameUnit(%S,%C)=true}\
    %IF ( ( [%f] pas_IsSameUnit %( %S %, %C )% ) %==  true ) 
//	%C#f_pas_OutIni()\
     %C %?f pas_OutIni %( )% 
//	]\
    %END-IF
//	}\
   %THEN
//	%C#f_pas_OutIniFiniImpl()\
   %C %?f pas_OutIniFiniImpl %( )% 
//	]\
  %END-IF
//	>
 %END-FOR
//#UC END# *4B3886890063for470F151302FD*
; // pas_OutIni


// Выводит секции финализации
//%f _pas_OutFini
: pas_OutFini OBJECT IN %S
//#UC START# *4B3886C50247for470F151302FD*
//	<\
 %FOR 
//	[{%C#f_IsFini()=true}{\
  %IF ( ( %C %?f IsFini %( )% ) %==  true ) 
   %ELSE
//	[{%f_pas_IsSameUnit(%S,%C)=true}\
    %IF ( ( [%f] pas_IsSameUnit %( %S %, %C )% ) %==  true ) 
//	%C#f_pas_OutFini()\
     %C %?f pas_OutFini %( )% 
//	]\
    %END-IF
//	}\
   %THEN
//	%C#f_pas_OutIniFiniImpl()\
   %C %?f pas_OutIniFiniImpl %( )% 
//	]\
  %END-IF
//	>
 %END-FOR
//#UC END# *4B3886C50247for470F151302FD*
; // pas_OutFini


// Выводит реализацию секции инициализации/финализации
//%f _pas_OutIniFiniImpl
: pas_OutIniFiniImpl OBJECT IN %S
//#UC START# *4B3898EB0368for470F151302FD*
//	\n\
 #13#10
//	[%S#f_open_ifdef()\n]\
 %IF-NOT-EMPTY
  %S %?f open_ifdef %( )% #13#10 
 %END-IF
//	%f_pas_CloseDefinitions(%S)\
 [%f] pas_CloseDefinitions %( %S )% 
//	%f_pas_OpenMethodImplementation(%S)\
//	[// %f_Doc(%S)\n]\
 %IF-NOT-EMPTY
  '// '
  [%f] Doc %( %S )% #13#10 
 %END-IF
//	%f_with_gen_id(intf.pas,%U[\n])\
 [%f] with_gen_id %( 'intf.pas' %, %U%IF-NOT-EMPTY
  #13#10 
 %END-IF
 )% //	%f_set_var(WAS_METHOD,"1")\
 [%f] set_var %( 'WAS_METHOD' %, 1 )% 
//	[\n%S#f_close_ifdef()]
 %IF-NOT-EMPTY
  #13#10
  %S %?f close_ifdef %( )% 
 %END-IF
//#UC END# *4B3898EB0368for470F151302FD*
; // pas_OutIniFiniImpl


//%f _IsDataModule
: IsDataModule OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B5D68660386for470F151302FD*
//	false
 false
//#UC END# *4B5D68660386for470F151302FD*
; // IsDataModule


//%f _IsStaticObject
: IsStaticObject OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B6C3C5C01FCfor470F151302FD*
//	false
 false
//#UC END# *4B6C3C5C01FCfor470F151302FD*
; // IsStaticObject


// Стереотип является структурой
//%f _IsStruct
: IsStruct OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B6C49DA0023for470F151302FD*
//	false
 false
//#UC END# *4B6C49DA0023for470F151302FD*
; // IsStruct


//%f _pas_BeforeMethodBodyImplementation
: pas_BeforeMethodBodyImplementation OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2
// возвращаемый результат: a-string
//#UC START# *4B6C4DE70271for470F151302FD*
//#UC END# *4B6C4DE70271for470F151302FD*
; // pas_BeforeMethodBodyImplementation


//%f _pas_StaticCtorBeforeMethodBodyImplementation
: pas_StaticCtorBeforeMethodBodyImplementation OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2
// возвращаемый результат: a-string
//#UC START# *4B6C4E2903C5for470F151302FD*
//	 System.FillChar(Result, SizeOf(Result), 0);\n
 ' System.FillChar(Result, SizeOf(Result), 0);'#13#10
//#UC END# *4B6C4E2903C5for470F151302FD*
; // pas_StaticCtorBeforeMethodBodyImplementation


// Определяет, что элемент конечной модели является наследником от aClassName
//%f _InheritsFrom
: InheritsFrom OBJECT IN %S
// параметры: aClassName: a-string = %1
// возвращаемый результат: boolean
//#UC START# *4B704DE10322for470F151302FD*
//@ %SU%1N
//	[{%f_pas_TypeName(%S)=%1N}{\
 %IF ( ( [%f] pas_TypeName %( %S )% ) %== ( %1 |N ) ) 
  %ELSE
//	[{<{}{%G#f_InheritsFrom(%1)=true}{C}>!=0}{\
   %IF ( 
    %FOR %ITEM-CONDITION ( ( %G %?f InheritsFrom %( %1 )% ) %==  true ) 
     ( 'C' ) 
    %END-FOR
    %!= 0 ) 
    %ELSE
//	false\
      false 
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4B704DE10322for470F151302FD*
; // InheritsFrom


// Выводит пролог для _l3Items_
//%f _OutL3ItemsPrologue
: OutL3ItemsPrologue OBJECT IN %S
// параметры: anAncestor: void = %1, aWasVarName: a-string = %2
//#UC START# *4B70554F0038for470F151302FD*
//	[{%{%2N}N!=true}\
 %IF ( ( ( get_global_var ( %2 |N ) |N ) ) %!=  true ) 
//	%f_set_var(%2N,"true")\
  [%f] set_var %( %2 |N %, true )% 
//	[{%S%f_InheritsFrom("Tl3ProtoObject")=true&%1#f_InheritsFrom("_l3Items_")=true}\
  %IF ( ( %S %f InheritsFrom %( 'Tl3ProtoObject' )% ) %==  true %&& 
    ( ( %1 %?f InheritsFrom %( '_l3Items_' )% ) %==  true  ) ) 
//	 \{$Define l3Items_IsProto\}\n\
   ' {$Define l3Items_IsProto}'#13#10
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4B70554F0038for470F151302FD*
; // OutL3ItemsPrologue


//%f _IsAdapterTarget
: IsAdapterTarget OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B72CB6A01CAfor470F151302FD*
//	false
 false
//#UC END# *4B72CB6A01CAfor470F151302FD*
; // IsAdapterTarget


//%f _IsTarget
: IsTarget OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B72CBF50223for470F151302FD*
//	[{%S#f_IsVCMGUI()=true|%S%f_IsExeTarget()=true|%S%f_IsAdapterTarget()=true}{false}true]
 %IF ( ( %S %?f IsVCMGUI %( )% ) %==  true %|| 
   ( ( %S %f IsExeTarget %( )% ) %==  true  ) %|| 
   ( ( %S %f IsAdapterTarget %( )% ) %==  true  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4B72CBF50223for470F151302FD*
; // IsTarget


//%f _ImplementedInlinesCount
: ImplementedInlinesCount OBJECT IN %S
// возвращаемый результат: integer
//#UC START# *4B8908F2014Bfor470F151302FD*
//@ %SU
//	%f_evaluate(<{}{%oS=inline}{C}>+<{}{%OS=inline}{C}>)
 [%f] evaluate %( 
 %FOR %ITEM-CONDITION ( ( %o |S ) %== 'inline' ) 
  ( 'C' ) 
 %END-FOR
 '+'
 %FOR %ITEM-CONDITION ( ( %O |S ) %== 'inline' ) 
  ( 'C' ) 
 %END-FOR
)% //#UC END# *4B8908F2014Bfor470F151302FD*
; // ImplementedInlinesCount


// Выводит значение (атрибута, константы, параметра)
//%f _OutValue
: OutValue OBJECT IN %S
//#UC START# *4B8FB23D01E8for470F151302FD*
//	[{"%S%VN"!=""}{\
 %IF ( ( %S ->V |N  ) %!= '' ) 
  %ELSE


//	[{%SS=static}\
   %IF ( ( %S |S ) %== 'static' ) 
//	[{%TS=Typedef&%T{isClassRef}=true}{\
    %IF ( ( %T |S ) %== 'Typedef' %&& 
      ( ( %T get_up ( 'isClassRef' ) ) %==  true  ) ) 
     %ELSE
//	[{%TS=Function}{\
      %IF ( ( %T |S ) %== 'Function' ) 
       %ELSE
//	[{%f_pas_TypeName(%T)=Boolean}\
        %IF ( ( [%f] pas_TypeName %( %T )% ) %== 'Boolean' ) 
//	false\
          false 
//	]\
        %END-IF
//	}\
       %THEN
//	nil\
       'nil'
//	]\
      %END-IF
//	}\
     %THEN
//	nil\
     'nil'
//	]\
    %END-IF
//	]\
   %END-IF


//	}\
  %THEN
//	[{%S{is define}=true&"%f_pas_TypeName(%S%T)"!=""}\
  %IF ( ( %S get_up ( 'is define' ) ) %==  true %&& 
    ( ( [%f] pas_TypeName %( %S ->T  )% ) %!= ''  ) ) 
//	%f_pas_TypeName(%S%T)(\
   [%f] pas_TypeName %( %S ->T  )% '('
//	]\
  %END-IF


//	[{%S{is define}!=true}\
  %IF ( ( %S get_up ( 'is define' ) ) %!=  true ) 
//	[{%S{no unit prefix}!=true}\
   %IF ( ( %S get_up ( 'no unit prefix' ) ) %!=  true ) 
//	[{%S%T#f_IsSimpleClass()!=true&%t_interface(%S%T)!=true&%S%TS!=Vector&%TS!=Typedef&%T#f_IsStruct()!=true}\
    %IF ( ( %S ->T %?f IsSimpleClass %( )%  ) %!=  true %&& 
      ( ( [%t] interface %( %S ->T  )% ) %!=  true  ) %&& 
      ( ( %S ->T |S  ) %!= 'Vector'  ) %&& 
      ( ( %T |S ) %!= 'Typedef'  ) %&& 
      ( ( %T %?f IsStruct %( )% ) %!=  true  ) ) 


//	[{%f_pas_IsSameUnit(%S,%S%V%T)!=true}\
     %IF ( ( [%f] pas_IsSameUnit %( %S %, %S ->V ->T   )% ) %!=  true ) 
//	[%f_pas_Unit(%S%V%T).]\
      %IF-NOT-EMPTY
       [%f] pas_Unit %( %S ->V ->T   )% '.' 
      %END-IF
//	]\
     %END-IF


//	]\
    %END-IF
//	]\
   %END-IF

//	{%S{no unit prefix}!=true}
//	]\
  %END-IF

//	{%S{is define}!=true


//	[{"%S%V%TN"!=""}{\
  %IF ( ( %S ->V ->T |N   ) %!= '' ) 
   %ELSE
//	%S%T#f_pas_ElementPrefix()\
    %S ->T %?f pas_ElementPrefix %( )%  
//	}\
   %THEN
//	%S%V%T#f_pas_ElementPrefix()\
   %S ->V ->T %?f pas_ElementPrefix %( )%   
//	]\
  %END-IF


//	[{%f_substr_from_begin(%S%VN,2)=0x}{\
  %IF ( ( [%f] substr_from_begin %( %S ->V |N  %, 2 )% ) %== 0 'x' ) 
   %ELSE
//	%S%VN\
    %S ->V |N  
//	}\
   %THEN
//	$%f_delsubstr_from_begin(%S%VN,2)\
   '$'
   [%f] delsubstr_from_begin %( %S ->V |N  %, 2 )% 
//	]\
  %END-IF


//	[ %S{suffix expr}]\
  %IF-NOT-EMPTY
   ' '
   %S get_up ( 'suffix expr' ) 
  %END-IF


//	[{%S{is define}=true&"%f_pas_TypeName(%S%T)"!=""}\
  %IF ( ( %S get_up ( 'is define' ) ) %==  true %&& 
    ( ( [%f] pas_TypeName %( %S ->T  )% ) %!= ''  ) ) 
//	)\
   ')'
//	]\
  %END-IF


//	]
 %END-IF
//#UC END# *4B8FB23D01E8for470F151302FD*
; // OutValue


// Определяет реализует ли элемент указанный фасет/интерфейс
//%f _Implements
: Implements OBJECT IN %S
// параметры: aFacet: MDAClass = %1
// возвращаемый результат: boolean
//#UC START# *4BA3925D035Cfor470F151302FD*
//@ %SU%1U
//	[{%1S=Typedef}{\
 %IF ( ( %1 |S ) %== 'Typedef' ) 
  %ELSE
//	[{<{}{%RU=%1U}{C}>!=0}{\
   %IF ( 
    %FOR %ITEM-CONDITION ( ( %R |U ) %== ( %1 |U ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0 ) 
    %ELSE
//	%S%f_SomeAncestorImplements(%1)\
     %S %f SomeAncestorImplements %( %1 )% 
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	%S%f_Implements(%1%G)\
  %S %f Implements %( %1 ->G  )% 
//	]
 %END-IF
//#UC END# *4BA3925D035Cfor470F151302FD*
; // Implements


// Кто-то из предков (но не сам элемент) реализует указанный фасет
//%f _SomeAncestorImplements
: SomeAncestorImplements OBJECT IN %S
// параметры: aFacet: MDAClass = %1
// возвращаемый результат: boolean
//#UC START# *4BA3AF160024for470F151302FD*
//@ %SU%1U
//	[{<{}{%G#f_Implements(%1)=true}{C}>!=0}{\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %G %?f Implements %( %1 )% ) %==  true ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
//	[{<{}{%R#f_IsMixIn()=true&%R#f_Implements(%1)=true}{C}>!=0}{\
   %IF ( 
    %FOR %ITEM-CONDITION ( ( %R %?f IsMixIn %( )% ) %==  true %&& 
      ( ( %R %?f Implements %( %1 )% ) %==  true  ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0 ) 
    %ELSE
//	false\
      false 
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4BA3AF160024for470F151302FD*
; // SomeAncestorImplements


// Реализация Spell'а для итератора
//%f _IteratorSpell
: IteratorSpell OBJECT IN %S
//#UC START# *4BA884DD00A7for470F151302FD*
//	[{%SC!=Class|%Cx=true}\
 %IF ( ( %S |C ) %!= 'Class' %|| 
   ( ( %C |x ) %==  true  ) ) 
//	[{%S#f_IsOverride()!=true}\
  %IF ( ( %S %?f IsOverride %( )% ) %!=  true ) 

//	- это чтобы C++ не сломать


//	[{%SC=Class}{\
   %IF ( ( %S |C ) %== 'Class' ) 
    %ELSE
//	%f_set_var(ELEMENT_TYPE,T)\
     [%f] set_var %( 'ELEMENT_TYPE' %, 'T' )% 
//	}\
    %THEN
//	<{}{%CS=element type}%f_set_var(ELEMENT_TYPE,C%T)>\
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'element type' ) 
     [%f] set_var %( 'ELEMENT_TYPE' %, 'C'
     %T )% 
    %END-FOR
//	]\
   %END-IF



//	[{"%{ELEMENT_TYPE}S"="ImpurityParamType"}\

//	%f_warning("%{%{ELEMENT_TYPE}N}U")\

//	%f_set_var(ELEMENT_TYPE,{%{ELEMENT_TYPE}N})\

//	]\


//	%P%f_add_class(%SU_Action,Function,%PN_%SN_Action,Action_Inst)\
   %P %f add_class %( %S |U '_Action' %, 'Function' %, %P |N '_'
   %S |N '_Action' %, 'Action_Inst' )% 
//	%{Action_Inst}%f_set_visibility_type(PublicAccess)\
   ( get_global_var ( 'Action_Inst' ) %f set_visibility_type %( 'PublicAccess' )% ) 
//	%{Action_Inst}%f_set_documentation(Тип подитеративной функции для %PN.%SN)\
   ( get_global_var ( 'Action_Inst' ) %f set_documentation %( 'Тип подитеративной функции для '
   %P |N '.'
   %S |N )% ) 
//	%{Action_Inst}%f_add_operation(%SU_Action_Sig,,\
   ( get_global_var ( 'Action_Inst' ) %f add_operation %( %S |U '_Action_Sig' %, '' %, 
//	DoIt (anItem: \
   'DoIt (anItem: '

//	[{"%{ELEMENT_TYPE}S"="ImpurityParamType"}{\
//	%{ELEMENT_TYPE}U\
   ( get_global_var ( 'ELEMENT_TYPE' ) |U ) 
//	}\

//	%{%{ELEMENT_TYPE}N}U\

//	]\
//	[{%S{needs index}=true}\
   %IF ( ( %S get_up ( 'needs index' ) ) %==  true ) 
//	, anIndex: [{}{long}<{}{%CS=index type}%C%TU>]\
    ', anIndex: '
    %IF ( ) 
     %ELSE
      'long' 
     %THEN
     %FOR %ITEM-CONDITION ( ( %C |S ) %== 'index type' ) 
      %C ->T |U  
     %END-FOR
    %END-IF
//	]\
   %END-IF
//	): boolean,Op_Instance\
   '): boolean' %, 'Op_Instance'
//	)\
)% ) //	%{Op_Instance}%f_set_documentation(Тип подитеративной функции для %PN.%SN)\
   ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Тип подитеративной функции для '
   %P |N '.'
   %S |N )% ) 
//	%S%f_set_var(Action,{Action_Inst})\
   %S %f set_var %( 'Action' %, '{Action_Inst}' )% 

//	%P%f_add_operation(%SU_Stub,static,L2_%PN_%SN_Action (anAction: pointer): %{Action_Inst}U,Op_Instance)
   %P %f add_operation %( %S |U '_Stub' %, 'static' %, 'L2_'
   %P |N '_'
   %S |N '_Action (anAction: pointer): '
   ( get_global_var ( 'Action_Inst' ) |U ) %, 'Op_Instance' )% 
//	%{Op_Instance}%f_set_documentation(Функция формирования заглушки для ЛОКАЛЬНОЙ подитеративной функции для %PN.%SN)\
   ( get_global_var ( 'Op_Instance' ) %f set_documentation %( 'Функция формирования заглушки для ЛОКАЛЬНОЙ подитеративной функции для '
   %P |N '.'
   %S |N )% ) 
//	%{Op_Instance}%f_set_up(isGlobal,true)\
   ( get_global_var ( 'Op_Instance' ) %f set_up %( 'isGlobal' %, true )% ) 
//	%{Op_Instance}%f_set_up(isAsm,true)\
   ( get_global_var ( 'Op_Instance' ) %f set_up %( 'isAsm' %, true )% ) 

//	%S%f_set_var(Stub,{Op_Instance})\
   %S %f set_var %( 'Stub' %, '{Op_Instance}' )% 

//	[{"%{l3LocalStub}N"=""}%f_find_element(l3LocalStub,l3LocalStub)]\
   %IF ( ( ( get_global_var ( 'l3LocalStub' ) |N ) ) %== '' ) 
    [%f] find_element %( 'l3LocalStub' %, 'l3LocalStub' )% 
   %END-IF
//	%P%f_make_accessable(%{l3LocalStub}U)\
   %P %f make_accessable %( ( get_global_var ( 'l3LocalStub' ) |U ) )% 
//	[{%SC=Class}\
   %IF ( ( %S |C ) %== 'Class' ) 
//	%S%f_add_dependency(%SU_%{l3LocalStub}U_uses,%{l3LocalStub}U,uses,,USES_Inst)\
    %S %f add_dependency %( %S |U '_'
    ( get_global_var ( 'l3LocalStub' ) |U ) '_uses' %, ( get_global_var ( 'l3LocalStub' ) |U ) %, 'uses' %, '' %, 'USES_Inst' )% 
//	]\
   %END-IF


//	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%P)_var,\
   ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, %P )% '_var' %, 
//	 {-}\
   ' {-}'
//	)\
)% ) //	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%P)_impl,\
   ( get_global_var ( 'Op_Instance' ) %f set_uc_content %( 'intf.pas' %, '_'
   [%f] pas_MethodOwnerID %( ( get_global_var ( 'Op_Instance' ) ) %, %P )% '_impl' %, 
//	\tjmp l3LocalStub\
   #9'jmp l3LocalStub'
//	)\
)% ) 

//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4BA884DD00A7for470F151302FD*
; // IteratorSpell


//%f _IsIterator
: IsIterator OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4BA899E20317for470F151302FD*
//	false
 false
//#UC END# *4BA899E20317for470F151302FD*
; // IsIterator


// Элемент может реализовываться классом
//%f _IsClassImplementableElement
: IsClassImplementableElement OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4BA9EBAE0254for470F151302FD*
//	false
 false
//#UC END# *4BA9EBAE0254for470F151302FD*
; // IsClassImplementableElement


// Декларирует указатели на элемент
//%f _pas_ForwardPointers
: pas_ForwardPointers OBJECT IN %S
//#UC START# *4BAA50E802CAfor470F151302FD*
//	<{}{%ZS=Typedef&%Z{isPointer}=true&%f_pas_IsSameUnit(%S,%Z)=true}\
 %FOR %ITEM-CONDITION ( ( %Z |S ) %== 'Typedef' %&& 
   ( ( %Z get_up ( 'isPointer' ) ) %==  true  ) %&& 
   ( ( [%f] pas_IsSameUnit %( %S %, %Z )% ) %==  true  ) ) 
//	%ZX\
  %Z |X 
//	\n\
  #13#10
//	%f_add_to_list(FORWARDED_INTF,Z)\
  [%f] add_to_list %( 'FORWARDED_INTF' %, 'Z' )% 
//	>
 %END-FOR
//#UC END# *4BAA50E802CAfor470F151302FD*
; // pas_ForwardPointers


// Определяет, что элемент переопределяет другой элемент
//%f _IsOverride
: IsOverride OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4BAA5CAB02CFfor470F151302FD*
//	false
 false
//#UC END# *4BAA5CAB02CFfor470F151302FD*
; // IsOverride


// Ключевое слово метода
//%f _pas_MethodKeyword
: pas_MethodKeyword OBJECT IN %S
// параметры: Modification: a-string = %1
// возвращаемый результат: a-string
//#UC START# *4BB0B1D202C2for470F151302FD*
//@ %SU_%1N
//	%t_pas_MethodKeyword(%S,%1)
 [%t] pas_MethodKeyword %( %S %, %1 )% 
//#UC END# *4BB0B1D202C2for470F151302FD*
; // pas_MethodKeyword


// Отступ. Аналог #, только с учётом особенностей Delphi
//%f _Ind
: Ind OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4BB2008E003Afor470F151302FD*
//#UC END# *4BB2008E003Afor470F151302FD*
; // Ind


// Элемент реализован каким-то элементом указанного класса
//%f _IsRealizedBySomeClassElement
: IsRealizedBySomeClassElement OBJECT IN %S
// параметры: aClass: MDAClass = %1
// возвращаемый результат: boolean
//#UC START# *4BBF125A02BFfor470F151302FD*
//@ %SU_%1U
//	[{<{}{%L%PU=%1U}{C}>!=0}{\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %L ->P |U  ) %== ( %1 |U ) ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4BBF125A02BFfor470F151302FD*
; // IsRealizedBySomeClassElement


// Элемент является виртуальным
//%f _IsVirtual
: IsVirtual OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4BC4823500C1for470F151302FD*
//	[{%Sa=regular}{\
 %IF ( ( %S |a ) %== 'regular' ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4BC4823500C1for470F151302FD*
; // IsVirtual


// Выводит элемент как UtilityPack
//%f _pas_OutLikeUtilityPack
: pas_OutLikeUtilityPack OBJECT IN %S
//#UC START# *4BD1A77701B1for470F151302FD*
//	%f_pas_OpenUnitInterface(%S)\
 [%f] pas_OpenUnitInterface %( %S )% 
//	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	[\n%S%f_open_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f open_ifdef %( )% 
  %END-IF
//	]\
 %END-IF
//	%f_pas_Uses(%S)\
 [%f] pas_Uses %( %S )% 
//	%f_pas_CloseUses(%S)\
 [%f] pas_CloseUses %( %S )% 
//	<{\n}{%CV=PublicAccess&%C#f_IsMethod()!=true&"%CO"=""}%CX>\
 %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
  %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
   ( ( %C %?f IsMethod %( )% ) %!=  true  ) %&& 
   ( ( %C |O ) %== ''  ) ) 
  %C |X 
 %END-FOR
//	<{}{%CV=PublicAccess&%C#f_IsMethod()=true&"%CO"=""}[\n%CX]>\
 %FOR %ITEM-CONDITION ( ( %C |V ) %== 'PublicAccess' %&& 
   ( ( %C %?f IsMethod %( )% ) %==  true  ) %&& 
   ( ( %C |O ) %== ''  ) ) 
  %IF-NOT-EMPTY
   #13#10
   %C |X 
  %END-IF
 %END-FOR
//	%f_with_gen_id(intf3.pas,[\n<{\n}%CX>])\
 [%f] with_gen_id %( 'intf3.pas' %, %IF-NOT-EMPTY
  #13#10
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %C |X 
  %END-FOR
 %END-IF
)% //	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	[\n%S%f_close_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f close_ifdef %( )% 
  %END-IF
//	]\
 %END-IF
//	
//	%f_pas_OpenUnitImplementation(%S)\
 [%f] pas_OpenUnitImplementation %( %S )% 
//	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	[\n%S%f_open_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f open_ifdef %( )% 
  %END-IF
//	%f_pas_UsesInImpl(%S)\
  [%f] pas_UsesInImpl %( %S )% 
//	%f_pas_CloseUses(%S)\
  [%f] pas_CloseUses %( %S )% 
//	%f_with_gen_id(impl.pas,%SX)\
  [%f] with_gen_id %( 'impl.pas' %, %S |X )% 
//	[\n%S%f_close_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f close_ifdef %( )% 
  %END-IF
//	]\
 %END-IF
//	%f_pas_CloseUnit(%S)\
 [%f] pas_CloseUnit %( %S )% 
//	<{}{"%CO"!=""}%CX>
 %FOR %ITEM-CONDITION ( ( %C |O ) %!= '' ) 
  %C |X 
 %END-FOR
//#UC END# *4BD1A77701B1for470F151302FD*
; // pas_OutLikeUtilityPack


// Имя условной директивы
//%f _pas_DefineName
: pas_DefineName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4C0524A20161for470F151302FD*
//@ %SU
//	%f_str_replace(%f_pas_UnitName(%S),.,_)
 [%f] str_replace %( [%f] pas_UnitName %( %S )% %, '.' %, '_' )% 
//#UC END# *4C0524A20161for470F151302FD*
; // pas_DefineName


// Имеет ли секцию инициализации
//%f _HasIni
: HasIni OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4C05291601EEfor470F151302FD*
//@ %SU
//	[{<{}{%CS=ini}{C}>!=0}{\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C |S ) %== 'ini' ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
//	[{%S#f_IsMixIn()=true&<{}{%G#f_IsMixIn()=true&%G%f_HasIni()=true}{C}>!=0}{\
   %IF ( ( %S %?f IsMixIn %( )% ) %==  true %&& 
     ( 
    %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %==  true %&& 
      ( ( %G %f HasIni %( )% ) %==  true  ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0  ) ) 
    %ELSE
//	[{<{}{"%CO"=""&%C#f_HasIni()=true}{C}>!=0}{\
     %IF ( 
      %FOR %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
        ( ( %C %?f HasIni %( )% ) %==  true  ) ) 
       ( 'C' ) 
      %END-FOR
      %!= 0 ) 
      %ELSE
//	false\
        false 
//	}\
      %THEN
//	true\
       true 
//	]\
     %END-IF
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4C05291601EEfor470F151302FD*
; // HasIni


// Выводит включение секций инициализации примесей
//%f _pas_OutMixInIniInclude
: pas_OutMixInIniInclude OBJECT IN %S
//#UC START# *4C0532EF02E3for470F151302FD*
//	<{}{%G#f_IsMixIn()=true}\
 %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %==  true ) 
//	[{%G%f_HasIni()=true}\
  %IF ( ( %G %f HasIni %( )% ) %==  true ) 
//	\n%f_OutInclude(%G,%B)\
   #13#10
   [%f] OutInclude %( %G %, %B )% 
//	]\
  %END-IF

//	<%f_pas_OutMixInIniInclude(%G)>\
//	>\
 %END-FOR

//	<{}{%R#f_IsMixIn()=true&%R%f_HasIni()=true}\
 %FOR %ITEM-CONDITION ( ( %R %?f IsMixIn %( )% ) %==  true %&& 
   ( ( %R %f HasIni %( )% ) %==  true  ) ) 
//	\n%f_OutInclude(%R,%B)\
  #13#10
  [%f] OutInclude %( %R %, %B )% 
//	>
 %END-FOR
//#UC END# *4C0532EF02E3for470F151302FD*
; // pas_OutMixInIniInclude


//%f _InheritsFromClass
: InheritsFromClass OBJECT IN %S
// параметры: aClass: MDAClass = %1
// возвращаемый результат: boolean
//#UC START# *4C342AB5032Efor470F151302FD*
//@ %SU%1U
//	[{<{}{%GU=%1U}{C}>!=0}{\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %G |U ) %== ( %1 |U ) ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4C342AB5032Efor470F151302FD*
; // InheritsFromClass


// Элемент не является параметром
//%f _IsNotParam
: IsNotParam OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4C766D140383for470F151302FD*
//	[{%SS!=uses&%SS!=element type&%SS!=index type}{\
 %IF ( ( %S |S ) %!= 'uses' %&& 
   ( ( %S |S ) %!= 'element type'  ) %&& 
   ( ( %S |S ) %!= 'index type'  ) ) 
  %ELSE
//	true\
    true 
//	}\
  %THEN
//	false\
   false 
//	]
 %END-IF
//#UC END# *4C766D140383for470F151302FD*
; // IsNotParam


//%f _pas_CallingConventionsDirective
: pas_CallingConventionsDirective OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4CBD7CFE025Bfor470F151302FD*
//	[{%S{calling conventions}!=none&"%S{calling conventions}"!=""}{\
 %IF ( ( %S get_up ( 'calling conventions' ) ) %!= 'none' %&& 
   ( ( %S get_up ( 'calling conventions' ) ) %!= ''  ) ) 
  %ELSE
//	[{%t_interface(%P)=true&%P#f_InTie()=true} stdcall;]\
   %IF ( ( [%t] interface %( %P )% ) %==  true %&& 
     ( ( %P %?f InTie %( )% ) %==  true  ) ) 
    ' stdcall;' 
   %END-IF
//	}\
  %THEN
//	 %S{calling conventions};\
  ' '
  %S get_up ( 'calling conventions' ) ';'
//	]
 %END-IF
//#UC END# *4CBD7CFE025Bfor470F151302FD*
; // pas_CallingConventionsDirective


//%f _FirstParamIsViewAreaController
: FirstParamIsViewAreaController OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4CBEFA1402F2for470F151302FD*
//@ %SU
//	[{%S%f_HasParams()=true}{\
 %IF ( ( %S %f HasParams %( )% ) %==  true ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	%f_set_var(RESULT,"false")\
  [%f] set_var %( 'RESULT' %, false )% 
//	<{}{%CC=Parameter}\
  %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Parameter' ) 
//	[{%C%T#f_IsViewAreaController()=true}\
   %IF ( ( %C ->T %?f IsViewAreaController %( )%  ) %==  true ) 
//	%f_set_var(RESULT,"true")\
    [%f] set_var %( 'RESULT' %, true )% 
//	]\
   %END-IF
//	%f_cycle_break(%S)\
   [%f] cycle_break %( %S )% 
//	>\
  %END-FOR
//	%{RESULT}N\
  ( get_global_var ( 'RESULT' ) |N ) 
//	]
 %END-IF
//#UC END# *4CBEFA1402F2for470F151302FD*
; // FirstParamIsViewAreaController


//%f _FirstParamName
: FirstParamName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4CBEFF7C020Bfor470F151302FD*
//@ %SU
//	[{%S%f_HasParams()=true}{\
 %IF ( ( %S %f HasParams %( )% ) %==  true ) 
  %ELSE
//	\
//	}\
  %THEN
//	<{}{%CC=Parameter}\
  %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Parameter' ) 
//	%CN\
   %C |N 
//	%f_cycle_break(%S)\
   [%f] cycle_break %( %S )% 
//	>\
  %END-FOR
//	]
 %END-IF
//#UC END# *4CBEFF7C020Bfor470F151302FD*
; // FirstParamName


//%f _IsMakeSingleChild
: IsMakeSingleChild OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4CC01C0D0010for470F151302FD*
//	[{%f_N(%S)=MakeSingleChild}{\
 %IF ( ( [%f] N %( %S )% ) %== 'MakeSingleChild' ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4CC01C0D0010for470F151302FD*
; // IsMakeSingleChild


// Нужна ли фабрике формы агрегация
//%f _NeedAggregate
: NeedAggregate OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4CC02B360368for470F151302FD*
//	%S{need Aggregate}
 %S get_up ( 'need Aggregate' ) 
//#UC END# *4CC02B360368for470F151302FD*
; // NeedAggregate


//%f _HasFini
: HasFini OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4CEFC15B03C1for470F151302FD*
//@ %SU
//	[{<{}{%CS=fini}{C}>!=0}{\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %C |S ) %== 'fini' ) 
   ( 'C' ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
//	[{%S#f_IsMixIn()=true&<{}{%G#f_IsMixIn()=true&%G%f_HasFini()=true}{C}>!=0}{\
   %IF ( ( %S %?f IsMixIn %( )% ) %==  true %&& 
     ( 
    %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %==  true %&& 
      ( ( %G %f HasFini %( )% ) %==  true  ) ) 
     ( 'C' ) 
    %END-FOR
    %!= 0  ) ) 
    %ELSE
//	[{<{}{"%CO"=""&%C#f_HasFini()=true}{C}>!=0}{\
     %IF ( 
      %FOR %ITEM-CONDITION ( ( %C |O ) %== '' %&& 
        ( ( %C %?f HasFini %( )% ) %==  true  ) ) 
       ( 'C' ) 
      %END-FOR
      %!= 0 ) 
      %ELSE
//	false\
        false 
//	}\
      %THEN
//	true\
       true 
//	]\
     %END-IF
//	}\
    %THEN
//	true\
     true 
//	]\
   %END-IF
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4CEFC15B03C1for470F151302FD*
; // HasFini


//%f _pas_OutMixInFiniInclude
: pas_OutMixInFiniInclude OBJECT IN %S
//#UC START# *4CEFC1720254for470F151302FD*
//	<{}{%G#f_IsMixIn()=true}\
 %FOR %ITEM-CONDITION ( ( %G %?f IsMixIn %( )% ) %==  true ) 
//	[{%G%f_HasFini()=true}\
  %IF ( ( %G %f HasFini %( )% ) %==  true ) 
//	\n%f_OutInclude(%G,%B)\
   #13#10
   [%f] OutInclude %( %G %, %B )% 
//	]\
  %END-IF

//	<%f_pas_OutMixInIniInclude(%G)>\
//	>\
 %END-FOR

//	<{}{%R#f_IsMixIn()=true&%R%f_HasFini()=true}\
 %FOR %ITEM-CONDITION ( ( %R %?f IsMixIn %( )% ) %==  true %&& 
   ( ( %R %f HasFini %( )% ) %==  true  ) ) 
//	\n%f_OutInclude(%R,%B)\
  #13#10
  [%f] OutInclude %( %R %, %B )% 
//	>
 %END-FOR
//#UC END# *4CEFC1720254for470F151302FD*
; // pas_OutMixInFiniInclude


//%f _IsUtilityPack
: IsUtilityPack OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4E7B630D000Dfor470F151302FD*
//	false
 false
//#UC END# *4E7B630D000Dfor470F151302FD*
; // IsUtilityPack


// Нужно ли документацию к слову скрипта, которое представляет элемента
//%f _NeedsKeywordDocumentation
: NeedsKeywordDocumentation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4F30B869036Efor470F151302FD*
//	false
 false
//#UC END# *4F30B869036Efor470F151302FD*
; // NeedsKeywordDocumentation


// Создаёт документацию к словам скрипта
//%f _SpellKeywordsDocumentation
: SpellKeywordsDocumentation OBJECT IN %S
// параметры: aSummoner: MDAClass = %1
//#UC START# *4F30B8A403DFfor470F151302FD*
//	[{%S%{_WasSpelled}N!=1}\
 %IF ( ( %S ( get_object_var ( '_WasSpelled' ) |N )  ) %!= 1 ) 
//	[{%SS!=Requirements&%SS!=Constants&%SS!=TestLibrary}\
  %IF ( ( %S |S ) %!= 'Requirements' %&& 
    ( ( %S |S ) %!= 'Constants'  ) %&& 
    ( ( %S |S ) %!= 'TestLibrary'  ) ) 
//	%S%f_set_var(_WasSpelled,"1")\
   %S %f set_var %( '_WasSpelled' %, 1 )% 
//	[{%S%{WasSpelledToKeywordsDocumentation}N!=true}\

//	%S%f_set_var(WasSpelledToKeywordsDocumentation,"true")\
//	%f_add_to_list(WasSpelledToKeywordsDocumentation_LIST,S)\
   [%f] add_to_list %( 'WasSpelledToKeywordsDocumentation_LIST' %, 'S' )% 
//	<{}{%CC=Class|%CC=Category}\
   %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Class' %|| 
     ( ( %C |C ) %== 'Category'  ) ) 
//	[{%C#f_IsMethod()!=true}\
    %IF ( ( %C %?f IsMethod %( )% ) %!=  true ) 
//	%C#f_SpellKeywordsDocumentation(%1)\
     %C %?f SpellKeywordsDocumentation %( %1 )% 
//	]\
    %END-IF
//	>\
   %END-FOR

// - тут итерируем ТОЛЬКО по классам и категориям, не заходя внутрь методов,

//   операций и связей, так наверное памяти СИЛЬНО меньше тратиться должно,

//   до и по времени побыстрее должно быть
//	%S%f_DoSpellKeywordDocumentation(%1)\
   %S %f DoSpellKeywordDocumentation %( %1 )% 
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4F30B8A403DFfor470F151302FD*
; // SpellKeywordsDocumentation


//%f _ScriptKeywordDocumentationName
: ScriptKeywordDocumentationName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4F30B8E60385for470F151302FD*
//	%f_N(%S)
 [%f] N %( %S )% 
//#UC END# *4F30B8E60385for470F151302FD*
; // ScriptKeywordDocumentationName


// Выводит документацию для СЛОВА скрипта, которое представляет данный эелемент
//%f _DoSpellKeywordDocumentation
: DoSpellKeywordDocumentation OBJECT IN %S
// параметры: aSummoner: MDAClass = %1
//#UC START# *4F30D27300BAfor470F151302FD*
// - специально ничего не делаем
//#UC END# *4F30D27300BAfor470F151302FD*
; // DoSpellKeywordDocumentation


//%f _IsUnit
: IsUnit OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4F30E88502A5for470F151302FD*
//	false
 false
//#UC END# *4F30E88502A5for470F151302FD*
; // IsUnit


// Определяет, что элемент является проектом
//%f _IsProject
: IsProject OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4F379BBA00BFfor470F151302FD*
//	false
 false
//#UC END# *4F379BBA00BFfor470F151302FD*
; // IsProject



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // "Delphi интерфейсы и реализация"


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Functors/UnaryFunctor.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Functors::UnaryFunctor
//
// Унарный функтор
// ---
// определяет функтор с одним параметром и заданным типом результата (по умолчанию пустым)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: UnaryFunctor::Class
implementation @ <<UnaryFunctor>>
//? Унарный функтор
//? определяет функтор с одним параметром и заданным типом результата (по умолчанию пустым)
//< *::Class,*::Category

//= FunctorBase::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа FunctorBase::Class
// дампит базовый класс функтора
//%f _base_decl_h
; // st_space_key

: base_decl_h OBJECT IN %S
//#UC START# *486345750387for471326A40232*
//	: public std::unary_function\<<{}{%CC=Attribute&%CS=param}%f_functor_arg_type(%C)>, <{}{%CC=Attribute&%CS=result}%f_functor_ret_type(%C)>\>
 ': public std::unary_function<'
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' %&& 
   ( ( %C |S ) %== 'param'  ) ) 
  [%f] functor_arg_type %( %C )% 
 %END-FOR
 ', '
 %FOR %ITEM-CONDITION ( ( %C |C ) %== 'Attribute' %&& 
   ( ( %C |S ) %== 'result'  ) ) 
  [%f] functor_ret_type %( %C )% 
 %END-FOR
 '>'
//#UC END# *486345750387for471326A40232*
; // base_decl_h


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for471326A40232*
//c                                                {}
//r {"<{}{%CC=Attribute&%CS=param}{%CC}>"!="1"}:   {Для %SS должен быть задан один параметр}
//#UC END# *4704C0E30186for471326A40232*
; // constraint


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: UnaryFunctor::Class::result::Attribute
end. // <<UnaryFunctor>>

implementation @ :: <<UnaryFunctor>> <<result>> ;
//? Результат функтора
// Параметры стереотипа
//v +
// - типы видимости
//Y code_result.gif
//L code_result
//l l
// - возможные типы связи атрибута

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


//: UnaryFunctor::Class::param::Attribute
; // st_space_key

end. // :: <<UnaryFunctor>> <<result>> ;

implementation @ :: <<UnaryFunctor>> <<param>> ;
//? Параметр функтора (может иметь "стеротип цели" chg указывающий на то что праметр может изменяться внутри функтора)
// Параметры стереотипа
//v +
// - типы видимости
//Y code_param_attr.gif
//L code_param_attr
//A chg
// - стереотипы "цели" (типа/результата)
//l lr
// - возможные типы связи атрибута

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

; // st_space_key

end. // :: <<UnaryFunctor>> <<param>> ;


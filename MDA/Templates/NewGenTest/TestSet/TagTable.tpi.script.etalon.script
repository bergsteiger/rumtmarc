////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Elements/TagTable.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Elements::TagTable
//
// EVD-схема
// ---
// Таблица описания тегов. Может содержать атомы или теги, которые связываются друг с другом
// отношениями наследования, реализации или связи.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: TagTable::Class
implementation @ <<TagTable>>
//? EVD-схема
//? Таблица описания тегов. Может содержать атомы или теги, которые связываются друг с другом отношениями наследования, реализации или связи.
//> Tag::Class
//> Atom::Class
//> TagOverride::Class
//> Enum::Class

//= WikiImplClass::Class
//= AttrValueSpeller::Class
//= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_evd_tag_table.gif
//L code_evd_tag_table
// Параметры визуализации
//$ C 127,255,212
//$ L 0,0,0
//$ l 127,255,212
//$ F 0,0,0
//$ f 127,255,212

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p author:s ? 
//p started:s ? 
//p need UC:b=false ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{author}"!="%S{!author}"}%f_up_prefix(%S) *author* = *%S{author}*
 ?inherited
 %IF ( ( %S get_up ( 'author' ) ) %!= ( %S get_up_def ( 'author' ) ) ) 
  [%f] up_prefix %( %S )% ' *author* = *'
  %S get_up ( 'author' ) '*'
//	][{"%S{started}"!="%S{!started}"}%f_up_prefix(%S) *started* = *%S{started}*
 %END-IF
 %IF ( ( %S get_up ( 'started' ) ) %!= ( %S get_up_def ( 'started' ) ) ) 
  [%f] up_prefix %( %S )% ' *started* = *'
  %S get_up ( 'started' ) '*'
//	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}*
 %END-IF
 %IF ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) 
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '*'
//	]
 %END-IF


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // wiki_up_print

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for484926640110*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for484926640110*
; // constraint


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
//%f _pas_ImplUses
: pas_ImplUses OBJECT IN %S
//#UC START# *4948EB2601FAfor484926640110*
//	%S%[inherited]\
 inherited
//	%f_pas_PutToUses("SysUtils")\
 [%f] pas_PutToUses %( 'SysUtils' )% 
//	%f_pas_PutToUses("TypInfo")\
 [%f] pas_PutToUses %( 'TypInfo' )% 
//	%f_pas_PutToUses("k2Const")\
 [%f] pas_PutToUses %( 'k2Const' )% 
//	%f_pas_PutToUses("k2Tags")\
 [%f] pas_PutToUses %( 'k2Tags' )% 
//	%f_pas_PutToUses("k2BaseStruct")\
 [%f] pas_PutToUses %( 'k2BaseStruct' )% 
//	%f_pas_PutToUses("l3Types")\
 [%f] pas_PutToUses %( 'l3Types' )% 
//	%f_pas_PutToUses("l3String")\
 [%f] pas_PutToUses %( 'l3String' )% 
//	%f_pas_PutToUses("k2Facade")\
//	<%C<{}{%LS=Wrapper}%f_pas_PutImplToUses(%L)>>\
 %FOR %C
  %FOR %ITEM-CONDITION ( ( %L |S ) %== 'Wrapper' ) 
   [%f] pas_PutImplToUses %( %L )% 
  %END-FOR
  %END-FOR
//	<%C<{}{%LS=InterfaceFactory}%f_pas_PutImplToUses(%L)>>\
 %FOR %C
  %FOR %ITEM-CONDITION ( ( %L |S ) %== 'InterfaceFactory' ) 
   [%f] pas_PutImplToUses %( %L )% 
  %END-FOR
  %END-FOR
//	<%C<{}{%LS=TagImplementator}%f_pas_PutImplToUses(%L%G)\
 %FOR %C
  %FOR %ITEM-CONDITION ( ( %L |S ) %== 'TagImplementator' ) 
   [%f] pas_PutImplToUses %( %L ->G  )% 
//	%f_pas_UsesInImpl(%L)>>
   [%f] pas_UsesInImpl %( %L )% 
  %END-FOR
  %END-FOR
//#UC END# *4948EB2601FAfor484926640110*
; // pas_ImplUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
//%f _pas_IntfUses
: pas_IntfUses OBJECT IN %S
//#UC START# *4948F2EE0334for484926640110*
//	%S%[inherited]\
 inherited
//	%f_pas_PutToUses("k2Base")\
 [%f] pas_PutToUses %( 'k2Base' )% 
//	%f_pas_PutToUses("l3Interfaces")\
 [%f] pas_PutToUses %( 'l3Interfaces' )% 
//	%f_pas_PutToUses("k2Interfaces")\
 [%f] pas_PutToUses %( 'k2Interfaces' )% 
//	<{}{%C#f_evd_IsSchemaElement()=true}%f_pas_Uses(%C)>
 %FOR %ITEM-CONDITION ( ( %C %?f evd_IsSchemaElement %( )% ) %==  true ) 
  [%f] pas_Uses %( %C )% 
 %END-FOR
//#UC END# *4948F2EE0334for484926640110*
; // pas_IntfUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит секции инициализации
//%f _pas_OutIni
: pas_OutIni OBJECT IN %S
//#UC START# *4B3886890063for484926640110*
//	%S%[inherited]\
 inherited
//	\n %f_pas_TypeName(%S).SetAsDefault;
 #13#10' '
 [%f] pas_TypeName %( %S )% '.SetAsDefault;'
//#UC END# *4B3886890063for484926640110*
; // pas_OutIni


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor484926640110*
//#UC END# *49F5795900ECfor484926640110*
; // dfm


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor484926640110*
//R  
//	[<%C#f_evd_OutElementImplementation()>]\
 %IF-NOT-EMPTY
  %FOR %C %?f evd_OutElementImplementation %( )% 
  %END-FOR
 %END-IF
//	%f_pas_OpenMethodImplementation("Create",%S)\
 [%f] pas_OpenMethodImplementation %( 'Create"' %, %S )% 
//	constructor %f_pas_TypeName(%S).Create;
 'constructor '
 [%f] pas_TypeName %( %S )% '.Create;'
//	%f_clear_list(LOCAL_VARS)\
 [%f] clear_list %( 'LOCAL_VARS' )% 
//	[var
 %IF-NOT-EMPTY
  'var'
//	%f_out_vars(%S)\
  [%f] out_vars %( %S )% 
//	]\
 %END-IF
//	%f_clear_list(LOCAL_VARS)\
 [%f] clear_list %( 'LOCAL_VARS' )% 
//	begin
 'begin'
//	 inherited;\
 ' inherited;'
//	[\n %S%f_open_ifdef()]\
 %IF-NOT-EMPTY
  #13#10' '
  %S %f open_ifdef %( )% 
 %END-IF
//	[{%S{need UC}=true}\n%f_with_gen_id(intf.pas,%U[{ttimpl}\n])]
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  #13#10
  [%f] with_gen_id %( 'intf.pas' %, %U%IF ( 'ttimpl' ) 
   #13#10 
  %END-IF
 )%  %END-IF
//	%f_shift_intend(-3)\
 [%f] shift_intend %( '-3' )% 
//	[<{\n}%CX\
 %IF-NOT-EMPTY
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %C |X 
//	>\n]\
  %END-FOR
  #13#10 
 %END-IF
//	%f_shift_intend(+3)\
 [%f] shift_intend %( '+3' )% 
//	[ <{\n }{%C#f_evd_IsSchemaElement()=true}t_%CN.Recalc;>\n]\
 %IF-NOT-EMPTY
  ' '
  %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C %?f evd_IsSchemaElement %( )% ) %==  true ) 
   't_'
   %C |N '.Recalc;' 
  %END-FOR
  #13#10 
 %END-IF
//	[{%S{need UC}=true}%f_with_gen_id(intf.pas,%U[{ttimpl1}\n])\n]\
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  [%f] with_gen_id %( 'intf.pas' %, %U%IF ( 'ttimpl1' ) 
   #13#10 
  %END-IF
 )%   #13#10 
 %END-IF
//	[ %S%f_close_ifdef()\n]\
 %IF-NOT-EMPTY
  ' '
  %S %f close_ifdef %( )% #13#10 
 %END-IF
//	end;
 'end;'
//	[{%Cx=true}
 %IF ( ( %C |x ) %==  true ) 

//	// определяем стандартные методы схемы
  '// определяем стандартные методы схемы'
//	%f_pas_OpenMethodImplementation("pm_GetTypeByHandle",%S)\
  [%f] pas_OpenMethodImplementation %( 'pm_GetTypeByHandle"' %, %S )% 
//	function %f_pas_TypeName(%S).pm_GetTypeByHandle(H: Integer): Tk2Type;
  'function '
  [%f] pas_TypeName %( %S )% '.pm_GetTypeByHandle(H: Integer): Tk2Type;'
//	begin
  'begin'
//	[{}{\
  %IF ( ) 
   %ELSE
//	 Result := inherited pm_GetTypeByHandle(H);\
    ' Result := inherited pm_GetTypeByHandle(H);'
//	}\
   %THEN
//	 Case H of
   ' Case H of'
//	  <{\n  }{%CS!=TagOverride&%CC!=Dependency&"%C{ID}"!=""}\
   '  '
   %FOR %ITEM-SEPARATOR #13#10'  ' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |S ) %!= 'TagOverride' %&& 
     ( ( %C |C ) %!= 'Dependency'  ) %&& 
     ( ( %C get_up ( 'ID' ) ) %!= ''  ) ) 
//	[{"%C{ID}"!=""}{k2_id%CN}%C{ID} \{%CN\}]:
    %IF ( ( %C get_up ( 'ID' ) ) %!= '' ) 
     %ELSE
      'k2_id'
      %C |N 
     %THEN
     %C get_up ( 'ID' ) ' {'
     %C |N '}' 
    %END-IF
    ':'
//	   Result := t_%CN;>
    '   Result := t_'
    %C |N ';' 
   %END-FOR
//	  else
   '  else'
//	  begin
   '  begin'
//	   [<{}{%CS!=TagOverride}\
   '   '
   %IF-NOT-EMPTY
    %FOR %ITEM-CONDITION ( ( %C |S ) %!= 'TagOverride' ) 
//	%f_set_var(WAS_OUT,"false")\
     [%f] set_var %( 'WAS_OUT' %, false )% 
//	[%C<{}{%C#f_NeedsOwnType()=true}\
     %IF-NOT-EMPTY
      %C
      %FOR %ITEM-CONDITION ( ( %C %?f NeedsOwnType %( )% ) %==  true ) 
//	[\n   %C%f_open_ifdef()]\
       %IF-NOT-EMPTY
        #13#10'   '
        %C %f open_ifdef %( )% 
       %END-IF
//	[{%{WAS_OUT}N!=false}\
       %IF ( ( ( get_global_var ( 'WAS_OUT' ) |N ) ) %!=  false ) 
//	\n   else\n   \
        #13#10'   else'#13#10'   '
//	]\
       %END-IF
//	%f_set_var(WAS_OUT,"true")\
       [%f] set_var %( 'WAS_OUT' %, true )% 
//	if (t_%C%f_NewTypeName() \<\> nil) AND (t_%C%f_NewTypeName().StringID = H) then
       'if (t_'
       %C %f NewTypeName %( )% ' <> nil) AND (t_'
       %C %f NewTypeName %( )% '.StringID = H) then'
//	    Result := t_%C%f_NewTypeName()\
       '    Result := t_'
       %C %f NewTypeName %( )% 
//	[\n   %C%f_close_ifdef()]\
       %IF-NOT-EMPTY
        #13#10'   '
        %C %f close_ifdef %( )% 
       %END-IF
//	>
      %END-FOR
 //	   else
      '   else'
//	   \
      '   '
//	]\
     %END-IF
//	> \
    %END-FOR
    ' '
//	]\
   %END-IF
//	Result := inherited pm_GetTypeByHandle(H);
   'Result := inherited pm_GetTypeByHandle(H);'
//	  end;//else
   '  end;//else'
//	 end;//Case H]
   ' end;//Case H' 
  %END-IF
//	end;\
  'end;'
//	%f_pas_OpenMethodImplementation("Cleanup",%S)\
  [%f] pas_OpenMethodImplementation %( 'Cleanup"' %, %S )% 
//	procedure %f_pas_TypeName(%S).Cleanup;
  'procedure '
  [%f] pas_TypeName %( %S )% '.Cleanup;'
//	begin
  'begin'
//	[ <{\n }{%CS!=TagOverride&%CC!=Dependency&%C#f_evd_IsSchemaElement()=true}\
  %IF-NOT-EMPTY
   ' '
   %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |S ) %!= 'TagOverride' %&& 
     ( ( %C |C ) %!= 'Dependency'  ) %&& 
     ( ( %C %?f evd_IsSchemaElement %( )% ) %==  true  ) ) 
//	t_%CN.InterfaceFactory := nil;\
    't_'
    %C |N '.InterfaceFactory := nil;'
//	\n t_%CN.ToolFactory := nil;\
    #13#10' t_'
    %C |N '.ToolFactory := nil;'
//	[\n %C<{\n }{%C#f_NeedsOwnType()=true}\
    %IF-NOT-EMPTY
     #13#10' '
     %C
     %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
      %ITEM-CONDITION ( ( %C %?f NeedsOwnType %( )% ) %==  true ) 
//	[%C%f_open_ifdef()\n ]\
      %IF-NOT-EMPTY
       %C %f open_ifdef %( )% #13#10' ' 
      %END-IF
//	t_%C%f_NewTypeName().InterfaceFactory := nil;\
      't_'
      %C %f NewTypeName %( )% '.InterfaceFactory := nil;'
//	[\n %C%f_close_ifdef()]\
      %IF-NOT-EMPTY
       #13#10' '
       %C %f close_ifdef %( )% 
      %END-IF
//	>\
     %END-FOR
 //	]>\n]\
    %END-IF
   %END-FOR
   #13#10 
  %END-IF
//	[ <{\n }{%CS!=TagOverride&%CC!=Dependency&%C#f_evd_IsSchemaElement()=true}FreeAndNil(t_%CN);\
  %IF-NOT-EMPTY
   ' '
   %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( %C |S ) %!= 'TagOverride' %&& 
     ( ( %C |C ) %!= 'Dependency'  ) %&& 
     ( ( %C %?f evd_IsSchemaElement %( )% ) %==  true  ) ) 
    'FreeAndNil(t_'
    %C |N ');'
//	[\n %C<{\n }{%C#f_NeedsOwnType()=true}\
    %IF-NOT-EMPTY
     #13#10' '
     %C
     %FOR %ITEM-SEPARATOR #13#10' ' ; // %ITEM-SEPARATOR 
      %ITEM-CONDITION ( ( %C %?f NeedsOwnType %( )% ) %==  true ) 
//	[%C%f_open_ifdef()\n ]\
      %IF-NOT-EMPTY
       %C %f open_ifdef %( )% #13#10' ' 
      %END-IF
//	FreeAndNil(t_%C%f_NewTypeName());\
      'FreeAndNil(t_'
      %C %f NewTypeName %( )% ');'
//	[\n %C%f_close_ifdef()]\
      %IF-NOT-EMPTY
       #13#10' '
       %C %f close_ifdef %( )% 
      %END-IF
//	>]>\n]\
     %END-FOR
     %END-IF
   %END-FOR
   #13#10 
  %END-IF
//	 inherited;
  ' inherited;'
//	end;
  'end;'
//	]
 %END-IF

//f _out_vars
; // impl.pas

end. // <<TagTable>>

: out_vars OBJECT IN %S
//	<{}{}{%C}\
 %FOR ( %C ) 


//	[{%CS=TagChild}\
  %IF ( ( %C |S ) %== 'TagChild' ) 
//	[{%f_exists_in_list(LOCAL_VARS,"%C%P%PN_%C%PN_%CN")!=true}\
   %IF ( ( [%f] exists_in_list %( 'LOCAL_VARS' %, %C ->P ->P |N   '_'
    %C ->P |N  '_'
    %C |N )% ) %!=  true ) 
//	%f_add_to_list(LOCAL_VARS,"%C%P%PN_%C%PN_%CN")\
    [%f] add_to_list %( 'LOCAL_VARS' %, %C ->P ->P |N   '_'
    %C ->P |N  '_'
    %C |N )% 
//	 l_%C%P%PN_%C%PN_%CN : Ik2Tag;
    ' l_'
    %C ->P ->P |N   '_'
    %C ->P |N  '_'
    %C |N ' : Ik2Tag;'
//	]\
   %END-IF
//	]\
  %END-IF


//	%f_out_vars(%C)\
  [%f] out_vars %( %C )% 
//	>
 %END-FOR
//#UC END# *470F15B800CBfor484926640110*
; // out_vars


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
implementation @ <<TagTable>>
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor484926640110*
//O [{"%f_pas_UnitFileName(%S)"!=""}[{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)]
//R  
//F !!%SN\n\n
//	[{"%SO"!=""}\
 %IF ( ( %S |O ) %!= '' ) 
//	[{%S#f_IsMixIn()!=true}{\
  %IF ( ( %S %?f IsMixIn %( )% ) %!=  true ) 
   %ELSE
//	\{$IfNDef %f_pas_UnitName(%S)\}
    '{$IfNDef '
    [%f] pas_UnitName %( %S )% '}'
//	[ \{* %SD \}\n]\
    %IF-NOT-EMPTY
     ' {* '
     %S |D ' }'#13#10 
    %END-IF
//	\{$Define %f_pas_UnitName(%S)\}\
    '{$Define '
    [%f] pas_UnitName %( %S )% '}'
//	}\
   %THEN
//	%f_pas_OpenUnitInterface(%S)\
   [%f] pas_OpenUnitInterface %( %S )% 
//	%f_pas_Uses(%S)\
   [%f] pas_Uses %( %S )% 
//	%f_pas_CloseUses(%S)\
   [%f] pas_CloseUses %( %S )% 
//	]\
  %END-IF
//	]\
 %END-IF
//	\
//	<{}{"%CO"=""}%CX>\
 %FOR %ITEM-CONDITION ( ( %C |O ) %== '' ) 
  %C |X 
 %END-FOR
//	%f_shift_intend(-3)\
 [%f] shift_intend %( '-3' )% 
//	[%f_with_gen_id(intf2.pas,<{\n}%CX>)\n]\
 %IF-NOT-EMPTY
  [%f] with_gen_id %( 'intf2.pas' %, 
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %C |X 
  %END-FOR
)%   #13#10 
 %END-IF
//	%f_shift_intend(+3)\
 [%f] shift_intend %( '+3' )% 
//	%f_pas_OpenType(%S)\
 [%f] pas_OpenType %( %S )% 
//	#%f_pas_TypeName(%S) = class([{}{Tk2TypeTable}%f_pas_TypeName(%G)])
 out_indent [%f] pas_TypeName %( %S )% ' = class('
 %IF ( ) 
  %ELSE
   'Tk2TypeTable' 
  %THEN
  [%f] pas_TypeName %( %G )% 
 %END-IF
 ')'
//	[#public
 %IF-NOT-EMPTY
  out_indent 'public'
//	#// типы, определённые в данной схеме:
  out_indent '// типы, определённые в данной схеме:'
//	%f_shift_intend(-2)\
  [%f] shift_intend %( '-2' )% 
//	%f_with_gen_id(intf3.pas,<{\n}%CX>)\n\
  [%f] with_gen_id %( 'intf3.pas' %, 
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %C |X 
  %END-FOR
)%   #13#10
//	%f_shift_intend(+2)\
  [%f] shift_intend %( '+2' )% 
//	]\
 %END-IF
//	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	#protected
  out_indent 'protected'
//	#// определяем стандартные методы схемы
  out_indent '// определяем стандартные методы схемы'
//	#  function  pm_GetTypeByHandle(H: Integer): Tk2Type; override;
  out_indent '  function  pm_GetTypeByHandle(H: Integer): Tk2Type; override;'
//	#  procedure Cleanup; override;
  out_indent '  procedure Cleanup; override;'
//	]\
 %END-IF
//	#public
 out_indent 'public'
//	#  constructor Create; override;
 out_indent '  constructor Create; override;'
//	#end;//%f_pas_TypeName(%S)\
 out_indent 'end;//'
 [%f] pas_TypeName %( %S )% 
//	[{%S{need UC}=true}\n\n%U[{ttintf}\n]]
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  #13#10#13#10
  %U%IF ( 'ttintf' ) 
   #13#10 
  %END-IF
  %END-IF

//	%f_pas_OpenUnitImplementation(%S)\
 [%f] pas_OpenUnitImplementation %( %S )% 
//	%f_pas_UsesInImpl(%S)\
 [%f] pas_UsesInImpl %( %S )% 
//	%f_pas_CloseUses(%S)\
 [%f] pas_CloseUses %( %S )% 
//	]\
 ']'
//	
//	[{%S{need UC}=true}%U[{tt}\n]\n\n]\
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  %U%IF ( 'tt' ) 
   #13#10 
  %END-IF
   #13#10#13#10 
 %END-IF
//	%f_with_gen_id(impl.pas,%SX)\
 [%f] with_gen_id %( 'impl.pas' %, %S |X )% 

//	%f_pas_CloseUnit(%S)\
 [%f] pas_CloseUnit %( %S )% 
//	<{}{"%CO"!=""}%CX>\
 %FOR %ITEM-CONDITION ( ( %C |O ) %!= '' ) 
  %C |X 
 %END-FOR
//	]]
 ']]'
//#UC END# *470F1571031Cfor484926640110*
; // intf.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for484926640110*
//#UC END# *477398E501C0for484926640110*
; // intf2.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for484926640110*
//#UC END# *4774D2A20372for484926640110*
; // intf3.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for484926640110*
//#UC END# *4DE79AFC0030for484926640110*
; // sd


// реализация абстрактного стереотипа Документация::MDAGenerator
// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor484926640110*
//#UC END# *4E65F581015Afor484926640110*
; // link_to_requests_hack


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for484926640110*
//	%f_set_var(TAG_TABLE_CONSTANTS_PACK,"")\
 [%f] set_var %( 'TAG_TABLE_CONSTANTS_PACK' %, '' )% 
//	%f_set_var(TAG_TABLE_CONSTANTS,"")\
 [%f] set_var %( 'TAG_TABLE_CONSTANTS' %, '' )% 
//	%S%f_SpellAttrValue(%S)\
 %S %f SpellAttrValue %( %S )% 
//	[{"%{TAG_TABLE_CONSTANTS_PACK}N"!=""}\
 %IF ( ( ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) |N ) ) %!= '' ) 
//	%S%f_add_dependency(%{TAG_TABLE}U_%{TAG_TABLE_CONSTANTS_PACK}U_uses,%{TAG_TABLE_CONSTANTS_PACK}U,uses,,USES_Inst)\
  %S %f add_dependency %( ( get_global_var ( 'TAG_TABLE' ) |U ) '_'
  ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) |U ) '_uses' %, ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) |U ) %, 'uses' %, '' %, 'USES_Inst' )% 
//	]\
 %END-IF
//	<%CX>\
 %FOR %C |X 
 %END-FOR
//	%S%f_DoSpell()
 %S %f DoSpell %( )% 
//#UC END# *4A41A13D03D5for484926640110*
; // spell


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: TagTable::Class::uses::ClassDependency
end. // <<TagTable>>

implementation @ :: <<TagTable>> <<uses>> ;
//? Использование других элементов кода
//= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
//Y code_dep_uses.gif
//L code_dep_uses

// Генераторы
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor49AE663102AD*
//#UC END# *470F1571031Cfor49AE663102AD*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor49AE663102AD*
//#UC END# *470F15B800CBfor49AE663102AD*
; // impl.pas


// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for49AE663102AD*
//#UC END# *477398E501C0for49AE663102AD*
; // intf2.pas


// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for49AE663102AD*
//#UC END# *4774D2A20372for49AE663102AD*
; // intf3.pas


// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor49AE663102AD*
//#UC END# *49F5795900ECfor49AE663102AD*
; // dfm


// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for49AE663102AD*
//#UC END# *4DE79AFC0030for49AE663102AD*
; // sd


// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor49AE663102AD*
//#UC END# *4E65F581015Afor49AE663102AD*
; // link_to_requests_hack


// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for49AE663102AD*
//#UC END# *46E6D4BB0339for49AE663102AD*
; // wiki


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for49AE663102AD*
//c          {}
//r {""=""}: {}
//#UC END# *4704C0E30186for49AE663102AD*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor49AE663102AD*
//#UC END# *4705CBD6003Efor49AE663102AD*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for49AE663102AD*
//	uses
 'uses'
//#UC END# *470484D50138for49AE663102AD*
; // wiki_up_add_gen



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // :: <<TagTable>> <<uses>> ;


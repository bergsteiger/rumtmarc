////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewInterfacesLayer/FormOperations/VCMOperationPrim.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewInterfacesLayer::FormOperations::VCMOperationPrim
//
// Операция
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: VCMOperationPrim::Class
implementation @ <<VCMOperationPrim>>
//? Операция
//= OperationsPublisher::Class
//= Документация::MDAGenerator
//= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +
// - типы видимости
//a a
// - тип абстракции
//Y code_vcm_operation.gif
//L code_vcm_operation
//m t
// - может быть реализован/иметь перекрытую реализацию

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p no prefix:b=false ? Нет префикса у имени. Костыль для [$133891300]
//p is FormActivate:b=false ? Это операция переключения активных форм. [$136258958]. Или операция контрола. Не генерируется Execute
//p has states:b=false ? Определяет, что операция имеет состояния, текущее из которых должна определять форма. См. OnGetState
//p is query:b=false ? Определает, что операция является запросом к агрегации о возможности сделать что-то. Или операция контрола. Не генерируется Test
//p LongProcess:b=false ? 
//p AutoLock:b=false ? 
//p AutoFocus:b=false ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{no prefix}"!="%S{!no prefix}"}%f_up_prefix(%S) *no prefix* = *%S{no prefix}* - Нет префикса у имени. Костыль для \[$133891300\]
 ?inherited
 %IF ( ( %S get_up ( 'no prefix' ) ) %!= ( %S get_up_def ( 'no prefix' ) ) ) 
  [%f] up_prefix %( %S )% ' *no prefix* = *'
  %S get_up ( 'no prefix' ) '* - Нет префикса у имени. Костыль для [$133891300]'
//	][{"%S{is FormActivate}"!="%S{!is FormActivate}"}%f_up_prefix(%S) *is FormActivate* = *%S{is FormActivate}* - Это операция переключения активных форм. \[$136258958\]. Или операция контрола. Не генерируется Execute
 %END-IF
 %IF ( ( %S get_up ( 'is FormActivate' ) ) %!= ( %S get_up_def ( 'is FormActivate' ) ) ) 
  [%f] up_prefix %( %S )% ' *is FormActivate* = *'
  %S get_up ( 'is FormActivate' ) '* - Это операция переключения активных форм. [$136258958]. Или операция контрола. Не генерируется Execute'
//	][{"%S{has states}"!="%S{!has states}"}%f_up_prefix(%S) *has states* = *%S{has states}* - Определяет, что операция имеет состояния, текущее из которых должна определять форма. См. OnGetState
 %END-IF
 %IF ( ( %S get_up ( 'has states' ) ) %!= ( %S get_up_def ( 'has states' ) ) ) 
  [%f] up_prefix %( %S )% ' *has states* = *'
  %S get_up ( 'has states' ) '* - Определяет, что операция имеет состояния, текущее из которых должна определять форма. См. OnGetState'
//	][{"%S{is query}"!="%S{!is query}"}%f_up_prefix(%S) *is query* = *%S{is query}* - Определает, что операция является запросом к агрегации о возможности сделать что-то. Или операция контрола. Не генерируется Test
 %END-IF
 %IF ( ( %S get_up ( 'is query' ) ) %!= ( %S get_up_def ( 'is query' ) ) ) 
  [%f] up_prefix %( %S )% ' *is query* = *'
  %S get_up ( 'is query' ) '* - Определает, что операция является запросом к агрегации о возможности сделать что-то. Или операция контрола. Не генерируется Test'
//	][{"%S{LongProcess}"!="%S{!LongProcess}"}%f_up_prefix(%S) *LongProcess* = *%S{LongProcess}*
 %END-IF
 %IF ( ( %S get_up ( 'LongProcess' ) ) %!= ( %S get_up_def ( 'LongProcess' ) ) ) 
  [%f] up_prefix %( %S )% ' *LongProcess* = *'
  %S get_up ( 'LongProcess' ) '*'
//	][{"%S{AutoLock}"!="%S{!AutoLock}"}%f_up_prefix(%S) *AutoLock* = *%S{AutoLock}*
 %END-IF
 %IF ( ( %S get_up ( 'AutoLock' ) ) %!= ( %S get_up_def ( 'AutoLock' ) ) ) 
  [%f] up_prefix %( %S )% ' *AutoLock* = *'
  %S get_up ( 'AutoLock' ) '*'
//	][{"%S{AutoFocus}"!="%S{!AutoFocus}"}%f_up_prefix(%S) *AutoFocus* = *%S{AutoFocus}*
 %END-IF
 %IF ( ( %S get_up ( 'AutoFocus' ) ) %!= ( %S get_up_def ( 'AutoFocus' ) ) ) 
  [%f] up_prefix %( %S )% ' *AutoFocus* = *'
  %S get_up ( 'AutoFocus' ) '*'
//	]
 %END-IF

// нет документации
//%f _IsVCMOperation
; // wiki_up_print

: IsVCMOperation OBJECT IN %S
//#UC START# *494FCCFC00A6for494F818000E6*
//	true
 true
//#UC END# *494FCCFC00A6for494F818000E6*
; // IsVCMOperation


//%f _IsInternalVCMOperation
: IsInternalVCMOperation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A96B425021Afor494F818000E6*
//	false
 false
//#UC END# *4A96B425021Afor494F818000E6*
; // IsInternalVCMOperation


//%f _Spell
: Spell OBJECT IN %S
//#UC START# *4AE58E3801A3for494F818000E6*
//#UC END# *4AE58E3801A3for494F818000E6*
; // Spell


// Нужен ли код операции
//%f _NeedsOpCode
: NeedsOpCode OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4C80E64501B5for494F818000E6*
//@ %SU
//	[{%P<{}{%aC=Dependency&%aS=uses}{C}>!=0|<{}{%aC=Dependency&%aS=uses}{C}>!=0}{\
 %IF ( ( %P
  %FOR %ITEM-CONDITION ( ( %a |C ) %== 'Dependency' %&& 
    ( ( %a |S ) %== 'uses'  ) ) 
   ( 'C' ) 
  %END-FOR
 )   %!= 0 %|| 
   ( 
  %FOR %ITEM-CONDITION ( ( %a |C ) %== 'Dependency' %&& 
    ( ( %a |S ) %== 'uses'  ) ) 
   ( 'C' ) 
  %END-FOR
  %!= 0  ) ) 
  %ELSE
//	false\
    false 
//	}\
  %THEN
//	true\
   true 
//	]
 %END-IF
//#UC END# *4C80E64501B5for494F818000E6*
; // NeedsOpCode


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа OperationsPublisher::Class
//%f _OperationsToFuncImpl
: OperationsToFuncImpl OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A8E9F9502BBfor494F818000E6*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% 
//	[{%S%f_NeedsOpCode()=true}\
  %IF ( ( %S %f NeedsOpCode %( )% ) %==  true ) 
//	%f_pas_OpenMethodImplementation("opcode_%f_N(%P)_%f_N(%S)",%1)\
   [%f] pas_OpenMethodImplementation %( 'opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% %, %1 )% 
//	class function %f_pas_TypeName(%1).opcode_%f_N(%P)_%f_N(%S) : TvcmOpID;
   'class function '
   [%f] pas_TypeName %( %1 )% '.opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% ' : TvcmOpID;'
//	begin
   'begin'
//	 Result := g_opcode_%f_N(%P)_%f_N(%S);
   ' Result := g_opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% ';'
//	 Assert((Result.rEnID \> 0) AND (Result.rOpID \> 0));
   ' Assert((Result.rEnID > 0) AND (Result.rOpID > 0));'
//	end;\
   'end;'
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4A8E9F9502BBfor494F818000E6*
; // OperationsToFuncImpl


// реализация абстрактного стереотипа OperationsPublisher::Class
// Операции в функции
//%f _OperationsToFuncIntf
: OperationsToFuncIntf OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A8E9D5E0038for494F818000E6*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% 
//	[{%S%f_NeedsOpCode()=true}\
  %IF ( ( %S %f NeedsOpCode %( )% ) %==  true ) 
//	\n   class function opcode_%f_N(%P)_%f_N(%S) : TvcmOpID;
   #13#10'   class function opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% ' : TvcmOpID;'
//	     \{ %PD -\> %SD \}\
   '     { '
   %P |D ' -> '
   %S |D ' }'
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4A8E9D5E0038for494F818000E6*
; // OperationsToFuncIntf


// реализация абстрактного стереотипа OperationsPublisher::Class
// Определяет необходимые uses для операций
//%f _OperationsToUses
: OperationsToUses OBJECT IN %S
//#UC START# *4A82DDA6016Afor494F818000E6*
//	%f_pas_PutToUses(%P%P)
 [%f] pas_PutToUses %( %P ->P  )% 
//#UC END# *4A82DDA6016Afor494F818000E6*
; // OperationsToUses


// реализация абстрактного стереотипа OperationsPublisher::Class
// Операции в секцию Var
//%f _OperationsToVar
: OperationsToVar OBJECT IN %S
//#UC START# *4A8E9D3A01FEfor494F818000E6*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% 
//	[{%S%f_NeedsOpCode()=true}\
  %IF ( ( %S %f NeedsOpCode %( )% ) %==  true ) 
//	\n g_opcode_%f_N(%P)_%f_N(%S) : TvcmOpID;\
   #13#10' g_opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% ' : TvcmOpID;'
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *4A8E9D3A01FEfor494F818000E6*
; // OperationsToVar


// реализация абстрактного стереотипа OperationsPublisher::Class
// Публикует операции
//%f _PublishOperations
: PublishOperations OBJECT IN %S
//#UC START# *4A770F770199for494F818000E6*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,"%f_N(%P)_%f_N(%S)")\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, [%f] N %( %P )% '_'
  [%f] N %( %S )% )% 
//	\n\
  #13#10
//	[{%S%f_NeedsOpCode()=true}\
  %IF ( ( %S %f NeedsOpCode %( )% ) %==  true ) 
//	 g_opcode_%f_N(%P)_%f_N(%S) :=\n \
   ' g_opcode_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% ' :='#13#10' '
//	]\
  %END-IF
//	 [{%S%f_IsInternalVCMOperation()=true}{\
  ' '
  %IF ( ( %S %f IsInternalVCMOperation %( )% ) %==  true ) 
   %ELSE
//	PublishOperation}\
    'PublishOperation' 
   %THEN
//	PublishInternalOperation]\
   'PublishInternalOperation' 
  %END-IF
//	(en_%f_N(%P),
  '(en_'
  [%f] N %( %P )% ','
//	                    op_%f_N(%S),
  '                    op_'
  [%f] N %( %S )% ','
//	                    en_cap%f_N(%P),
  '                    en_cap'
  [%f] N %( %P )% ','
//	                    op_cap%f_N(%S)[{%S{no prefix}=true}, true]);\
  '                    op_cap'
  [%f] N %( %S )% %IF ( ( %S get_up ( 'no prefix' ) ) %==  true ) 
   ', true' 
  %END-IF
  ');'
//	[{"%S{ImageIndex}"!=""}\
  %IF ( ( %S get_up ( 'ImageIndex' ) ) %!= '' ) 
//	\n SetOperationImageIndex(
   #13#10' SetOperationImageIndex('
//	                    en_%f_N(%P),
   '                    en_'
   [%f] N %( %P )% ','
//	                    op_%f_N(%S),
   '                    op_'
   [%f] N %( %S )% ','
//	                    %S{ImageIndex}[{%S{no prefix}=true}, true]);\
   '                    '
   %S get_up ( 'ImageIndex' ) %IF ( ( %S get_up ( 'no prefix' ) ) %==  true ) 
    ', true' 
   %END-IF
   ');'
//	]\
  %END-IF
//	]\
 %END-IF

//	<{}{%CS=VCMOperationState}\
 %FOR %ITEM-CONDITION ( ( %C |S ) %== 'VCMOperationState' ) 
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_STATES_LIST,"%f_N(%P)_%f_N(%S)_%f_N(%C)")!=true}\
  %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_STATES_LIST' %, [%f] N %( %P )% '_'
   [%f] N %( %S )% '_'
   [%f] N %( %C )% )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_STATES_LIST,"%f_N(%P)_%f_N(%S)_%f_N(%C)")\
   [%f] add_to_list %( 'PUBLISHED_OPERATIONS_STATES_LIST' %, [%f] N %( %P )% '_'
   [%f] N %( %S )% '_'
   [%f] N %( %C )% )% 
//	[\n %C#f_open_ifdef()]\
   %IF-NOT-EMPTY
    #13#10' '
    %C %?f open_ifdef %( )% 
   %END-IF
//	\n  with PublishOperationState(en_%f_N(%P), op_%f_N(%S), '%f_N(%C)'[{%S{no prefix}=true}, true]) do
   #13#10'  with PublishOperationState(en_'
   [%f] N %( %P )% ', op_'
   [%f] N %( %S )% ', '''
   [%f] N %( %C )% ''''
   %IF ( ( %S get_up ( 'no prefix' ) ) %==  true ) 
    ', true' 
   %END-IF
   ') do'
//	  begin\
   '  begin'
//	\n   st_user_%f_N(%P)_%f_N(%S)_%f_N(%C) := StateIndex;\
   #13#10'   st_user_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% '_'
   [%f] N %( %C )% ' := StateIndex;'
//	[\n   Caption := '%CD';]\
   %IF-NOT-EMPTY
    #13#10'   Caption := '''
    %C |D ''';' 
   %END-IF
//	[\n   Hint := '%C{Hint}';]\
   %IF-NOT-EMPTY
    #13#10'   Hint := '''
    %C get_up ( 'Hint' ) ''';' 
   %END-IF
//	[\n   ImageIndex := %C{ImageIndex};]\
   %IF-NOT-EMPTY
    #13#10'   ImageIndex := '
    %C get_up ( 'ImageIndex' ) ';' 
   %END-IF
//	[{%C{Enabled}!=undefined}\n   Enabled := %C{Enabled};]\
   %IF ( ( %C get_up ( 'Enabled' ) ) %!= 'undefined' ) 
    #13#10'   Enabled := '
    %C get_up ( 'Enabled' ) ';' 
   %END-IF
//	[{%C{Visible}!=undefined}\n   Visible := %C{Visible};]\
   %IF ( ( %C get_up ( 'Visible' ) ) %!= 'undefined' ) 
    #13#10'   Visible := '
    %C get_up ( 'Visible' ) ';' 
   %END-IF
//	[{%C{Checked}!=undefined}\n   Checked := %C{Checked};]
   %IF ( ( %C get_up ( 'Checked' ) ) %!= 'undefined' ) 
    #13#10'   Checked := '
    %C get_up ( 'Checked' ) ';' 
   %END-IF
//	  end;//with PublishOperationState(en_%f_N(%P), op_%f_N(%S), '%f_N(%C)'[{%S{no prefix}=true}, true])\
   '  end;//with PublishOperationState(en_'
   [%f] N %( %P )% ', op_'
   [%f] N %( %S )% ', '''
   [%f] N %( %C )% ''''
   %IF ( ( %S get_up ( 'no prefix' ) ) %==  true ) 
    ', true' 
   %END-IF
   ')'
//	[\n %C#f_close_ifdef()]\
   %IF-NOT-EMPTY
    #13#10' '
    %C %?f close_ifdef %( )% 
   %END-IF
//	]\
  %END-IF
//	>
 %END-FOR
//#UC END# *4A770F770199for494F818000E6*
; // PublishOperations


// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for494F818000E6*
//c          {}
//r {""=""}: {}
//#UC END# *4704C0E30186for494F818000E6*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor494F818000E6*
//	method
 'method'
//#UC END# *4705CBD6003Efor494F818000E6*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for494F818000E6*
//#UC END# *470484D50138for494F818000E6*
; // wiki_up_add_gen


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит ключевое слова типа абстракности
// 
// RealizeType = o|r|f
// Modification = get|set|area|arearef
//%f _pas_AbstractionKeyword
: pas_AbstractionKeyword OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3
//#UC START# *494BF05502ACfor494F818000E6*
//	[{"%2N"="r"}{\
 %IF ( ( %2 |N ) %== 'r' ) 
  %ELSE
//	[{"%2N"="o"}\
   %IF ( ( %2 |N ) %== 'o' ) 
//	 override;\
    ' override;'
//	]\
   %END-IF
//	}\
  %THEN
//	[{%3N!=callgate}\
  %IF ( ( %3 |N ) %!= 'callgate' ) 

//	 virtual;\
//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *494BF05502ACfor494F818000E6*
; // pas_AbstractionKeyword


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for494F818000E6*
//	[{%2N!=o}\
 %IF ( ( %2 |N ) %!= 'o' ) 
//	[{%f_exists_in_list(REALIZED_METHODS,"%f_N(%1)_%f_N(%P)_%f_N(%S)")!=true}\
  %IF ( ( [%f] exists_in_list %( 'REALIZED_METHODS' %, [%f] N %( %1 )% '_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(REALIZED_METHODS,"%f_N(%1)_%f_N(%P)_%f_N(%S)")\
   [%f] add_to_list %( 'REALIZED_METHODS' %, [%f] N %( %1 )% '_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% )% 

//	[{%S{is query}!=true}%S%f_pas_DoMethodImplementation(%1,%2,"test")]\
   %IF ( ( %S get_up ( 'is query' ) ) %!=  true ) 
    %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'test' )% 
   %END-IF
//	[{%S{has states}=true}%S%f_pas_DoMethodImplementation(%1,%2,"getstate")]\
   %IF ( ( %S get_up ( 'has states' ) ) %==  true ) 
    %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'getstate' )% 
   %END-IF
//	[{%S{is FormActivate}!=true|%S%f_IsInternalVCMOperation()=true}%S%f_pas_DoMethodImplementation(%1,%2,"exec")]\
   %IF ( ( %S get_up ( 'is FormActivate' ) ) %!=  true %|| 
     ( ( %S %f IsInternalVCMOperation %( )% ) %==  true  ) ) 
    %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'exec' )% 
   %END-IF


//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *494BEC7C03E5for494F818000E6*
; // pas_MethodImplementation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor494F818000E6*
//	[{%2N!=o}\
 %IF ( ( %2 |N ) %!= 'o' ) 
//	[{%f_exists_in_list(REALIZED_METHODS,"%f_N(%1)_%f_N(%P)_%f_N(%S)")!=true}\
  %IF ( ( [%f] exists_in_list %( 'REALIZED_METHODS' %, [%f] N %( %1 )% '_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(REALIZED_METHODS,"%f_N(%1)_%f_N(%P)_%f_N(%S)")\
   [%f] add_to_list %( 'REALIZED_METHODS' %, [%f] N %( %1 )% '_'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% )% 

//	%f_set_var(NEED_LF,"false")\
   [%f] set_var %( 'NEED_LF' %, false )% 
//	[{%S{is query}!=true}\
   %IF ( ( %S get_up ( 'is query' ) ) %!=  true ) 
//	%S%f_pas_DoMethodInterface(%1,%2,"test")\
    %S %f pas_DoMethodInterface %( %1 %, %2 %, 'test' )% 
//	%f_set_var(NEED_LF,"true")\
    [%f] set_var %( 'NEED_LF' %, true )% 
//	]\
   %END-IF


//	[{%S{has states}=true}\
   %IF ( ( %S get_up ( 'has states' ) ) %==  true ) 
//	[{%{NEED_LF}N=true}\n%f_set_var(NEED_LF,"false")]\
    %IF ( ( ( get_global_var ( 'NEED_LF' ) |N ) ) %==  true ) 
     #13#10
     [%f] set_var %( 'NEED_LF' %, false )% 
    %END-IF
//	%S%f_pas_DoMethodInterface(%1,%2,"getstate")\
    %S %f pas_DoMethodInterface %( %1 %, %2 %, 'getstate' )% 
//	%f_set_var(NEED_LF,"true")\
    [%f] set_var %( 'NEED_LF' %, true )% 
//	]\
   %END-IF


//	[{%S{is FormActivate}!=true|%S%f_IsInternalVCMOperation()=true}\
   %IF ( ( %S get_up ( 'is FormActivate' ) ) %!=  true %|| 
     ( ( %S %f IsInternalVCMOperation %( )% ) %==  true  ) ) 
//	[{%{NEED_LF}N=true}\n%f_set_var(NEED_LF,"false")]\
    %IF ( ( ( get_global_var ( 'NEED_LF' ) |N ) ) %==  true ) 
     #13#10
     [%f] set_var %( 'NEED_LF' %, false )% 
    %END-IF
//	%S%f_pas_DoMethodInterface(%1,%2,"exec")\
    %S %f pas_DoMethodInterface %( %1 %, %2 %, 'exec' )% 
//	%f_set_var(NEED_LF,"true")\
    [%f] set_var %( 'NEED_LF' %, true )% 
//	]\
   %END-IF


//	]\
  %END-IF
//	]
 %END-IF
//#UC END# *494BEC6A038Afor494F818000E6*
; // pas_MethodInterface


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя метода
//%f _pas_MethodName
: pas_MethodName OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for494F818000E6*
//	%f_N(%P)_%f_N(%S)[{%1N=exec}{[{%1N=getstate}{[{%1N=test}_Test]}_GetState]}_Execute]
 [%f] N %( %P )% '_'
 [%f] N %( %S )% %IF ( ( %1 |N ) %== 'exec' ) 
  %ELSE
   %IF ( ( %1 |N ) %== 'getstate' ) 
    %ELSE
     %IF ( ( %1 |N ) %== 'test' ) 
      '_Test' 
     %END-IF
    %THEN
    '_GetState' 
   %END-IF
  %THEN
  '_Execute' 
 %END-IF
//#UC END# *494BD6C80075for494F818000E6*
; // pas_MethodName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
//%f _pas_Params
: pas_Params OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor494F818000E6*
//	[{%1N=exec}{\
 %IF ( ( %1 |N ) %== 'exec' ) 
  %ELSE
//	[{%1N=getstate}{\
   %IF ( ( %1 |N ) %== 'getstate' ) 
    %ELSE
//	[{%1N=test}{\
     %IF ( ( %1 |N ) %== 'test' ) 
      %ELSE
//	%S%[inherited]f_pas_Params(%1)\
       call-inherited pas_Params %( %1 )%
//	}\
      %THEN
//	const aParams: IvcmTestParamsPrim\
      'const aParams: IvcmTestParamsPrim'
//	]\
     %END-IF
//	}\
    %THEN
//	var State: TvcmOperationStateIndex\
    'var State: TvcmOperationStateIndex'
//	]\
   %END-IF
//	}\
  %THEN
//	const aParams: IvcmExecuteParamsPrim\
  'const aParams: IvcmExecuteParamsPrim'
//	]
 %END-IF
//#UC END# *494BDCF3030Efor494F818000E6*
; // pas_Params


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа результата функции
//%f _pas_ResultTypeName
: pas_ResultTypeName OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDD190361for494F818000E6*
//	[{"%1N"=""}\
 %IF ( ( %1 |N ) %== '' ) 
//	%S%[inherited]f_pas_ResultTypeName(%1)\
  call-inherited pas_ResultTypeName %( %1 )%
//	]
 %END-IF
//#UC END# *494BDD190361for494F818000E6*
; // pas_ResultTypeName


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor494F818000E6*
//#UC END# *49F5795900ECfor494F818000E6*
; // dfm


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor494F818000E6*
//#UC END# *470F15B800CBfor494F818000E6*
; // impl.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor494F818000E6*
//	   \
 '   '
//	[{%S{is FormActivate}!=true}{\
 %IF ( ( %S get_up ( 'is FormActivate' ) ) %!=  true ) 
  %ELSE
//	FormActivate}\
   'FormActivate' 
  %THEN
//	[{%S{is query}!=true}{\
  %IF ( ( %S get_up ( 'is query' ) ) %!=  true ) 
   %ELSE
//	query}\
    'query' 
   %THEN
//	operation\
   'operation'
//	]\
  %END-IF
//	]\
 %END-IF
//	 %f_N(%S)\
 ' '
 [%f] N %( %S )% 
//	[(%S%f_pas_Params(""))][: %S%f_pas_ResultTypeName()]\
 %IF-NOT-EMPTY
  '('
  %S %f pas_Params %( '' )% ')' 
 %END-IF
 %IF-NOT-EMPTY
  ': '
  %S %f pas_ResultTypeName %( )% 
 %END-IF
//	;\
 ';'
//	[{%S{has states}=true} has states;\
 %IF ( ( %S get_up ( 'has states' ) ) %==  true ) 
  ' has states;'
//	]\
 %END-IF
//	[\n     \{* %SD \}]\
 %IF-NOT-EMPTY
  #13#10'     {* '
  %S |D ' }' 
 %END-IF
//	<[\n%CX]>
 %FOR %IF-NOT-EMPTY
   #13#10
   %C |X 
  %END-IF
 %END-FOR
//#UC END# *470F1571031Cfor494F818000E6*
; // intf.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for494F818000E6*
//#UC END# *477398E501C0for494F818000E6*
; // intf2.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for494F818000E6*
//#UC END# *4774D2A20372for494F818000E6*
; // intf3.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for494F818000E6*
//#UC END# *4DE79AFC0030for494F818000E6*
; // sd


// реализация абстрактного стереотипа Документация::MDAGenerator
// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor494F818000E6*
//#UC END# *4E65F581015Afor494F818000E6*
; // link_to_requests_hack


// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for494F818000E6*
//#UC END# *46E6D4BB0339for494F818000E6*
; // wiki


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for494F818000E6*
//	%S%f_Spell()
 %S %f Spell %( )% 
//#UC END# *4A41A13D03D5for494F818000E6*
; // spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<VCMOperationPrim>>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Implementation/TestResults.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Implementation::TestResults
//
// Результаты теста
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: TestResults::Class
implementation @ <<TestResults>>
//? Результаты теста
//> ScriptKeywordsDocumentation::Class

//= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
// Параметры визуализации
//$ C 64,224,208

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p needs script keywords documentation:tribool=undefined ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{needs script keywords documentation}"!="%S{!needs script keywords documentation}"}%f_up_prefix(%S) *needs script keywords documentation* = *%S{needs script keywords documentation}*
 ?inherited
 %IF ( ( %S get_up ( 'needs script keywords documentation' ) ) %!= ( %S get_up_def ( 'needs script keywords documentation' ) ) ) 
  [%f] up_prefix %( %S )% ' *needs script keywords documentation* = *'
  %S get_up ( 'needs script keywords documentation' ) '*'
//	]
 %END-IF

//%f _IsTestResults
; // wiki_up_print

: IsTestResults OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B7BFC1202D5for4B7BFBB103E2*
//	true
 true
//#UC END# *4B7BFC1202D5for4B7BFBB103E2*
; // IsTestResults


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4B7BFBB103E2*
//	%S%[inherited]\
 inherited
//	[{%Gx!=true}\
 %IF ( ( %G |x ) %!=  true ) 
//	[{"%{TTestResultsPlace}N"=""}%f_find_element(TTestResultsPlace,TTestResultsPlace)]\
  %IF ( ( ( get_global_var ( 'TTestResultsPlace' ) |N ) ) %== '' ) 
   [%f] find_element %( 'TTestResultsPlace' %, 'TTestResultsPlace' )% 
  %END-IF
//	%S%f_make_accessable(%{TTestResultsPlace}U)\
  %S %f make_accessable %( ( get_global_var ( 'TTestResultsPlace' ) |U ) )% 
//	%S%f_add_inheritable(%{TTestResultsPlace}U)\
  %S %f add_inheritable %( ( get_global_var ( 'TTestResultsPlace' ) |U ) )% 
//	]\
 %END-IF
//	[{"%{TTestResultsPlace_CommandLineKey}N"=""}%f_find_element(4B7AB0B6016E,TTestResultsPlace_CommandLineKey)]\
 %IF ( ( ( get_global_var ( 'TTestResultsPlace_CommandLineKey' ) |N ) ) %== '' ) 
  [%f] find_element %( '4B7AB0B6016E' %, 'TTestResultsPlace_CommandLineKey' )% 
 %END-IF
//	%{TTestResultsPlace_CommandLineKey}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TTestResultsPlace_CommandLineKey},%S)_var, {-})\
 ( get_global_var ( 'TTestResultsPlace_CommandLineKey' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'TTestResultsPlace_CommandLineKey' ) ) %, %S )% '_var' %, ' {-}' )% ) 
//	%{TTestResultsPlace_CommandLineKey}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TTestResultsPlace_CommandLineKey},%S)_impl, \
 ( get_global_var ( 'TTestResultsPlace_CommandLineKey' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'TTestResultsPlace_CommandLineKey' ) ) %, %S )% '_impl' %, ' '
//	Result := '-%f_cut_prefix(%f_N(%S),Release)';\
 'Result := ''-'
 [%f] cut_prefix %( [%f] N %( %S )% %, 'Release' )% ''';'
//	)\
)% ) 
//	[{%S{needs script keywords documentation}=true}\
 %IF ( ( %S get_up ( 'needs script keywords documentation' ) ) %==  true ) 
//	%S%f_add_class(%SU_KeywordsDocumentation,ScriptKeywordsDocumentation,Описание слов тестовой машины,KeywordsDocumentation_Inst)\
  %S %f add_class %( %S |U '_KeywordsDocumentation' %, 'ScriptKeywordsDocumentation' %, 'Описание слов тестовой машины' %, 'KeywordsDocumentation_Inst' )% 
//	%{KeywordsDocumentation_Inst}%f_set_documentation(Описание слов тестовой машины для "%f_N(%P%P)")\
  ( get_global_var ( 'KeywordsDocumentation_Inst' ) %f set_documentation %( 'Описание слов тестовой машины для "'
  [%f] N %( %P ->P  )% )% ) 

//	%f_clear_list(WasSpelledToKeywordsDocumentation_LIST)\
  [%f] clear_list %( 'WasSpelledToKeywordsDocumentation_LIST' )% 
//	%f_DoSpellKeywordsDocumentation(%P%P,%{KeywordsDocumentation_Inst})\
  [%f] DoSpellKeywordsDocumentation %( %P ->P  %, ( get_global_var ( 'KeywordsDocumentation_Inst' ) ) )% 


//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_del_var(WasSpelledToKeywordsDocumentation)>\

//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_del_var(WasSpelledToKeywordsDocumentation1)>\



//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_set_var(WasSpelledToKeywordsDocumentation,"")>\

//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_set_var(WasSpelledToKeywordsDocumentation1,"")>\


//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_set_var(_WasSpelled,"")>\
  ( get_global_var ( 'WasSpelledToKeywordsDocumentation_LIST' ) ) 
  %FOR %C %f set_var %( '_WasSpelled' %, '' )% 
  %END-FOR
//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%f_set_var(_WasSpelled1,"")>\
  ( get_global_var ( 'WasSpelledToKeywordsDocumentation_LIST' ) ) 
  %FOR %C %f set_var %( '_WasSpelled1' %, '' )% 
  %END-FOR



//	%{WasSpelledToKeywordsDocumentation_LIST}<%C%%f_del_var(WasSpelledTo)>\

// - НЕЛЬЗЯ это делать, т.к. WasSpelledTo нам ПОТОМ понадобится
//	%f_clear_list(WasSpelledToKeywordsDocumentation_LIST)\
  [%f] clear_list %( 'WasSpelledToKeywordsDocumentation_LIST' )% 
//	]
 %END-IF

//f _DoSpellKeywordsDocumentation
; // DoSpell

end. // <<TestResults>>

: DoSpellKeywordsDocumentation OBJECT IN %S
//	[{%S%{_WasSpelled1}N!=true}\
 %IF ( ( %S ( get_object_var ( '_WasSpelled1' ) |N )  ) %!=  true ) 
//	%S%f_set_var(_WasSpelled1,"true")\
  %S %f set_var %( '_WasSpelled1' %, true )% 
//	[{%S%{WasSpelledToKeywordsDocumentation1}N!=true}\

//	%S%f_set_var(WasSpelledToKeywordsDocumentation1,"true")\
//	%f_add_to_list(WasSpelledToKeywordsDocumentation_LIST,S)\
  [%f] add_to_list %( 'WasSpelledToKeywordsDocumentation_LIST' %, 'S' )% 
//	%S#f_SpellKeywordsDocumentation(%1)\
  %S %?f SpellKeywordsDocumentation %( %1 )% 
//	<%f_DoSpellKeywordsDocumentation(%D,%1)>
  %FOR [%f] DoSpellKeywordsDocumentation %( %D %, %1 )% 
  %END-FOR
//	]
 %END-IF
//#UC END# *4B2A19E3038Bfor4B7BFBB103E2*
; // DoSpellKeywordsDocumentation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
//%f _pas_TypeName
implementation @ <<TestResults>>
: pas_TypeName OBJECT IN %S
//#UC START# *4947F8AD02A1for4B7BFBB103E2*
//	T%f_N(%S)
 'T'
 [%f] N %( %S )% 
//#UC END# *4947F8AD02A1for4B7BFBB103E2*
; // pas_TypeName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<TestResults>>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Packages/Interfaces.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Packages::Interfaces
//
// Интерфейсный пакет
// ---
// Содержит экспортируемые наружу компоненты типы и интерфейсы. Определяет неймспейс. Может
// зависить только от других интерфейсных пакетов (своей компоненты или чужой)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Interfaces::Category
implementation @ <<Interfaces>>
//? Интерфейсный пакет
//? Содержит экспортируемые наружу компоненты типы и интерфейсы. Определяет неймспейс. Может зависить только от других интерфейсных пакетов (своей компоненты или чужой)
//> Interface::Class
//> ImpurityParamType::Class
//> ConstantArray::Class
//> Event::Class
//> Settings::Class

//= InterfacePackageBase::Category
//= C++ интерфейсы и реализация::MDAGenerator
//= Java::MDAGenerator
//= Дельфи-DLL Адаптер::MDAGenerator
//= C++ Фабрики::MDAGenerator
//= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_interfaces.gif
//L code_interfaces
//D
// - запрещена форвард-декларация

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p weak:b=false ? определяет что модуль может шариться между динамичексими пакетами
//p path prefix:s ? определяет префикс пути
//p defines:s ? определяет файл с условиями компиляции
//p author:s ? автор
//p started:s ? дата и время начала
//p no hands:b=false ? предупреждение о том, что руками править нельзя (на время переходного периода)
//p debug tie log:b=false ? Нужно ли генерить логирование вызов всех tie-методов, на всех интерфейсах/фасетах, определённых в пакете

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[Delphi интерфейсы и реализация::MDAGenerator]f_wiki_up_print()[{"%S{weak}"!="%S{!weak}"}%f_up_prefix(%S) *weak* = *%S{weak}* - определяет что модуль может шариться между динамичексими пакетами
 call-inherited:: 'Delphi интерфейсы и реализация' wiki_up_print %( )%
 %IF ( ( %S get_up ( 'weak' ) ) %!= ( %S get_up_def ( 'weak' ) ) ) 
  [%f] up_prefix %( %S )% ' *weak* = *'
  %S get_up ( 'weak' ) '* - определяет что модуль может шариться между динамичексими пакетами'
//	][{"%S{path prefix}"!="%S{!path prefix}"}%f_up_prefix(%S) *path prefix* = *%S{path prefix}* - определяет префикс пути
 %END-IF
 %IF ( ( %S get_up ( 'path prefix' ) ) %!= ( %S get_up_def ( 'path prefix' ) ) ) 
  [%f] up_prefix %( %S )% ' *path prefix* = *'
  %S get_up ( 'path prefix' ) '* - определяет префикс пути'
//	][{"%S{defines}"!="%S{!defines}"}%f_up_prefix(%S) *defines* = *%S{defines}* - определяет файл с условиями компиляции
 %END-IF
 %IF ( ( %S get_up ( 'defines' ) ) %!= ( %S get_up_def ( 'defines' ) ) ) 
  [%f] up_prefix %( %S )% ' *defines* = *'
  %S get_up ( 'defines' ) '* - определяет файл с условиями компиляции'
//	][{"%S{author}"!="%S{!author}"}%f_up_prefix(%S) *author* = *%S{author}* - автор
 %END-IF
 %IF ( ( %S get_up ( 'author' ) ) %!= ( %S get_up_def ( 'author' ) ) ) 
  [%f] up_prefix %( %S )% ' *author* = *'
  %S get_up ( 'author' ) '* - автор'
//	][{"%S{started}"!="%S{!started}"}%f_up_prefix(%S) *started* = *%S{started}* - дата и время начала
 %END-IF
 %IF ( ( %S get_up ( 'started' ) ) %!= ( %S get_up_def ( 'started' ) ) ) 
  [%f] up_prefix %( %S )% ' *started* = *'
  %S get_up ( 'started' ) '* - дата и время начала'
//	][{"%S{no hands}"!="%S{!no hands}"}%f_up_prefix(%S) *no hands* = *%S{no hands}* - предупреждение о том, что руками править нельзя (на время переходного периода)
 %END-IF
 %IF ( ( %S get_up ( 'no hands' ) ) %!= ( %S get_up_def ( 'no hands' ) ) ) 
  [%f] up_prefix %( %S )% ' *no hands* = *'
  %S get_up ( 'no hands' ) '* - предупреждение о том, что руками править нельзя (на время переходного периода)'
//	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - Явно включает генерацию дополнительных секций Юзер-Кода
 %END-IF
 %IF ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) 
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '* - Явно включает генерацию дополнительных секций Юзер-Кода'
//	][{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли модуль неймспейсом
 %END-IF
 %IF ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) 
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли модуль неймспейсом'
//	][{"%S{debug tie log}"!="%S{!debug tie log}"}%f_up_prefix(%S) *debug tie log* = *%S{debug tie log}* - Нужно ли генерить логирование вызов всех tie-методов, на всех интерфейсах/фасетах, определённых в пакете
 %END-IF
 %IF ( ( %S get_up ( 'debug tie log' ) ) %!= ( %S get_up_def ( 'debug tie log' ) ) ) 
  [%f] up_prefix %( %S )% ' *debug tie log* = *'
  %S get_up ( 'debug tie log' ) '* - Нужно ли генерить логирование вызов всех tie-методов, на всех интерфейсах/фасетах, определённых в пакете'
//	]
 %END-IF

//%f _pas_BeforeUnitImplementation
; // wiki_up_print

: pas_BeforeUnitImplementation OBJECT IN %S
//#UC START# *4A82C8F9037Cfor4704865603A9*
//#UC END# *4A82C8F9037Cfor4704865603A9*
; // pas_BeforeUnitImplementation


// Предназначена для перекрытия в потомках, чтоб иметь возможность сгенерить дополнительные инклуды.
//%f _additional_includes
: additional_includes OBJECT IN %S
//#UC START# *4B4C82AB0199for4704865603A9*
//#UC END# *4B4C82AB0199for4704865603A9*
; // additional_includes


//%f _IsInterfaces
: IsInterfaces OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4E71D8FE00E9for4704865603A9*
//	true
 true
//#UC END# *4E71D8FE00E9for4704865603A9*
; // IsInterfaces


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент производит файл (Unit)
//%f _IsUnitFileProducer
: IsUnitFileProducer OBJECT IN %S
//#UC START# *4947EC0F0380for4704865603A9*
//	true
 true
//#UC END# *4947EC0F0380for4704865603A9*
; // IsUnitFileProducer


// перекрытие базового стереотипа WikiPackageImpl::Category
// Определяет, что пакет должен генериться в документации в секцию "Интерфейсные пакеты"
//%f _wiki_interface_package
: wiki_interface_package OBJECT IN %S
//#UC START# *48578600008Dfor4704865603A9*
//	true
 true
//#UC END# *48578600008Dfor4704865603A9*
; // wiki_interface_package


// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор файлов реализации для фабрик интерфейсов (.cpp)
//+ fctr.cpp
<<generator>> fctr.cpp OBJECT IN %S
//#UC START# *4705C54B01F4for4704865603A9*
//P
//C /%SN
//O [{"%f_need_factory_files(%S)"="true"}%SNFactories.cpp]
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{"%f_need_factory_files(%S)"="true"}\
 %IF ( ( [%f] need_factory_files %( %S )% ) %== true ) 
//	%f_header(%S)
  [%f] header %( %S )% 
//	%f_std_inc(%S)
  [%f] std_inc %( %S )% 
//	[%P<{}{"%CM"="Interfaces::Category"}{%C}%C[{<{}{"%AM"="Identity::Class"}{C}>!=0}\#include %f_dump_include_path(%f_with_gen_id(p.h,%SL),%S)
  %IF-NOT-EMPTY
   %P
   %FOR %ITEM-CONDITION ( ( %C |M ) %== 'Interfaces::Category' ) 
    ( %C ) 
    %C%IF ( 
     %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Identity::Class' ) 
      ( 'C' ) 
     %END-FOR
     %!= 0 ) 
     '#include '
     [%f] dump_include_path %( [%f] with_gen_id %( 'p.h' %, %S |L )% %, %S )% 
//	]>][{%f_need_lexical_cast_pack(%S)=true}\#include "boost/lexical_cast.hpp"
    %END-IF
    %END-FOR
   %END-IF
  %IF ( ( [%f] need_lexical_cast_pack %( %S )% ) %==  true ) 
   '#include "boost/lexical_cast.hpp"'
//	][{<{}{%C#f_has_multi_factory()=true&%Ca!=abstract}{%CC}>!=0}\#include "boost/bind.hpp"
  %END-IF
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %C %?f has_multi_factory %( )% ) %==  true %&& 
     ( ( %C |a ) %!= 'abstract'  ) ) 
    ( %C |C ) 
   %END-FOR
   %!= 0 ) 
   '#include "boost/bind.hpp"'
//	]\#include %f_dump_include_path(%f_with_gen_id(fctr.h,%SL),%S)
  %END-IF
  '#include '
  [%f] dump_include_path %( [%f] with_gen_id %( 'fctr.h' %, %S |L )% %, %S )% 
//	[
  %IF-NOT-EMPTY

//	//includes by FactoryMemories \<\<uses\>\>
   '//includes by FactoryMemories <<uses>>'
//	<{}{%AS=FactoryMemory&%A<{}{%CS=common key}{%CC}>!=0}%A<{}{%CS=uses&%CC=Dependency}\#include %f_dump_include_path(%f_with_gen_id(h,%C%TW),%C%T)
   %FOR %ITEM-CONDITION ( ( %A |S ) %== 'FactoryMemory' %&& 
     ( ( %A
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'common key' ) 
     ( %C |C ) 
    %END-FOR
 )     %!= 0  ) ) 
    %A
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'uses' %&& 
      ( ( %C |C ) %== 'Dependency'  ) ) 
     '#include '
     [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %C ->T |W  )% %, %C ->T  )% 
//	>>][{<{}{%AC=Operation&%AS=multi factory&%A{transparent multy}=true}{%AC}>!=0}
    %END-FOR
    %END-FOR
  %END-IF
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %A |C ) %== 'Operation' %&& 
     ( ( %A |S ) %== 'multi factory'  ) %&& 
     ( ( %A get_up ( 'transparent multy' ) ) %==  true  ) ) 
    ( %A |C ) 
   %END-FOR
   %!= 0 ) 

//	%U[{_CUSTOM_INCLUDES_FOR_TRANSPARENT_MULTI_FACTORY}
   %U%IF ( '_CUSTOM_INCLUDES_FOR_TRANSPARENT_MULTI_FACTORY' ) 

//	]
   %END-IF
 //	][{<{}{%AC=Operation&%f_is_factory(%A)=true&%A<{}{%CS=cache}{%CC}>!=0}{%AC}>!=0}
  %END-IF
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %A |C ) %== 'Operation' %&& 
     ( ( [%f] is_factory %( %A )% ) %==  true  ) %&& 
     ( ( %A
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'cache' ) 
     ( %C |C ) 
    %END-FOR
 )     %!= 0  ) ) 
    ( %A |C ) 
   %END-FOR
   %!= 0 ) 

//	%U[{_CUSTOM_INCLUDES_FOR_FOR_CACHED_ARGS}
   %U%IF ( '_CUSTOM_INCLUDES_FOR_FOR_CACHED_ARGS' ) 

//	]
   %END-IF
 //	][
  %END-IF
  %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
   %S %f open_ifdef %( )% 
  %END-IF
//	%SP[{"%S{is namespace}"="true"}namespace %SN {
  %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   'namespace '
   %S |N ' {'
//	]<%CX>[{"%S{is namespace}"="true"}} // namespace %SN
  %END-IF
  %FOR %C |X 
  %END-FOR
  %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   '} // namespace '
   %S |N 
//	]%Sp
  %END-IF
  %S |p 
//	%f_footer(%S)
  [%f] footer %( %S )% 
//	]
 %END-IF

//f _need_lexical_cast_pack
; // fctr.cpp

end. // <<Interfaces>>

: need_lexical_cast_pack OBJECT IN %S
//	%f_set_var(FLAG,"false")<{}{%AS=Entity|%AS=Interface|%AS=ServerInterface|%AS=LocalInterface}[{%{FLAG}N!=true}%f_set_var(FLAG,"%f_need_lexical_cast(%A)")]>\
 [%f] set_var %( 'FLAG' %, false )% 
 %FOR %ITEM-CONDITION ( ( %A |S ) %== 'Entity' %|| 
   ( ( %A |S ) %== 'Interface'  ) %|| 
   ( ( %A |S ) %== 'ServerInterface'  ) %|| 
   ( ( %A |S ) %== 'LocalInterface'  ) ) 
  %IF ( ( ( get_global_var ( 'FLAG' ) |N ) ) %!=  true ) 
   [%f] set_var %( 'FLAG' %, [%f] need_lexical_cast %( %A )% )% 
  %END-IF
 %END-FOR
//	%{FLAG}N
 ( get_global_var ( 'FLAG' ) |N ) 

//f _need_lexical_cast
; // need_lexical_cast_pack

: need_lexical_cast OBJECT IN %S
//	%f_set_var(TEMP,"%S%f_dump_switch_type_name()")[{"%{TEMP}N"!=""&%f_is_string(%{TEMP})=false}{false}true]
 [%f] set_var %( 'TEMP' %, %S %f dump_switch_type_name %( )% )% %IF ( ( ( get_global_var ( 'TEMP' ) |N ) ) %!= '' %&& 
   ( ( [%f] is_string %( ( get_global_var ( 'TEMP' ) ) )% ) %==  false  ) ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF

//f _need_typeinfo_include_pack
; // need_lexical_cast

: need_typeinfo_include_pack OBJECT IN %S
//	[{<{}{%f_kind_of(A,LocalInterface::Class)=true&%A#f_use_bad_cast()=true}{%AC}>!=0}{false}true]
 %IF ( 
  %FOR %ITEM-CONDITION ( ( [%f] kind_of %( 'A' %, 'LocalInterface::Class' )% ) %==  true %&& 
    ( ( %A %?f use_bad_cast %( )% ) %==  true  ) ) 
   ( %A |C ) 
  %END-FOR
  %!= 0 ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4705C54B01F4for4704865603A9*
; // need_typeinfo_include_pack


// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор заголовочных файлов для фабрик интерфейсов (.h)
//+ fctr.h
implementation @ <<Interfaces>>
<<generator>> fctr.h OBJECT IN %S
//#UC START# *4705C5490109for4704865603A9*
//C /%SN
//O [{"%f_need_factory_files(%S)"="true"|<{}{%AS=FactoryMemory}{%AC}>!=0}%SNFactories.h]
//P
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{"%f_need_factory_files(%S)"="true"|<{}{%AS=FactoryMemory}{%AC}>!=0}\
 %IF ( ( [%f] need_factory_files %( %S )% ) %== true %|| 
   ( 
  %FOR %ITEM-CONDITION ( ( %A |S ) %== 'FactoryMemory' ) 
   ( %A |C ) 
  %END-FOR
  %!= 0  ) ) 
//	%f_h_header(%S)
  [%f] h_header %( %S )% 
//	%f_std_inc(%S)
  [%f] std_inc %( %S )% 
//	\#include \<map\>
  '#include <map>'
//	\#include \<string\>
  '#include <string>'
//	\#include "ace/Singleton.h"
  '#include "ace/Singleton.h"'
//	\#include %f_dump_include_path(%f_with_gen_id(h,%SL),%S)[<{}{%SS=%DS&%f_set_var(DEP,D)"%S<{}{%CS=Interface}%C<{}{%ga=abstract&%g%PU=%{DEP}U}.>>"!=""}[
  '#include '
  [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %S |L )% %, %S )% %IF-NOT-EMPTY
   %FOR %ITEM-CONDITION ( ( %S |S ) %== ( %D |S ) %&& 
     ( ( [%f] set_var %( 'DEP' %, 'D' )% ) ( %S
    %FOR %ITEM-CONDITION ( ( %C |S ) %== 'Interface' ) 
     %C
     %FOR %ITEM-CONDITION ( ( %g |a ) %== 'abstract' %&& 
       ( ( %g ->P |U  ) %== ( ( get_global_var ( 'DEP' ) |U ) )  ) ) 
      '.' 
     %END-FOR
     %END-FOR
 )     %!= ''  ) ) 
    %IF-NOT-EMPTY

//	\#include %f_dump_include_path(%DL,%D)]>][{<{}{"%AM"="Entity::Class"&"%Aa"!="abstract"}{C}>!=0}
     '#include '
     [%f] dump_include_path %( %D |L %, %D )% 
    %END-IF
   %END-FOR
  %END-IF
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %A |M ) %== 'Entity::Class' %&& 
     ( ( %A |a ) %!= 'abstract'  ) ) 
    ( 'C' ) 
   %END-FOR
   %!= 0 ) 

//	\#include "%f_with_gen_id(h,%PL)"]\
   '#include "'
   [%f] with_gen_id %( 'h' %, %P |L )% 
  %END-IF
//	%S%f_additional_includes()[
  %S %f additional_includes %( )% %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
   %S %f open_ifdef %( )% 
  %END-IF
//	

//	%SP[{"%S{is namespace}"="true"}namespace %SN {
  %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   'namespace '
   %S |N ' {'
//	][{<{}{"%CM"="Entity::Class"}{C}>!=0}
  %END-IF
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %C |M ) %== 'Entity::Class' ) 
    ( 'C' ) 
   %END-FOR
   %!= 0 ) 

//	// Entityes UID's
   '// Entityes UID's'
//	<{}{"%CM"="Entity::Class"}{%C}static const %f_type("unsigned long long") %CN_UID = 0x%CU;
   %FOR %ITEM-CONDITION ( ( %C |M ) %== 'Entity::Class' ) 
    ( %C ) 
    'static const '
    [%f] type %( 'unsigned long long' )% ' '
    %C |N '_UID = 0x'
    %C |U ';'
//	>]<[%CX
   %END-FOR
  %END-IF
  %FOR %IF-NOT-EMPTY
    %C |X 
//	

//	]>[{"%S{is namespace}"="true"}} // namespace %SN
   %END-IF
  %END-FOR
  %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   '} // namespace '
   %S |N 
//	]%Sp
  %END-IF
  %S |p 
//	%f_h_footer(%S)
  [%f] h_footer %( %S )% 
//	]
 %END-IF
//#UC END# *4705C5490109for4704865603A9*
; // fctr.h


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor4704865603A9*
//P
//C /%SN
//O [{"%f_need_factory_files(%S)"="true"|%f_need_impl_cpp(%S)=true}%SN.cpp]
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{"%f_need_factory_files(%S)"="true"|%f_need_impl_cpp(%S)=true}{<%CX>}\
 %IF ( ( [%f] need_factory_files %( %S )% ) %== true %|| 
   ( ( [%f] need_impl_cpp %( %S )% ) %==  true  ) ) 
  %ELSE
   %FOR %C |X 
   %END-FOR
  %THEN
//	%f_header(%S)
  [%f] header %( %S )% 
//	%f_std_inc(%S)
  [%f] std_inc %( %S )% 
//	[\#include %f_dump_include_path(%f_with_gen_id(h,%SL),%S)
  %IF-NOT-EMPTY
   '#include '
   [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %S |L )% %, %S )% 
//	][\#include %f_dump_include_path(%f_with_gen_id(fctr.h,%SL),%S)
  %END-IF
  %IF-NOT-EMPTY
   '#include '
   [%f] dump_include_path %( [%f] with_gen_id %( 'fctr.h' %, %S |L )% %, %S )% 
//	][
  %END-IF
  %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
   %S %f open_ifdef %( )% 
  %END-IF
//	%SP[{"%S{is namespace}"="true"}namespace %SN {
  %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   'namespace '
   %S |N ' {'
//	]
  %END-IF
//	<%CX>[{"%S{is namespace}"="true"}} // namespace %SN
  %FOR %C |X 
  %END-FOR
  %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   '} // namespace '
   %S |N 
//	]%Sp
  %END-IF
  %S |p 
//	%f_footer(%S)
  [%f] footer %( %S )% 
//	]
 %END-IF
//#UC END# *47022CB8034Bfor4704865603A9*
; // cpp


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor4704865603A9*
//C /%SN
//O %SN.h
//P
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	%f_h_header(%S)
 [%f] h_header %( %S )% 
//	%f_std_inc(%S)
 [%f] std_inc %( %S )% 
//	%f_set_var(PACK,S)%f_includes_by_contents(%S)\
 [%f] set_var %( 'PACK' %, 'S' )% [%f] includes_by_contents %( %S )% 
//	%f_dump_interfaces_includes(%S)\
 [%f] dump_interfaces_includes %( %S )% 
//	[{%S{need UC}=true}%U[{_CUSTOM_INCLUDE}
 %IF ( ( %S get_up ( 'need UC' ) ) %==  true ) 
  %U%IF ( '_CUSTOM_INCLUDE' ) 

//	]
  %END-IF
 //	][
 %END-IF
 %IF-NOT-EMPTY

//	%S%f_open_ifdef()][// forward decls for friend interface's servants
  %S %f open_ifdef %( )% 
 %END-IF
 %IF-NOT-EMPTY
  '// forward decls for friend interface's servants'
//	%f_dump_fwd_for_interfaces_friends(%S)]
  [%f] dump_fwd_for_interfaces_friends %( %S )% 
 %END-IF
//	%SP[{"%S{is namespace}"="true"}namespace %SN {
 %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
  'namespace '
  %S |N ' {'
//	]
 %END-IF
//	<%CX
 %FOR %C |X 
//	

//	>[{"%S{is namespace}"="true"}} // namespace %SN
 %END-FOR
 %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
  '} // namespace '
  %S |N 
//	]%Sp[
 %END-IF
 %S |p %IF-NOT-EMPTY

//	// TypeTraits specializations
  '// TypeTraits specializations'
//	namespace Core {	
  'namespace Core {	'
//	<{}{%CM=Interface::Class&%f_has_factory_methods(%C)=true}\
  %FOR %ITEM-CONDITION ( ( %C |M ) %== 'Interface::Class' %&& 
    ( ( [%f] has_factory_methods %( %C )% ) %==  true  ) ) 
//	template \<\>
   'template <>'
//	struct TypeTraits \<%f_full_name(%C)\> {
   'struct TypeTraits <'
   [%f] full_name %( %C )% '> {'
//		typedef %f_full_name(%C)Factory Factory;
   '	typedef '
   [%f] full_name %( %C )% 'Factory Factory;'
//	};
   '};'
//	>} // namespace Core
  %END-FOR
  '} // namespace Core'
//	]
 %END-IF
//	%f_h_footer(%S)
 [%f] h_footer %( %S )% 

//f _dump_interfaces_includes
; // h

end. // <<Interfaces>>

: dump_interfaces_includes OBJECT IN %S
//	%f_clear_list(INCLUDES)\
 [%f] clear_list %( 'INCLUDES' )% 
//	%f_collect_interfaces_includes(%S,"INCLUDES")\
 [%f] collect_interfaces_includes %( %S %, 'INCLUDES' )% 
//	<{}{%f_is_empty(INCLUDES)=false}{W}[%f_pop_first_to_var(INCLUDES,ITEM)\#include %{ITEM}N
 %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'INCLUDES' )% ) %==  false ) 
  ( 'W' ) 
  %IF-NOT-EMPTY
   [%f] pop_first_to_var %( 'INCLUDES' %, 'ITEM' )% '#include '
   ( get_global_var ( 'ITEM' ) |N ) 
//	]>
  %END-IF
 %END-FOR

//f _collect_interfaces_includes
; // dump_interfaces_includes

: collect_interfaces_includes OBJECT IN %S
//	[{"%1N"=""}%f_error("_collect_interfaces_includes: Не задан идентификатор списка!")]\
 %IF ( ( %1 |N ) %== '' ) 
  [%f] error %( '_collect_interfaces_includes: Не задан идентификатор списка!' )% 
 %END-IF
//	%f_set_var(__LIST_ID__,1)\
 [%f] set_var %( '__LIST_ID__' %, 1 )% 
//	<[{%D#f_IsUnit()=true}%D<{}{%C#f_IsUtilityPack()=true&%f_use_in_pack_child(%C)=true}%f_add_to_list(%{__LIST_ID__}N,"%f_dump_include_path(%CL,%C)")>]\
 %FOR %IF ( ( %D %?f IsUnit %( )% ) %==  true ) 
   %D
   %FOR %ITEM-CONDITION ( ( %C %?f IsUtilityPack %( )% ) %==  true %&& 
     ( ( [%f] use_in_pack_child %( %C )% ) %==  true  ) ) 
    [%f] add_to_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, [%f] dump_include_path %( %C |L %, %C )% )% 
   %END-FOR
   %END-IF
//	[%f_add_to_list(%{__LIST_ID__}N,"%f_dump_include_path(%DL,%D)")]>\
  %IF-NOT-EMPTY
   [%f] add_to_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, [%f] dump_include_path %( %D |L %, %D )% )% 
  %END-IF
 %END-FOR
//	<{}{}%C<{}{%wN!=System}[%f_add_to_list(%{__LIST_ID__}N,"%f_dump_include_path(%wL,%w)")]>>\
 %FOR %C
  %FOR %ITEM-CONDITION ( ( %w |N ) %!= 'System' ) 
   %IF-NOT-EMPTY
    [%f] add_to_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, [%f] dump_include_path %( %w |L %, %w )% )% 
   %END-IF
  %END-FOR
  %END-FOR
//	%f_remove_from_list(%{__LIST_ID__}N,"%f_dump_include_path(%SL,%S)")\
 [%f] remove_from_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, [%f] dump_include_path %( %S |L %, %S )% )% 
//	%f_remove_from_list(%{__LIST_ID__}N,"")\
 [%f] remove_from_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, '' )% 
//	%f_sort_list(%{__LIST_ID__}N,n)%f_unique_list(%{__LIST_ID__}N)
 [%f] sort_list %( ( get_global_var ( '__LIST_ID__' ) |N ) %, 'n' )% [%f] unique_list %( ( get_global_var ( '__LIST_ID__' ) |N ) )% 

//f _dump_fwd_for_interfaces_friends
; // collect_interfaces_includes

: dump_fwd_for_interfaces_friends OBJECT IN %S
//	<{}{}{%C}[
 %FOR ( %C ) 
  %IF-NOT-EMPTY

//	%C<{}{"%aM"="Interface::Class::friend::ClassDependency"}{Sp}%f_get_all_consumer_list(%a%P)%a%P<{}{%f_is_empty(CONSUMER_LIST)=false}{W}%f_pop_first_to_var(CONSUMER_LIST,TEMP)[{%{TEMP}S=Servant}%f_in_scope_name(%{TEMP})
   %C
   %FOR %ITEM-CONDITION ( ( %a |M ) %== 'Interface::Class::friend::ClassDependency' ) 
    ( 'Sp' ) 
    [%f] get_all_consumer_list %( %a ->P  )% %a ->P
    %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'CONSUMER_LIST' )% ) %==  false ) 
     ( 'W' ) 
     [%f] pop_first_to_var %( 'CONSUMER_LIST' %, 'TEMP' )% %IF ( ( ( get_global_var ( 'TEMP' ) |S ) ) %== 'Servant' ) 
      [%f] in_scope_name %( ( get_global_var ( 'TEMP' ) ) )% 
//	]>>][{%C<{}{%CV!=PublicAccess&%CC!=Class}{%CC}>!=0}%f_get_all_consumer_list(%C)%f_set_var(INT,C)%C<{}{%f_is_empty(CONSUMER_LIST)=false}{W}%f_pop_first_to_var(CONSUMER_LIST,TEMP)[{%{TEMP}S=LocalInterface&%{TEMP}a!=abstract&[{%f_need_const_wrapper(%{TEMP})=true|%f_need_const_wrapper(%{INT})=true}{false}true]=true}%f_in_scope_name(%{TEMP},"ConstWrapper")
     %END-IF
    %END-FOR
     %END-FOR
   %END-IF
  %IF ( ( %C
   %FOR %ITEM-CONDITION ( ( %C |V ) %!= 'PublicAccess' %&& 
     ( ( %C |C ) %!= 'Class'  ) ) 
    ( %C |C ) 
   %END-FOR
 )    %!= 0 ) 
   [%f] get_all_consumer_list %( %C )% [%f] set_var %( 'INT' %, 'C' )% %C
   %FOR %ITEM-CONDITION ( ( [%f] is_empty %( 'CONSUMER_LIST' )% ) %==  false ) 
    ( 'W' ) 
    [%f] pop_first_to_var %( 'CONSUMER_LIST' %, 'TEMP' )% %IF ( ( ( get_global_var ( 'TEMP' ) |S ) ) %== 'LocalInterface' %&& 
      ( ( ( get_global_var ( 'TEMP' ) |a ) ) %!= 'abstract'  ) %&& 
      ( %IF ( ( [%f] need_const_wrapper %( ( get_global_var ( 'TEMP' ) ) )% ) %==  true %|| 
       ( ( [%f] need_const_wrapper %( ( get_global_var ( 'INT' ) ) )% ) %==  true  ) ) 
      %ELSE
        false 
      %THEN
       true 
     %END-IF
     %==  true  ) ) 
     [%f] in_scope_name %( ( get_global_var ( 'TEMP' ) ) %, 'ConstWrapper' )% 
//	]>]>
    %END-IF
   %END-FOR
   %END-IF
 %END-FOR
//f _get_all_consumer_list
; // dump_fwd_for_interfaces_friends

: get_all_consumer_list OBJECT IN %S
//	%f_clear_list(CONSUMER_LIST)\
 [%f] clear_list %( 'CONSUMER_LIST' )% 
//	%f_fill_consumer_list(%S)\
 [%f] fill_consumer_list %( %S )% 
//	%f_unique_list(CONSUMER_LIST)
 [%f] unique_list %( 'CONSUMER_LIST' )% 

//f _fill_consumer_list
; // get_all_consumer_list

: fill_consumer_list OBJECT IN %S
//	[{%Lx=true}<{}{}{%L}%f_add_to_list(CONSUMER_LIST,L)%f_fill_consumer_list(%L)>]\
 %IF ( ( %L |x ) %==  true ) 
  %FOR ( %L ) 
   [%f] add_to_list %( 'CONSUMER_LIST' %, 'L' )% [%f] fill_consumer_list %( %L )% 
  %END-FOR
 %END-IF
//	[{%Zx=true}<{}{}{%Z}%f_add_to_list(CONSUMER_LIST,Z)%f_fill_consumer_list(%Z)>]
 %IF ( ( %Z |x ) %==  true ) 
  %FOR ( %Z ) 
   [%f] add_to_list %( 'CONSUMER_LIST' %, 'Z' )% [%f] fill_consumer_list %( %Z )% 
  %END-FOR
 %END-IF
//#UC END# *47022C88029Ffor4704865603A9*
; // fill_consumer_list


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
//+ i.h
implementation @ <<Interfaces>>
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor4704865603A9*
//C /%SN
//P
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//#UC END# *47022CCF00EAfor4704865603A9*
; // i.h


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor4704865603A9*
//R  
//C %S%f_pas_UnitPath()
//O [{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)
//	%f_pas_OpenUnitInterface(%S)\
 [%f] pas_OpenUnitInterface %( %S )% 
//	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	[\n%S%f_open_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f open_ifdef %( )% 
  %END-IF
//	]\
 %END-IF
//	%f_pas_Uses(%S)\
 [%f] pas_Uses %( %S )% 
//	%f_pas_CloseUses(%S)\
 [%f] pas_CloseUses %( %S )% //

//	<{}{%C{is default ancestor}=true}%CX\
 %FOR %ITEM-CONDITION ( ( %C get_up ( 'is default ancestor' ) ) %==  true ) 
  %C |X 
//	%f_set_var(DEFAULT_ANCESTOR,"%CN")\n>\
  [%f] set_var %( 'DEFAULT_ANCESTOR' %, %C |N )% #13#10 
 %END-FOR
//	<{\n}{%C{is default ancestor}!=true}%CX>\
 %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
  %ITEM-CONDITION ( ( %C get_up ( 'is default ancestor' ) ) %!=  true ) 
  %C |X 
 %END-FOR
//	%f_with_gen_id(intf3.pas,[\n\n<{\n}{%CS!=UseCaseController}%CX>])
 [%f] with_gen_id %( 'intf3.pas' %, %IF-NOT-EMPTY
  #13#10#13#10
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C |S ) %!= 'UseCaseController' ) 
   %C |X 
  %END-FOR
 %END-IF
)% //	[{%Cx=true}\
 %IF ( ( %C |x ) %==  true ) 
//	[%S%f_close_ifdef()\n]\
  %IF-NOT-EMPTY
   %S %f close_ifdef %( )% #13#10 
  %END-IF
//	]\
 %END-IF
//	%S%f_pas_BeforeUnitImplementation()\
 %S %f pas_BeforeUnitImplementation %( )% 

//	%f_pas_OpenUnitImplementation(%S)\
 [%f] pas_OpenUnitImplementation %( %S )% 
//	[{%Cx=true&"%f_with_gen_id(impl.pas,<{}{"%CO"=""}%CX>)"!=""}\
 %IF ( ( %C |x ) %==  true %&& 
   ( ( [%f] with_gen_id %( 'impl.pas' %, 
  %FOR %ITEM-CONDITION ( ( %C |O ) %== '' ) 
   %C |X 
  %END-FOR
)% )   %!= ''  ) ) 
//	[\n%S%f_open_ifdef()]\
  %IF-NOT-EMPTY
   #13#10
   %S %f open_ifdef %( )% 
  %END-IF
//	]\
 %END-IF
//	%f_pas_UsesInImpl(%S)\
 [%f] pas_UsesInImpl %( %S )% 
//	%f_pas_CloseUses(%S)\
 [%f] pas_CloseUses %( %S )% 
//	\
//	%f_with_gen_id(impl.pas,<{}{"%CO"=""}%CX>)\
 [%f] with_gen_id %( 'impl.pas' %, 
 %FOR %ITEM-CONDITION ( ( %C |O ) %== '' ) 
  %C |X 
 %END-FOR
)% //	[{%Cx=true&"%f_with_gen_id(impl.pas,<{}{"%CO"=""}%CX>)"!=""}\
 %IF ( ( %C |x ) %==  true %&& 
   ( ( [%f] with_gen_id %( 'impl.pas' %, 
  %FOR %ITEM-CONDITION ( ( %C |O ) %== '' ) 
   %C |X 
  %END-FOR
)% )   %!= ''  ) ) 
//	[\n%S%f_close_ifdef()\n]\
  %IF-NOT-EMPTY
   #13#10
   %S %f close_ifdef %( )% #13#10 
  %END-IF
//	]\
 %END-IF
//	%f_pas_CloseUnit(%S)\
 [%f] pas_CloseUnit %( %S )% 
//	%f_with_gen_id(impl.pas,<{}{"%CO"!=""}%CX>)
 [%f] with_gen_id %( 'impl.pas' %, 
 %FOR %ITEM-CONDITION ( ( %C |O ) %!= '' ) 
  %C |X 
 %END-FOR
)% //#UC END# *470F1571031Cfor4704865603A9*
; // intf.pas


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor4704865603A9*
//C [{%S{is namespace}=true}/%SN]
//P
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470321C1038Afor4704865603A9*
; // fctr.java


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for4704865603A9*
//C [{%S{is namespace}=true}/%SN]
//P
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *470321950119for4704865603A9*
; // java


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// С++ TIE-обвязка для DLL (_tie.cpp)
//+ dll.cpp
<<generator>> dll.cpp OBJECT IN %S
//#UC START# *47032ED002DEfor4704865603A9*
//C /%SN
//O [{"%f_need_tie_files(%S)"="true"}%SN_tie.cpp]
//P
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{"%f_need_tie_files(%S)"="true"}\
 %IF ( ( [%f] need_tie_files %( %S )% ) %== true ) 
//	%f_header(%S)
  [%f] header %( %S )% 
//	

//	%f_std_inc(%S)
  [%f] std_inc %( %S )% 
//	\#include %f_dump_include_path(%f_with_gen_id(dll.h,%SL),%S)
  '#include '
  [%f] dump_include_path %( [%f] with_gen_id %( 'dll.h' %, %S |L )% %, %S )% 
//	[{<{}{"%C{native definition}"="DLL outside"}{%CC}>!=0}%U[{_CUSTOM_INCLUDE_FOR_NATIVE_DEFINITION}
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %C get_up ( 'native definition' ) ) %== 'DLL outside' ) 
    ( %C |C ) 
   %END-FOR
   %!= 0 ) 
   %U%IF ( '_CUSTOM_INCLUDE_FOR_NATIVE_DEFINITION' ) 

//	]
   %END-IF
 //	][
  %END-IF
  %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
   %S %f open_ifdef %( )% 
  %END-IF
//	%SP[{"%S{is namespace}"="true"}namespace %SN {
  %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   'namespace '
   %S |N ' {'
//	]
  %END-IF
//	<%CX
  %FOR %C |X 
//	

//	>[{"%S{is namespace}"="true"}} // namespace %SN
  %END-FOR
  %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   '} // namespace '
   %S |N 
//	]%Sp
  %END-IF
  %S |p 
//	%f_footer(%S)
  [%f] footer %( %S )% 
//	]
 %END-IF
//#UC END# *47032ED002DEfor4704865603A9*
; // dll.cpp


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// С++ TIE-обвязка для DLL (_tie.h)
//+ dll.h
<<generator>> dll.h OBJECT IN %S
//#UC START# *47032EC4032Cfor4704865603A9*
//P
//C /%SN
//O [{"%f_need_tie_files(%S)"="true"}%SN_tie.h]
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{"%f_need_tie_files(%S)"="true"}\
 %IF ( ( [%f] need_tie_files %( %S )% ) %== true ) 
//	%f_h_header(%S)
  [%f] h_header %( %S )% 
//	%f_std_inc(%S)
  [%f] std_inc %( %S )% 
//	\#include "shared/Core/mng/IObject_tie.h"
  '#include "shared/Core/mng/IObject_tie.h"'
//	\#include "shared/Core/mng/PoolObjectManager.h"
  '#include "shared/Core/mng/PoolObjectManager.h"'
//	\#include %f_dump_include_path(%f_with_gen_id(h,%SL),%S)
  '#include '
  [%f] dump_include_path %( [%f] with_gen_id %( 'h' %, %S |L )% %, %S )% 
//	[<{\n}\#include %f_dump_include_path(%DL,%D)>
  %IF-NOT-EMPTY
   %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
    '#include '
    [%f] dump_include_path %( %D |L %, %D )% 
   %END-FOR
//	][
  %END-IF
  %IF-NOT-EMPTY

//	%S%f_open_ifdef()]
   %S %f open_ifdef %( )% 
  %END-IF
//	%SP[{"%S{is namespace}"="true"}namespace %SN {
  %S |P %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   'namespace '
   %S |N ' {'
//	]
  %END-IF
//	<%CX
  %FOR %C |X 
//	

//	>[{"%S{is namespace}"="true"}} // namespace %SN
  %END-FOR
  %IF ( ( %S get_up ( 'is namespace' ) ) %== true ) 
   '} // namespace '
   %S |N 
//	]%Sp	
  %END-IF
  %S |p '	'
//	%f_h_footer(%S)
  [%f] h_footer %( %S )% 
//	]
 %END-IF
//#UC END# *47032EC4032Cfor4704865603A9*
; // dll.h


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// Delphi интерфейсы для адаптера (.pas)
//+ pas
<<generator>> pas OBJECT IN %S
//#UC START# *470F152700FAfor4704865603A9*
//P
//O %SNUnit.pas
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	%f_set_var(WAS_USES,"0")\
 [%f] set_var %( 'WAS_USES' %, 0 )% 
//	%f_set_var(WAS_TYPE,"0")\
 [%f] set_var %( 'WAS_TYPE' %, 0 )% 
//	%f_set_var(WAS_CONST,"0")\
 [%f] set_var %( 'WAS_CONST' %, 0 )% 
//	unit %SNUnit; {$Z4}
 'unit '
 %S |N 'Unit; {$Z4}'
//	
//	%f_header(%S)
 [%f] header %( %S )% 
//	
//	interface
 'interface'
//	
//	[uses\
 %IF-NOT-EMPTY
  'uses'
//	%f_set_var(SELF,S)
  [%f] set_var %( 'SELF' %, 'S' )% 
//	%f_clear_list(USES_UNITS)\
  [%f] clear_list %( 'USES_UNITS' )% 
//	[{"<{}{"%CM"="Exception::Class"}{C}>"!="0"}%f_add_to_list(USES_UNITS,"SysUtils")]\
  %IF ( 
   %FOR %ITEM-CONDITION ( ( %C |M ) %== 'Exception::Class' ) 
    ( 'C' ) 
   %END-FOR
   %!= 0 ) 
   [%f] add_to_list %( 'USES_UNITS' %, 'SysUtils' )% 
  %END-IF
//	<{}{%f_exists_in_list(USES_UNITS,"%DNUnit")=false}%f_add_to_list(USES_UNITS,"%DNUnit")>\
  %FOR %ITEM-CONDITION ( ( [%f] exists_in_list %( 'USES_UNITS' %, %D |N 'Unit' )% ) %==  false ) 
   [%f] add_to_list %( 'USES_UNITS' %, %D |N 'Unit' )% 
  %END-FOR
//	[	<{\n\t, }{%f_is_empty(USES_UNITS)=false}{W}%f_pop_first_to_var(USES_UNITS,USES_UNIT)%{USES_UNIT}N>]%f_clear_list(USES_UNITS)\
  %IF-NOT-EMPTY
   '	'
   %FOR %ITEM-SEPARATOR #13#10#9', ' ; // %ITEM-SEPARATOR 
    %ITEM-CONDITION ( ( [%f] is_empty %( 'USES_UNITS' )% ) %==  false ) 
    ( 'W' ) 
    [%f] pop_first_to_var %( 'USES_UNITS' %, 'USES_UNIT' )% ( get_global_var ( 'USES_UNIT' ) |N ) 
   %END-FOR
  %END-IF
  [%f] clear_list %( 'USES_UNITS' )% 
//	[{}{\n\t;}<%D<{\n\t, }{"%C{native definition}"="DLL outside"}
  %IF ( ) 
   %ELSE
    #13#10#9';' 
   %THEN
   %FOR %D
    %FOR %ITEM-SEPARATOR #13#10#9', ' ; // %ITEM-SEPARATOR 
     %ITEM-CONDITION ( ( %C get_up ( 'native definition' ) ) %== 'DLL outside' ) 

//		%U[{_%{SELF}U_UNIT_FOR_%CN}
     '	'
     %U%IF ( '_( '
      ( get_global_var ( 'SELF' ) |U ) ) '_UNIT_FOR_( '
      %C |N ) ) 

//		]
      '	' 
     %END-IF
 //	>>	;]][{}{\n}
    %END-FOR
    %END-FOR
   '	;' 
  %END-IF
 %END-IF
 %IF ( ) 
  %ELSE
   #13#10 
  %THEN

//	

//	<{}{%f_is_interface(%C)=true|[{%t_is_container(%C)=true&%t_tied_elem(%C)=true}{false}true]=true}%CF>]<{\n}{%f_is_interface(%C)=false&[{%t_is_container(%C)=true&%t_tied_elem(%C)=true}{false}true]=false&%CS!=Constants}
  %FOR %ITEM-CONDITION ( ( [%f] is_interface %( %C )% ) %==  true %|| 
    ( %IF ( ( [%t] is_container %( %C )% ) %==  true %&& 
     ( ( [%t] tied_elem %( %C )% ) %==  true  ) ) 
    %ELSE
      false 
    %THEN
     true 
   %END-IF
   %==  true  ) ) 
   %C |F 
  %END-FOR
 %END-IF
 %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
  %ITEM-CONDITION ( ( [%f] is_interface %( %C )% ) %==  false %&& 
   ( %IF ( ( [%t] is_container %( %C )% ) %==  true %&& 
    ( ( [%t] tied_elem %( %C )% ) %==  true  ) ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
  %==  false  ) %&& 
   ( ( %C |S ) %!= 'Constants'  ) ) 

//	%CX><{}{%f_is_interface(%C)=true|[{%t_is_container(%C)=true&%t_tied_elem(%C)=true}{false}true]=true&%CS!=Constants}[
  %C |X 
 %END-FOR
 %FOR %ITEM-CONDITION ( ( [%f] is_interface %( %C )% ) %==  true %|| 
   ( %IF ( ( [%t] is_container %( %C )% ) %==  true %&& 
    ( ( [%t] tied_elem %( %C )% ) %==  true  ) ) 
   %ELSE
     false 
   %THEN
    true 
  %END-IF
  %==  true  ) %&& 
   ( ( %C |S ) %!= 'Constants'  ) ) 
  %IF-NOT-EMPTY

//	

//	%CX]><{}{%CS=Constants}
   %C |X 
  %END-IF
 %END-FOR
 %FOR %ITEM-CONDITION ( ( %C |S ) %== 'Constants' ) 

//	

//	%CX>
  %C |X 
 %END-FOR
//	
//	implementation
 'implementation'
//	end.
 'end.'
//#UC END# *470F152700FAfor4704865603A9*
; // pas


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for4704865603A9*
//	<%CX>
 %FOR %C |X 
 %END-FOR
//#UC END# *4A41A13D03D5for4704865603A9*
; // spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Interfaces>>


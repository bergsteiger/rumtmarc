////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewImplementationLayer/FormsPack/ModuleOperationPrim.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewImplementationLayer::FormsPack::ModuleOperationPrim
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: ModuleOperationPrim::Class
implementation @ <<ModuleOperationPrim>>
//= Delphi интерфейсы и реализация::MDAGenerator
//= OperationsPublisher::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v #
// - типы видимости
//a f
// - тип абстракции
// Параметры визуализации
//$ C 152,251,152
//$ l 0,64,64
//$ f 0,64,64

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p no test:b=false ? Отключает OnTest
//p no prefix:b=false ? Нет префикса у имени. Костыль для [$133891300]
//p ShowInToolbar:tribool=undefined ? 
//p ShortCut:s ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{no test}"!="%S{!no test}"}%f_up_prefix(%S) *no test* = *%S{no test}* - Отключает OnTest
 ?inherited
 %IF ( ( %S get_up ( 'no test' ) ) %!= ( %S get_up_def ( 'no test' ) ) ) 
  [%f] up_prefix %( %S )% ' *no test* = *'
  %S get_up ( 'no test' ) '* - Отключает OnTest'
//	][{"%S{no prefix}"!="%S{!no prefix}"}%f_up_prefix(%S) *no prefix* = *%S{no prefix}* - Нет префикса у имени. Костыль для \[$133891300\]
 %END-IF
 %IF ( ( %S get_up ( 'no prefix' ) ) %!= ( %S get_up_def ( 'no prefix' ) ) ) 
  [%f] up_prefix %( %S )% ' *no prefix* = *'
  %S get_up ( 'no prefix' ) '* - Нет префикса у имени. Костыль для [$133891300]'
//	][{"%S{ShowInToolbar}"!="%S{!ShowInToolbar}"}%f_up_prefix(%S) *ShowInToolbar* = *%S{ShowInToolbar}*
 %END-IF
 %IF ( ( %S get_up ( 'ShowInToolbar' ) ) %!= ( %S get_up_def ( 'ShowInToolbar' ) ) ) 
  [%f] up_prefix %( %S )% ' *ShowInToolbar* = *'
  %S get_up ( 'ShowInToolbar' ) '*'
//	][{"%S{ShortCut}"!="%S{!ShortCut}"}%f_up_prefix(%S) *ShortCut* = *%S{ShortCut}*
 %END-IF
 %IF ( ( %S get_up ( 'ShortCut' ) ) %!= ( %S get_up_def ( 'ShortCut' ) ) ) 
  [%f] up_prefix %( %S )% ' *ShortCut* = *'
  %S get_up ( 'ShortCut' ) '*'
//	]
 %END-IF

//%f _IsModuleOperation
; // wiki_up_print

: IsModuleOperation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A9D35E401D5for4A9D2DEA0027*
//	true
 true
//#UC END# *4A9D35E401D5for4A9D2DEA0027*
; // IsModuleOperation


// Создаёт слово словаря для операции модуля
//%f _SpellWordForModuleOperation
: SpellWordForModuleOperation OBJECT IN %S
//#UC START# *4DB06A78001Ffor4A9D2DEA0027*
//	%P%P%f_add_class(%SU_Word,SimpleClass,Tkw_%P%f_FinalName()_%f_N(%S),Word_Inst)\
 %P ->P %f add_class %( %S |U '_Word' %, 'SimpleClass' %, 'Tkw_'
 %P %f FinalName %( )% '_'
 [%f] N %( %S )% %, 'Word_Inst' )%  
//	[{"%{tfwModuleOperationWord}N"=""}%f_find_element(4DB060930263,tfwModuleOperationWord)]\
 %IF ( ( ( get_global_var ( 'tfwModuleOperationWord' ) |N ) ) %== '' ) 
  [%f] find_element %( '4DB060930263' %, 'tfwModuleOperationWord' )% 
 %END-IF
//	%{Word_Inst}%f_make_accessable(%{tfwModuleOperationWord}U)\
 ( get_global_var ( 'Word_Inst' ) %f make_accessable %( ( get_global_var ( 'tfwModuleOperationWord' ) |U ) )% ) 
//	%{Word_Inst}%f_add_inheritable(%{tfwModuleOperationWord}U)\
 ( get_global_var ( 'Word_Inst' ) %f add_inheritable %( ( get_global_var ( 'tfwModuleOperationWord' ) |U ) )% ) 
//	%P%f_add_dependency(%SU_%{Word_Inst}U_uses,%{Word_Inst}U,uses,,USES_Inst)\
 %P %f add_dependency %( %S |U '_'
 ( get_global_var ( 'Word_Inst' ) |U ) '_uses' %, ( get_global_var ( 'Word_Inst' ) |U ) %, 'uses' %, '' %, 'USES_Inst' )% 
//	%{Word_Inst}%f_set_documentation(Слово словаря для вызова операции модуля %P%f_FinalName().%SN[ (%P%f_FinalDoc()[ %SD])])\
 ( get_global_var ( 'Word_Inst' ) %f set_documentation %( 'Слово словаря для вызова операции модуля '
 %P %f FinalName %( )% '.'
 %S |N %IF-NOT-EMPTY
  ' ('
  %P %f FinalDoc %( )% %IF-NOT-EMPTY
   ' '
   %S |D 
  %END-IF
  ')' 
 %END-IF
)% ) //	%{Word_Inst}%f_set_up(ifdef,InsiderTest)\

//	[{<{}{%PN=VCMCustomization&%PS=VCMSubsystem}{C}>=0}\
 %IF ( 
  %FOR %ITEM-CONDITION ( ( %P |N ) %== 'VCMCustomization' %&& 
    ( ( %P |S ) %== 'VCMSubsystem'  ) ) 
   ( 'C' ) 
  %END-FOR
  %== 0 ) 
//	[{"%{StdResPrim}N"=""}%f_find_element(4DB69A1F02D4,StdResPrim)]\
  %IF ( ( ( get_global_var ( 'StdResPrim' ) |N ) ) %== '' ) 
   [%f] find_element %( '4DB69A1F02D4' %, 'StdResPrim' )% 
  %END-IF
//	%{Word_Inst}%f_make_accessable(%{StdResPrim}U)\
  ( get_global_var ( 'Word_Inst' ) %f make_accessable %( ( get_global_var ( 'StdResPrim' ) |U ) )% ) 
//	%{Word_Inst}%f_add_dependency(%SU_%{Word_Inst}U_uses_StdResPrim,%{StdResPrim}U,uses,,USES_Inst)\
  ( get_global_var ( 'Word_Inst' ) %f add_dependency %( %S |U '_'
  ( get_global_var ( 'Word_Inst' ) |U ) '_uses_StdResPrim' %, ( get_global_var ( 'StdResPrim' ) |U ) %, 'uses' %, '' %, 'USES_Inst' )% ) 

//	[{"%{tfwModuleOperationWord.GetModuleOperationCode}N"=""}%f_find_element(4DB079E00084,tfwModuleOperationWord.GetModuleOperationCode)]\
  %IF ( ( ( get_global_var ( 'tfwModuleOperationWord.GetModuleOperationCode' ) |N ) ) %== '' ) 
   [%f] find_element %( '4DB079E00084' %, 'tfwModuleOperationWord.GetModuleOperationCode' )% 
  %END-IF
//	%{Word_Inst}%f_add_override(4DB079E00084)\
  ( get_global_var ( 'Word_Inst' ) %f add_override %( 4 'DB079E00084' )% ) 
//	%{tfwModuleOperationWord.GetModuleOperationCode}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwModuleOperationWord.GetModuleOperationCode},%{Word_Inst})_var,\
  ( get_global_var ( 'tfwModuleOperationWord.GetModuleOperationCode' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwModuleOperationWord.GetModuleOperationCode' ) ) %, ( get_global_var ( 'Word_Inst' ) ) )% '_var' %, 
//	 {-}\
  ' {-}'
//	)\
)% ) //	%{tfwModuleOperationWord.GetModuleOperationCode}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwModuleOperationWord.GetModuleOperationCode},%{Word_Inst})_impl,\
  ( get_global_var ( 'tfwModuleOperationWord.GetModuleOperationCode' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwModuleOperationWord.GetModuleOperationCode' ) ) %, ( get_global_var ( 'Word_Inst' ) ) )% '_impl' %, 
//	 Result := TdmStdRes.mod_opcode_%P%f_FinalName()_%f_N(%S);\
  ' Result := TdmStdRes.mod_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ';'
//	)
)% ) 

//	]\
 %END-IF

//	%{Word_Inst}%f_set_up(NameForScript,моп::%f_str_replace(%P%f_FinalDoc()_[{}{%f_N(%S)}%SD], ,_))\
 ( get_global_var ( 'Word_Inst' ) %f set_up %( 'NameForScript' %, 'моп::'
 [%f] str_replace %( %P %f FinalDoc %( )% '_'
 %IF ( ) 
  %ELSE
   [%f] N %( %S )% 
  %THEN
  %S |D 
 %END-IF
%,  ' ' %, '_' )% )% ) 
//	[{"%{tfwAutoregisteringWord.GetWordNameForRegister}N"=""}%f_find_element(4DB0614603C8,tfwAutoregisteringWord.GetWordNameForRegister)]\
 %IF ( ( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) |N ) ) %== '' ) 
  [%f] find_element %( '4DB0614603C8' %, 'tfwAutoregisteringWord.GetWordNameForRegister' )% 
 %END-IF
//	%{Word_Inst}%f_add_override(4DB0614603C8)\
 ( get_global_var ( 'Word_Inst' ) %f add_override %( 4 'DB0614603C8' )% ) 
//	%{tfwAutoregisteringWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwAutoregisteringWord.GetWordNameForRegister},%{Word_Inst})_var,\
 ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) ) %, ( get_global_var ( 'Word_Inst' ) ) )% '_var' %, 
//	 {-}\
 ' {-}'
//	)\
)% ) //	%{tfwAutoregisteringWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwAutoregisteringWord.GetWordNameForRegister},%{Word_Inst})_impl,\
 ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) %f set_uc_content %( 'intf.pas' %, '_'
 [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) ) %, ( get_global_var ( 'Word_Inst' ) ) )% '_impl' %, 
//	 Result := '%f_loc_GetNameForScript(%{Word_Inst})';\
 ' Result := '''
 [%f] loc_GetNameForScript %( ( get_global_var ( 'Word_Inst' ) ) )% ''';'
//	)
)% ) //#UC END# *4DB06A78001Ffor4A9D2DEA0027*
; // SpellWordForModuleOperation


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа OperationsPublisher::Class
//%f _OperationsToFuncImpl
: OperationsToFuncImpl OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A8E9F9502BBfor4A9D2DEA0027*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,S)\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% 
//	%f_pas_OpenMethodImplementation("mod_opcode_%P%f_FinalName()_%f_N(%S)",%1)\
  [%f] pas_OpenMethodImplementation %( 'mod_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% %, %1 )% 
//	class function %f_pas_TypeName(%1).mod_opcode_%P%f_FinalName()_%f_N(%S) : TvcmMOpID;
  'class function '
  [%f] pas_TypeName %( %1 )% '.mod_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ' : TvcmMOpID;'
//	begin
  'begin'
//	 Result := g_module_opcode_%P%f_FinalName()_%f_N(%S);
  ' Result := g_module_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ';'
//	 Assert((Result.rMoID \> 0) AND (Result.rOpID \> 0));
  ' Assert((Result.rMoID > 0) AND (Result.rOpID > 0));'
//	end;\
  'end;'
//	]
 %END-IF
//#UC END# *4A8E9F9502BBfor4A9D2DEA0027*
; // OperationsToFuncImpl


// реализация абстрактного стереотипа OperationsPublisher::Class
// Операции в функции
//%f _OperationsToFuncIntf
: OperationsToFuncIntf OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A8E9D5E0038for4A9D2DEA0027*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,S)\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% 
//	\n   class function mod_opcode_%P%f_FinalName()_%f_N(%S) : TvcmMOpID;
  #13#10'   class function mod_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ' : TvcmMOpID;'
//	     \{ %S%PD -\> %SD \}]
  '     { '
  %S ->P |D  ' -> '
  %S |D ' }' 
 %END-IF
//#UC END# *4A8E9D5E0038for4A9D2DEA0027*
; // OperationsToFuncIntf


// реализация абстрактного стереотипа OperationsPublisher::Class
// Определяет необходимые uses для операций
//%f _OperationsToUses
: OperationsToUses OBJECT IN %S
//#UC START# *4A82DDA6016Afor4A9D2DEA0027*
//	%f_pas_PutToUses(%S%P)
 [%f] pas_PutToUses %( %S ->P  )% 
//#UC END# *4A82DDA6016Afor4A9D2DEA0027*
; // OperationsToUses


// реализация абстрактного стереотипа OperationsPublisher::Class
// Операции в секцию Var
//%f _OperationsToVar
: OperationsToVar OBJECT IN %S
//#UC START# *4A8E9D3A01FEfor4A9D2DEA0027*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,S)\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% 
//	\n g_module_opcode_%P%f_FinalName()_%f_N(%S) : TvcmMOpID;]
  #13#10' g_module_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ' : TvcmMOpID;' 
 %END-IF
//#UC END# *4A8E9D3A01FEfor4A9D2DEA0027*
; // OperationsToVar


// реализация абстрактного стереотипа OperationsPublisher::Class
// Публикует операции
//%f _PublishOperations
: PublishOperations OBJECT IN %S
//#UC START# *4A770F770199for4A9D2DEA0027*
//	[{%f_exists_in_list(PUBLISHED_OPERATIONS_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(PUBLISHED_OPERATIONS_LIST,S)\
  [%f] add_to_list %( 'PUBLISHED_OPERATIONS_LIST' %, 'S' )% 
//	\n g_module_opcode_%P%f_FinalName()_%f_N(%S) := 
  #13#10' g_module_opcode_'
  %P %f FinalName %( )% '_'
  [%f] N %( %S )% ' := '
//	  PublishModuleOperation(%P%f_FinalTypeName(), '%f_N(%S)', '%SD'\
  '  PublishModuleOperation('
  %P %f FinalTypeName %( )% ', '''
  [%f] N %( %S )% ''', '''
  %S |D ''''
//	[{%S{no prefix}=true}, true]);\
  %IF ( ( %S get_up ( 'no prefix' ) ) %==  true ) 
   ', true' 
  %END-IF
  ');'
//	]
 %END-IF
//#UC END# *4A770F770199for4A9D2DEA0027*
; // PublishOperations


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Элемент попадает в секцию Published
//%f _IsPublishedAccess
: IsPublishedAccess OBJECT IN %S
//#UC START# *49F703730268for4A9D2DEA0027*
//	false
 false
//#UC END# *49F703730268for4A9D2DEA0027*
; // IsPublishedAccess


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for4A9D2DEA0027*
//	[{%S{no test}!=true}%S%f_pas_DoMethodImplementation(%1,%2,"test")]\
 %IF ( ( %S get_up ( 'no test' ) ) %!=  true ) 
  %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'test' )% 
 %END-IF
//	%S%f_pas_DoMethodImplementation(%1,%2,"exec")
 %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'exec' )% 
//#UC END# *494BEC7C03E5for4A9D2DEA0027*
; // pas_MethodImplementation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor4A9D2DEA0027*
//	[{%S{no test}!=true}%S%f_pas_DoMethodInterface(%1,%2,"test")\n]\
 %IF ( ( %S get_up ( 'no test' ) ) %!=  true ) 
  %S %f pas_DoMethodInterface %( %1 %, %2 %, 'test' )% #13#10 
 %END-IF
//	%S%f_pas_DoMethodInterface(%1,%2,"exec")
 %S %f pas_DoMethodInterface %( %1 %, %2 %, 'exec' )% 
//#UC END# *494BEC6A038Afor4A9D2DEA0027*
; // pas_MethodInterface


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя метода
//%f _pas_MethodName
: pas_MethodName OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for4A9D2DEA0027*
//	[{%1N=exec}{op%f_N(%S)Test}op%f_N(%S)]
 %IF ( ( %1 |N ) %== 'exec' ) 
  %ELSE
   'op'
   [%f] N %( %S )% 'Test' 
  %THEN
  'op'
  [%f] N %( %S )% 
 %END-IF
//#UC END# *494BD6C80075for4A9D2DEA0027*
; // pas_MethodName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
//%f _pas_Params
: pas_Params OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor4A9D2DEA0027*
//	[{%1N=exec}{const aParams: IvcmTestParamsPrim}const aParams: IvcmExecuteParamsPrim]
 %IF ( ( %1 |N ) %== 'exec' ) 
  %ELSE
   'const aParams: IvcmTestParamsPrim' 
  %THEN
  'const aParams: IvcmExecuteParamsPrim' 
 %END-IF
//#UC END# *494BDCF3030Efor4A9D2DEA0027*
; // pas_Params


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor4A9D2DEA0027*
//	[{"%S{Options}"!=""}\
//	#   item
//	#    Name = '[{%S{no prefix}!=true}op]%f_N(%S)'
//	#    Options = \[%S{Options}\]
//	#   end\
//	]
//#UC END# *49F5795900ECfor4A9D2DEA0027*
; // dfm



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<ModuleOperationPrim>>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/InterfaceTypes/Enum.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::InterfaceTypes::Enum
//
// Перечисление
// ---
// Значения перечисления определяются именами его атрибутов (без указания типа)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Enum::Class
implementation @ <<Enum>>
//? Перечисление
//? Значения перечисления определяются именами его атрибутов (без указания типа)
//< *::Class,*::Category

//= InterfaceGeneratorWithJava::MDAGenerator
//= Генерация JavaScript::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +#-
// - типы видимости
//Y code_enum.gif
//L code_enum
//D
// - запрещена форвард-декларация
// Параметры визуализации
//$ C 240,230,210
//$ l 100,75,35
//$ f 100,75,35

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p force usage:b=false ? явно определяет, что элемент будет кем-то использован (нужно для проверки)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{force usage}"!="%S{!force usage}"}%f_up_prefix(%S) *force usage* = *%S{force usage}* - явно определяет, что элемент будет кем-то использован (нужно для проверки)
 ?inherited
 %IF ( ( %S get_up ( 'force usage' ) ) %!= ( %S get_up_def ( 'force usage' ) ) ) 
  [%f] up_prefix %( %S )% ' *force usage* = *'
  %S get_up ( 'force usage' ) '* - явно определяет, что элемент будет кем-то использован (нужно для проверки)'
//	]
 %END-IF


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // wiki_up_print

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470F198F0000*
//c                              {}
//r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}: {имя %SS, используемого в качестве серверного типа, не должно совпадать с именем родителя}
//r {%M{force usage}=false&%ax=false&%S{force usage}=false}: {%SS ни кем не используется}
//#UC END# *4704C0E30186for470F198F0000*
; // constraint


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F198F0000*
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	[#%S%f_open_ifdef()
 %IF-NOT-EMPTY
  out_indent %S %f open_ifdef %( )% 
//	]#enum %SN {
 %END-IF
 out_indent 'enum '
 %S |N ' {'
//	#	<{\n#\t, }[%S{children prefix}_]%CN[ // %f_str_replace(%CD,\n,%f_space(%C))]>
 out_indent '	'
 %FOR %ITEM-SEPARATOR #13#10
  out_indent #9', ' ; // %ITEM-SEPARATOR 
  %IF-NOT-EMPTY
   %S get_up ( 'children prefix' ) '_' 
  %END-IF
  %C |N %IF-NOT-EMPTY
   ' // '
   [%f] str_replace %( %C |D %, #13#10 %, [%f] space %( %C )% )% 
  %END-IF
 %END-FOR
//	#};[
 out_indent '};'
 %IF-NOT-EMPTY

//	#%S%f_close_ifdef()]
  out_indent %S %f close_ifdef %( )% 
 %END-IF
//#UC END# *47022C88029Ffor470F198F0000*
; // h


// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
//+ idl
<<generator>> idl OBJECT IN %S
//#UC START# *47022BBE0261for470F198F0000*
//	<#%FF
 %FOR out_indent %F |F 
//	>%f_docs(%S)\
 %END-FOR
 [%f] docs %( %S )% 
//	#enum %SN {
 out_indent 'enum '
 %S |N ' {'
//	#	<{\n#\t, }%CN[ // %f_str_replace(%CD,\n,%f_space(%C))]>
 out_indent '	'
 %FOR %ITEM-SEPARATOR #13#10
  out_indent #9', ' ; // %ITEM-SEPARATOR 
  %C |N %IF-NOT-EMPTY
   ' // '
   [%f] str_replace %( %C |D %, #13#10 %, [%f] space %( %C )% )% 
  %END-IF
 %END-FOR
//	#};
 out_indent '};'
//#UC END# *47022BBE0261for470F198F0000*
; // idl


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor470F198F0000*
//R  
//	[{%f_exists_in_list(GENERATED_INTF,"%f_pas_TypeName(%S)")!=true}\
 %IF ( ( [%f] exists_in_list %( 'GENERATED_INTF' %, [%f] pas_TypeName %( %S )% )% ) %!=  true ) 
//	%f_add_to_list(GENERATED_INTF,"%f_pas_TypeName(%S)")\
  [%f] add_to_list %( 'GENERATED_INTF' %, [%f] pas_TypeName %( %S )% )% 
//	%f_pas_OpenType(%S)\
  [%f] pas_OpenType %( %S )% 
//	#%f_pas_TypeName(%S) = (\
  out_indent [%f] pas_TypeName %( %S )% ' = ('
//	[\n# \{* %SD \}]
  %IF-NOT-EMPTY
   #13#10
   out_indent ' {* '
   %S |D ' }' 
  %END-IF
//	#  <{\n#, }%C%f_pas_Prefix()%CN\
  out_indent '  '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent ', ' ; // %ITEM-SEPARATOR 
   %C %f pas_Prefix %( )% %C |N 
//	[{"%CD"!=""} // %f_str_replace(%CD,\n,%f_space(%C))]\
   %IF ( ( %C |D ) %!= '' ) 
    ' // '
    [%f] str_replace %( %C |D %, #13#10 %, [%f] space %( %C )% )% 
   %END-IF
//	>
  %END-FOR
//	#);//%f_pas_TypeName(%S)]
  out_indent ');//'
  [%f] pas_TypeName %( %S )% 
 %END-IF
//#UC END# *470F1571031Cfor470F198F0000*
; // intf.pas


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470F198F0000*
//S class %SN;
//O [{%t_nested_scope_def(%P)=false&%f_is_server_type(%S)=false}%SN.java]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{%f_is_server_type(%S)=false}[{%t_nested_scope_def(%P)=false}\
 %IF ( ( [%f] is_server_type %( %S )% ) %==  false ) 
  %IF ( ( [%t] nested_scope_def %( %P )% ) %==  false ) 
//	%f_header(%S)
   [%f] header %( %S )% 
//	package %f_dump_java_package(%S);
   'package '
   [%f] dump_java_package %( %S )% ';'
//	]
  %END-IF
//	#%t_visibility(%S,"%XU")[{%t_nested_scope_def(%P)=true}static ]%t_abstract_type(%S)enum %SN {
  out_indent [%t] visibility %( %S %, %X |U )% %IF ( ( [%t] nested_scope_def %( %P )% ) %==  true ) 
   'static ' 
  %END-IF
  [%t] abstract_type %( %S )% 'enum '
  %S |N ' {'
//	#	<{\n#\t, }%CN[ // %f_str_replace(%CD,\n,%f_space(%C))]>
  out_indent '	'
  %FOR %ITEM-SEPARATOR #13#10
   out_indent #9', ' ; // %ITEM-SEPARATOR 
   %C |N %IF-NOT-EMPTY
    ' // '
    [%f] str_replace %( %C |D %, #13#10 %, [%f] space %( %C )% )% 
   %END-IF
  %END-FOR
//	#} // %SN][{%f_is_server_type(%S)=false}\
  out_indent '} // '
  %S |N 
 %END-IF
 %IF ( ( [%f] is_server_type %( %S )% ) %==  false ) 
//	[{%t_nested_scope_def(%P)=false}
  %IF ( ( [%t] nested_scope_def %( %P )% ) %==  false ) 

//	%f_footer(%S)
   [%f] footer %( %S )% 
//	]]
  %END-IF
 %END-IF
//#UC END# *470321950119for470F198F0000*
; // java


// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// Delphi интерфейсы для адаптера (.pas)
//+ pas
<<generator>> pas OBJECT IN %S
//#UC START# *470F152700FAfor470F198F0000*
//	[%f_pas_OpenType(%S)\n]\
 %IF-NOT-EMPTY
  [%f] pas_OpenType %( %S )% #13#10 
 %END-IF
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	#P%SN = ^T%SN;
 out_indent 'P'
 %S |N ' = ^T'
 %S |N ';'
//	#T%SN = (
 out_indent 'T'
 %S |N ' = ('
//	#	<{\n#\t, }%CN[ // %f_str_replace(%CD,\n,%f_space(%C))]>
 out_indent '	'
 %FOR %ITEM-SEPARATOR #13#10
  out_indent #9', ' ; // %ITEM-SEPARATOR 
  %C |N %IF-NOT-EMPTY
   ' // '
   [%f] str_replace %( %C |D %, #13#10 %, [%f] space %( %C )% )% 
  %END-IF
 %END-FOR
//	#);
 out_indent ');'
//#UC END# *470F152700FAfor470F198F0000*
; // pas


// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for470F198F0000*
//G %PU
//#UC END# *46E6D4BB0339for470F198F0000*
; // wiki


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: Enum::Class::Attribute
end. // <<Enum>>

implementation @ :: <<Enum>> <<Attribute>> ;
//? идентификаторы, составляющие множества
//= Delphi интерфейсы и реализация::MDAGenerator
//= InterfaceGenerator::MDAGenerator

// Параметры стереотипа
//v +
// - типы видимости
//Y code_attr.gif
//L code_attr
//T 
// - может не иметь "цели" (типа/результата)
//l a
// - возможные типы связи атрибута

// Генераторы
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for470F1A0100DA*
//#UC END# *46E6D4BB0339for470F1A0100DA*
; // wiki


// генератор idl спецификаций (.idl)
//+ idl
<<generator>> idl OBJECT IN %S
//#UC START# *47022BBE0261for470F1A0100DA*
//#UC END# *47022BBE0261for470F1A0100DA*
; // idl


// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F1A0100DA*
//#UC END# *47022C88029Ffor470F1A0100DA*
; // h


// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470F1A0100DA*
//#UC END# *470321950119for470F1A0100DA*
; // java


// Delphi интерфейсы для адаптера (.pas)
//+ pas
<<generator>> pas OBJECT IN %S
//#UC START# *470F152700FAfor470F1A0100DA*
//#UC END# *470F152700FAfor470F1A0100DA*
; // pas


// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor470F1A0100DA*
//#UC END# *470F1571031Cfor470F1A0100DA*
; // intf.pas


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[Delphi интерфейсы и реализация::MDAGenerator]f_wiki_up_print()
 call-inherited:: 'Delphi интерфейсы и реализация' wiki_up_print %( )%


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // wiki_up_print

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470F1A0100DA*
//c                                                                       {}
//r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}:    {имя %SS не должно совпадать с именем %P%SS}
//#UC END# *4704C0E30186for470F1A0100DA*
; // constraint



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // :: <<Enum>> <<Attribute>> ;


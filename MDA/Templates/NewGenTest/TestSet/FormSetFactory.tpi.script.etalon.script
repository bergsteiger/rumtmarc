////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewImplementationLayer/Factories/FormSetFactory.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewImplementationLayer::Factories::FormSetFactory
//
// Фабрика сборки форм
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: FormSetFactory::Class
implementation @ <<FormSetFactory>>
//? Фабрика сборки форм
//= method::Class
//= ModuleOpRecall::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +#-
// - типы видимости
//a f
// - тип абстракции
// Параметры визуализации
//$ C 127,255,212
//$ l 64,224,208
//$ f 64,224,208

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

// Определяет, что элемент является фабрикой на VCM-модуле
//%f _IsFactoryOnModule
; // st_space_key

: IsFactoryOnModule OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A816DBF0044for4A73234800B8*
//	true
 true
//#UC END# *4A816DBF0044for4A73234800B8*
; // IsFactoryOnModule


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа ModuleOpRecall::Class
// Выводит реализацию метода перенаправления операции
//%f _OutRecallImpl
: OutRecallImpl OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A76CC1D010Dfor4A73234800B8*
//	[{%f_exists_in_list(RECALL_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'RECALL_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(RECALL_LIST,S)\
  [%f] add_to_list %( 'RECALL_LIST' %, 'S' )% 
//	[{%SV=PublicAccess}%S%f_pas_MethodImplementation(%1,"r","recall")]\
  %IF ( ( %S |V ) %== 'PublicAccess' ) 
   %S %f pas_MethodImplementation %( %1 %, 'r"' %, 'recall' )% 
  %END-IF
//	]
 %END-IF
//#UC END# *4A76CC1D010Dfor4A73234800B8*
; // OutRecallImpl


// реализация абстрактного стереотипа ModuleOpRecall::Class
// Выводит интерфейс метода перенаправления операции
//%f _OutRecallIntf
: OutRecallIntf OBJECT IN %S
// параметры: aCaller: MDAClass = %1
//#UC START# *4A76CC1902FEfor4A73234800B8*
//	[{%f_exists_in_list(RECALL_LIST,S)!=true}\
 %IF ( ( [%f] exists_in_list %( 'RECALL_LIST' %, 'S' )% ) %!=  true ) 
//	%f_add_to_list(RECALL_LIST,S)\
  [%f] add_to_list %( 'RECALL_LIST' %, 'S' )% 
//	[{%SV=PublicAccess}\n%S%f_pas_MethodInterface(%1,"r","recall")]\
  %IF ( ( %S |V ) %== 'PublicAccess' ) 
   #13#10
   %S %f pas_MethodInterface %( %1 %, 'r"' %, 'recall' )% 
  %END-IF
//	]
 %END-IF
//#UC END# *4A76CC1902FEfor4A73234800B8*
; // OutRecallIntf


// реализация абстрактного стереотипа ModuleOpRecall::Class
//%f _RecallToImplUses
: RecallToImplUses OBJECT IN %S
//#UC START# *4A9CF8A30296for4A73234800B8*
//#UC END# *4A9CF8A30296for4A73234800B8*
; // RecallToImplUses


// реализация абстрактного стереотипа ModuleOpRecall::Class
//%f _RecallToIntfUses
: RecallToIntfUses OBJECT IN %S
//#UC START# *4A9CF892039Afor4A73234800B8*
//#UC END# *4A9CF892039Afor4A73234800B8*
; // RecallToIntfUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4A73234800B8*
//	%S%[inherited]\
 inherited
//	[{%S{NO_FACTORY_BRACKECTS}!=true}\
 %IF ( ( %S get_up ( 'NO_FACTORY_BRACKECTS' ) ) %!=  true ) 
//	[{"%{vcmBase}N"=""}%f_find_element(vcmBase,vcmBase)]\
  %IF ( ( ( get_global_var ( 'vcmBase' ) |N ) ) %== '' ) 
   [%f] find_element %( 'vcmBase' %, 'vcmBase' )% 
  %END-IF
//	%P%f_make_accessable(%{vcmBase}U)\
  %P %f make_accessable %( ( get_global_var ( 'vcmBase' ) |U ) )% 
//	%P%f_add_dependency(%SU_%{vcmBase}U_uses,%{vcmBase}U,uses,,USES_Inst)\
  %P %f add_dependency %( %S |U '_'
  ( get_global_var ( 'vcmBase' ) |U ) '_uses' %, ( get_global_var ( 'vcmBase' ) |U ) %, 'uses' %, '' %, 'USES_Inst' )% 
//	%S%f_set_pre_uc_content(intf.pas,_%f_pas_MethodOwnerID(%S,%P)_var,\
  %S %f set_pre_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( %S %, %P )% '_var' %, 
//	var
  'var'
//	 __WasEnter : Boolean;
  ' __WasEnter : Boolean;'
//	)\
)% //	%S%f_set_pre_uc_content(intf.pas,_%f_pas_MethodOwnerID(%S,%P)_impl,\
  %S %f set_pre_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( %S %, %P )% '_impl' %, 
//	 __WasEnter := vcmEnterFactory;
  ' __WasEnter := vcmEnterFactory;'
//	 try
  ' try'
//	)\
)% //	%S%f_set_post_uc_content(intf.pas,_%f_pas_MethodOwnerID(%S,%P)_impl,
  %S %f set_post_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( %S %, %P )% '_impl,'
//	 finally
  ' finally'
//	  if __WasEnter then
  '  if __WasEnter then'
//	   vcmLeaveFactory;
  '   vcmLeaveFactory;'
//	 end;//try..finally\
  ' end;//try..finally'
//	)\
)% //	]
 %END-IF
//#UC END# *4B2A19E3038Bfor4A73234800B8*
; // DoSpell


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит тело метода
// 
// Modification = get|set|area|areareaf|o|r|f
//%f _pas_MethodBodyPrim
: pas_MethodBodyPrim OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2, RealizeType: a-string = %3, aOverrider: MDAClass = %4
//#UC START# *494BB3A201A2for4A73234800B8*
//	[{%2N=recall}{\
 %IF ( ( %2 |N ) %== 'recall' ) 
  %ELSE
//	%S%[inherited]\
   inherited
//	}
  %THEN

//	begin
  'begin'
//	 <{, }{%C#f_IsMethod()!=true&%CC=Operation}\
  ' '
  %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C %?f IsMethod %( )% ) %!=  true %&& 
    ( ( %C |C ) %== 'Operation'  ) ) 
//	[{"%C%f_pas_ResultTypeName()"!=""}Result := ]\
   %IF ( ( %C %f pas_ResultTypeName %( )% ) %!= '' ) 
    'Result := ' 
   %END-IF
//	%f_pas_TypeName(%P).%f_N(%S)[(%C<{, }%CN>)];>
   [%f] pas_TypeName %( %P )% '.'
   [%f] N %( %S )% %IF-NOT-EMPTY
    '('
    %C
    %FOR %ITEM-SEPARATOR ', ' ; // %ITEM-SEPARATOR 
     %C |N 
    %END-FOR
     ')' 
   %END-IF
   ';' 
  %END-FOR
//	end;\
  'end;'
//	]
 %END-IF
//#UC END# *494BB3A201A2for4A73234800B8*
; // pas_MethodBodyPrim


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа результата функции
//%f _pas_ResultTypeName
: pas_ResultTypeName OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDD190361for4A73234800B8*
//#UC END# *494BDD190361for4A73234800B8*
; // pas_ResultTypeName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<FormSetFactory>>


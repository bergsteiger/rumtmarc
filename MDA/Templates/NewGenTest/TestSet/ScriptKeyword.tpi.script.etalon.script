////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Scripting/ScriptKeyword.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Scripting::ScriptKeyword
//
// Слово скрипта
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: ScriptKeyword::Class
implementation @ <<ScriptKeyword>>
//? Слово скрипта
//= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +
// - типы видимости
//a fra
// - тип абстракции
// Параметры визуализации
//$ C 230,230,250

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p NameForScript:s ? 
//p is immediate:tribool=undefined ? Определяет - является ли слово исполняемым во время компиляции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{NameForScript}"!="%S{!NameForScript}"}%f_up_prefix(%S) *NameForScript* = *%S{NameForScript}*
 ?inherited
 %IF ( ( %S get_up ( 'NameForScript' ) ) %!= ( %S get_up_def ( 'NameForScript' ) ) ) 
  [%f] up_prefix %( %S )% ' *NameForScript* = *'
  %S get_up ( 'NameForScript' ) '*'
//	][{"%S{is immediate}"!="%S{!is immediate}"}%f_up_prefix(%S) *is immediate* = *%S{is immediate}* - Определяет - является ли слово исполняемым во время компиляции
 %END-IF
 %IF ( ( %S get_up ( 'is immediate' ) ) %!= ( %S get_up_def ( 'is immediate' ) ) ) 
  [%f] up_prefix %( %S )% ' *is immediate* = *'
  %S get_up ( 'is immediate' ) '* - Определяет - является ли слово исполняемым во время компиляции'
//	]
 %END-IF


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
; // wiki_up_print

: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4F2C0D86003E*
//	%S%[inherited]\
 inherited

//	[{%Gx!=true}\
 %IF ( ( %G |x ) %!=  true ) 
//	[{"%{tfwAutoregisteringWord}N"=""}%f_find_element(tfwAutoregisteringWord,tfwAutoregisteringWord)]\
  %IF ( ( ( get_global_var ( 'tfwAutoregisteringWord' ) |N ) ) %== '' ) 
   [%f] find_element %( 'tfwAutoregisteringWord' %, 'tfwAutoregisteringWord' )% 
  %END-IF
//	%S%f_make_accessable(%{tfwAutoregisteringWord}U)\
  %S %f make_accessable %( ( get_global_var ( 'tfwAutoregisteringWord' ) |U ) )% 
//	%S%f_add_inheritable(%{tfwAutoregisteringWord}U)\
  %S %f add_inheritable %( ( get_global_var ( 'tfwAutoregisteringWord' ) |U ) )% 
//	]\
 %END-IF

//	[{%S%f_IsMixIn()!=true}\
 %IF ( ( %S %f IsMixIn %( )% ) %!=  true ) 
//	[{"%{tfwAutoregisteringWord.GetWordNameForRegister}N"=""}%f_find_element(4DB0614603C8,tfwAutoregisteringWord.GetWordNameForRegister)]\
  %IF ( ( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) |N ) ) %== '' ) 
   [%f] find_element %( '4DB0614603C8' %, 'tfwAutoregisteringWord.GetWordNameForRegister' )% 
  %END-IF
//	%S%f_add_override(4DB0614603C8)\
  %S %f add_override %( 4 'DB0614603C8' )% 
//	%{tfwAutoregisteringWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwAutoregisteringWord.GetWordNameForRegister},%S)_var,\
  ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) ) %, %S )% '_var' %, 
//	 {-}\
  ' {-}'
//	)\
)% ) //	%{tfwAutoregisteringWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{tfwAutoregisteringWord.GetWordNameForRegister},%S)_impl,\
  ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'tfwAutoregisteringWord.GetWordNameForRegister' ) ) %, %S )% '_impl' %, 
//	 Result := \
  ' Result := '
//	[{"%S{NameForScript}"=""}{\
  %IF ( ( %S get_up ( 'NameForScript' ) ) %== '' ) 
   %ELSE
//	'%S{NameForScript}'\
    ''''
    %S get_up ( 'NameForScript' ) ''''
//	}\
   %THEN
//	'[%P#f_pas_ElementPrefixBase():]%f_str_replace(%f_N(%S),_,:)'\
   ''''
   %IF-NOT-EMPTY
    %P %?f pas_ElementPrefixBase %( )% ':' 
   %END-IF
   [%f] str_replace %( [%f] N %( %S )% %, '_' %, ':' )% ''''
//	]\
  %END-IF
//	;\
  ';'
//	)\
)% ) //	]\
 %END-IF

//	[{"%S{is immediate}"!="undefined"&"%S{is immediate}"!=""}\
 %IF ( ( %S get_up ( 'is immediate' ) ) %!= 'undefined' %&& 
   ( ( %S get_up ( 'is immediate' ) ) %!= ''  ) ) 
//	[{"%{TtfwWord.IsImmediate}N"=""}%f_find_element(4DB6D7F70155,TtfwWord.IsImmediate)]\
  %IF ( ( ( get_global_var ( 'TtfwWord.IsImmediate' ) |N ) ) %== '' ) 
   [%f] find_element %( '4DB6D7F70155' %, 'TtfwWord.IsImmediate' )% 
  %END-IF
//	%S%f_add_override(4DB6D7F70155)\
  %S %f add_override %( 4 'DB6D7F70155' )% 
//	%{TtfwWord.IsImmediate}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwWord.IsImmediate},%S)_var,\
  ( get_global_var ( 'TtfwWord.IsImmediate' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'TtfwWord.IsImmediate' ) ) %, %S )% '_var' %, 
//	 {-}\
  ' {-}'
//	)\
)% ) //	%{TtfwWord.IsImmediate}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwWord.IsImmediate},%S)_impl,\
  ( get_global_var ( 'TtfwWord.IsImmediate' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( 'TtfwWord.IsImmediate' ) ) %, %S )% '_impl' %, 
//	 Result := %S{is immediate};\
  ' Result := '
  %S get_up ( 'is immediate' ) ';'
//	)\
)% ) //	]
 %END-IF
//#UC END# *4B2A19E3038Bfor4F2C0D86003E*
; // DoSpell


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Является ли примесью
//%f _IsMixIn
: IsMixIn OBJECT IN %S
//#UC START# *4947E5D40127for4F2C0D86003E*
//	[{%Sa=abstract}{false}true]
 %IF ( ( %S |a ) %== 'abstract' ) 
  %ELSE
    false 
  %THEN
   true 
 %END-IF
//#UC END# *4947E5D40127for4F2C0D86003E*
; // IsMixIn


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Нужно ли документацию к слову скрипта, которое представляет элемента
//%f _NeedsKeywordDocumentation
: NeedsKeywordDocumentation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4F30B869036Efor4F2C0D86003E*
//	[{%S%f_IsMixIn()=true}{\
 %IF ( ( %S %f IsMixIn %( )% ) %==  true ) 
  %ELSE
//	true\
    true 
//	}\
  %THEN
//	false\
   false 
//	]
 %END-IF
//#UC END# *4F30B869036Efor4F2C0D86003E*
; // NeedsKeywordDocumentation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _ScriptKeywordDocumentationName
: ScriptKeywordDocumentationName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4F30B8E60385for4F2C0D86003E*
//	[%P#f_pas_ElementPrefixBase()_]%f_N(%S)
 %IF-NOT-EMPTY
  %P %?f pas_ElementPrefixBase %( )% '_' 
 %END-IF
 [%f] N %( %S )% 
//#UC END# *4F30B8E60385for4F2C0D86003E*
; // ScriptKeywordDocumentationName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
//%f _pas_TypeName
: pas_TypeName OBJECT IN %S
//#UC START# *4947F8AD02A1for4F2C0D86003E*
//	[{%S%f_IsMixIn()=true}{\
 %IF ( ( %S %f IsMixIn %( )% ) %==  true ) 
  %ELSE
//	Tkw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_N(%S))\
   'Tkw'
   %IF-NOT-EMPTY
    '_'
    %P %?f pas_ElementPrefixBase %( )% 
   %END-IF
   [%f] to_borland %( [%f] N %( %S )% )% 
//	}\
  %THEN
//	_kw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_N(%S))_\
  '_kw'
  %IF-NOT-EMPTY
   '_'
   %P %?f pas_ElementPrefixBase %( )% 
  %END-IF
  [%f] to_borland %( [%f] N %( %S )% )% '_'
//	]
 %END-IF
//#UC END# *4947F8AD02A1for4F2C0D86003E*
; // pas_TypeName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя модуля в котором содержится элемент
//%f _pas_UnitName
: pas_UnitName OBJECT IN %S
//#UC START# *4948065C01DFfor4F2C0D86003E*
//	[{%S%f_IsMixIn()=true}{\
 %IF ( ( %S %f IsMixIn %( )% ) %==  true ) 
  %ELSE
//	kw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_N(%S))\
   'kw'
   %IF-NOT-EMPTY
    '_'
    %P %?f pas_ElementPrefixBase %( )% 
   %END-IF
   [%f] to_borland %( [%f] N %( %S )% )% 
//	}\
  %THEN
//	kw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_N(%S)).imp\
  'kw'
  %IF-NOT-EMPTY
   '_'
   %P %?f pas_ElementPrefixBase %( )% 
  %END-IF
  [%f] to_borland %( [%f] N %( %S )% )% '.imp'
//	]
 %END-IF
//#UC END# *4948065C01DFfor4F2C0D86003E*
; // pas_UnitName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<ScriptKeyword>>


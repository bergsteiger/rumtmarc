////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Elements/TagValue.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Elements::TagValue
//
// Предопределённое значение тега
// ---
// Экземпляр [Tag].
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: TagValue::Class
implementation @ <<TagValue>>
//? Предопределённое значение тега
//? Экземпляр [Tag].
//> TagChild::Class
//> InnerTag::Class

//= WikiImplClass::Class
//= AttrValueSpeller::Class
//= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//a r
// - тип абстракции
//Y code_evd_tag_value.gif
//L code_evd_tag_value
// Параметры визуализации
//$ C 152,251,152
//$ L 0,0,0
//$ l 50,205,50
//$ F 0,0,0
//$ f 50,205,50

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for485FB3190099*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for485FB3190099*
; // constraint


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor485FB3190099*
//#UC END# *49F5795900ECfor485FB3190099*
; // dfm


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor485FB3190099*
//R  
//	[#// %SD\n]\
 %IF-NOT-EMPTY
  out_indent '// '
  %S |D #13#10 
 %END-IF
//	# with MakeTag do
 out_indent ' with MakeTag do'
//	# begin
 out_indent ' begin'
//	[{%Gx=true}#  IntA\[k2_tiStyle\] := \
 %IF ( ( %G |x ) %==  true ) 
  out_indent '  IntA[k2_tiStyle] := '
//	%G<{}{%CN=Handle}\
  %G
  %FOR %ITEM-CONDITION ( ( %C |N ) %== 'Handle' ) 
//	[{%C%V%TS!=UMLPrimitive}%S#f_pas_Prefix()]\
   %IF ( ( %C ->V ->T |S   ) %!= 'UMLPrimitive' ) 
    %S %?f pas_Prefix %( )% 
   %END-IF
//	%C%VN>;\n]\
   %C ->V |N  
  %END-FOR
   ';'#13#10 
 %END-IF
//	[# <{\n# }{%CC!=Class}%CX>\n]\
 %IF-NOT-EMPTY
  out_indent ' '
  %FOR %ITEM-SEPARATOR #13#10
   out_indent ' ' ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C |C ) %!= 'Class' ) 
   %C |X 
  %END-FOR
  #13#10 
 %END-IF
//	%f_shift_intend(+1)\
 [%f] shift_intend %( 1 )% 
//	[<{\n}{%CC=Class}%CX>\n]\
 %IF-NOT-EMPTY
  %FOR %ITEM-SEPARATOR #13#10 ; // %ITEM-SEPARATOR 
   %ITEM-CONDITION ( ( %C |C ) %== 'Class' ) 
   %C |X 
  %END-FOR
  #13#10 
 %END-IF
//	%f_shift_intend(-1)\
 [%f] shift_intend %( -1 )% 
//	#  AddValue(Box);
 out_indent '  AddValue(Box);'
//	# end;//with MakeTag
 out_indent ' end;//with MakeTag'
//#UC END# *470F15B800CBfor485FB3190099*
; // impl.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor485FB3190099*
//	%f_pas_OpenConst(%S)\
 [%f] pas_OpenConst %( %S )% 
//	<{}{%CN=Handle} %S#f_pas_Prefix()%SN = \
 %FOR %ITEM-CONDITION ( ( %C |N ) %== 'Handle' ) 
  ' '
  %S %?f pas_Prefix %( )% %S |N ' = '
//	[{%C%V%TS=Constants}%f_pas_Unit(%C%V%T).%C%V%T%f_pas_ElementPrefix()]\
  %IF ( ( %C ->V ->T |S   ) %== 'Constants' ) 
   [%f] pas_Unit %( %C ->V ->T   )% '.'
   %C ->V ->T %f pas_ElementPrefix %( )%   
  %END-IF
//	%C%VN;
  %C ->V |N  ';'
//	  { %SD } >
  '  { '
  %S |D ' } ' 
 %END-FOR
//#UC END# *470F1571031Cfor485FB3190099*
; // intf.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for485FB3190099*
//#UC END# *477398E501C0for485FB3190099*
; // intf2.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for485FB3190099*
//#UC END# *4774D2A20372for485FB3190099*
; // intf3.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for485FB3190099*
//#UC END# *4DE79AFC0030for485FB3190099*
; // sd


// реализация абстрактного стереотипа Документация::MDAGenerator
// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor485FB3190099*
//#UC END# *4E65F581015Afor485FB3190099*
; // link_to_requests_hack


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: TagValue::Class::Attribute
end. // <<TagValue>>

implementation @ :: <<TagValue>> <<Attribute>> ;
//? Атрибут
//= AttrValueSpeller::Class
//= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
//a r
// - тип абстракции
//Y code_attr.gif
//L code_attr
//T 
// - может не иметь "цели" (типа/результата)
//l a
// - возможные типы связи атрибута

// Генераторы
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor485FB4850287*
//#UC END# *470F1571031Cfor485FB4850287*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor485FB4850287*
//	[ %S%f_open_ifdef()\n#]\
 %IF-NOT-EMPTY
  ' '
  %S %f open_ifdef %( )% #13#10
  out_indent 
 %END-IF
//	 \
 ' '
//	[{%f_substr_from_begin(%VN,1)='}{\
 %IF ( ( [%f] substr_from_begin %( %V |N %, 1 )% ) %== '''' ) 
  %ELSE
//	[{%VN=false|%VN=true}{\
   %IF ( ( %V |N ) %==  false %|| 
     ( ( %V |N ) %==  true  ) ) 
    %ELSE
//	IntA\
     'IntA'
//	}\
    %THEN
//	BoolA\
    'BoolA'
//	]\
   %END-IF
//	}\
  %THEN
//	StrA\
  'StrA'
//	]\
 %END-IF
//	\[k2_ti%f_N(%S)\] := \
 '[k2_ti'
 [%f] N %( %S )% '] := '

//	[{%TS=TagValue}{\
 %IF ( ( %T |S ) %== 'TagValue' ) 
  %ELSE
//	[{%VN=@}{\
   %IF ( ( %V |N ) %== '@' ) 
    %ELSE
//	[{%V%TS=Enum|%V%TS=Constants}{\
     %IF ( ( %V ->T |S  ) %== 'Enum' %|| 
       ( ( %V ->T |S  ) %== 'Constants'  ) ) 
      %ELSE
//	[{%f_substr_from_begin(%VN,1)='}{\
       %IF ( ( [%f] substr_from_begin %( %V |N %, 1 )% ) %== '''' ) 
        %ELSE
//	%VN\
         %V |N 
//	}\
        %THEN
//	str_%f_get_AttrConstName(%S).AsStr\
        'str_'
        [%f] get_AttrConstName %( %S )% '.AsStr'
//	]\
       %END-IF
//	}\
      %THEN
//	Ord(%V%T%f_pas_ElementPrefix()%VN)\
      'Ord('
      %V ->T %f pas_ElementPrefix %( )%  %V |N ')'
//	]\
     %END-IF
//	}\
    %THEN
//	k2_TransparentValue\
    'k2_TransparentValue'
//	]\
   %END-IF
//	}\
  %THEN
//	%T#f_pas_Prefix()%TN\
  %T %?f pas_Prefix %( )% %T |N 
//	]\
 %END-IF
//	;\
 ';'

//	[\n# %S%f_close_ifdef()]
 %IF-NOT-EMPTY
  #13#10
  out_indent ' '
  %S %f close_ifdef %( )% 
 %END-IF
//#UC END# *470F15B800CBfor485FB4850287*
; // impl.pas


// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for485FB4850287*
//#UC END# *477398E501C0for485FB4850287*
; // intf2.pas


// 3-я секция интерфейса. Например поле для свойства.
//+ intf3.pas
<<generator>> intf3.pas OBJECT IN %S
//R  
//#UC START# *4774D2A20372for485FB4850287*
//#UC END# *4774D2A20372for485FB4850287*
; // intf3.pas


// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor485FB4850287*
//#UC END# *49F5795900ECfor485FB4850287*
; // dfm


// Скрипты TC (.sd)
//+ sd
<<generator>> sd OBJECT IN %S
//R  
//#UC START# *4DE79AFC0030for485FB4850287*
//#UC END# *4DE79AFC0030for485FB4850287*
; // sd


// Хак для [$281531116]
//+ link_to_requests_hack
<<generator>> link_to_requests_hack OBJECT IN %S
//#UC START# *4E65F581015Afor485FB4850287*
//#UC END# *4E65F581015Afor485FB4850287*
; // link_to_requests_hack


// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for485FB4850287*
//#UC END# *46E6D4BB0339for485FB4850287*
; // wiki


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for485FB4850287*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for485FB4850287*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor485FB4850287*
//	attr
 'attr'
//#UC END# *4705CBD6003Efor485FB4850287*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for485FB4850287*
//#UC END# *470484D50138for485FB4850287*
; // wiki_up_add_gen


// перекрытие базового стереотипа AttrValueSpeller::Class
//%f _SpellAttrValue
: SpellAttrValue OBJECT IN %S
//#UC START# *4F9002060002for485FB4850287*
//	%S%[inherited]\
 inherited
//	[{%f_substr_from_begin(%VN,1)='}\
 %IF ( ( [%f] substr_from_begin %( %V |N %, 1 )% ) %== '''' ) 
//	%f_get_TagTable(%S,%1)\
  [%f] get_TagTable %( %S %, %1 )% 
//	%{TAG_TABLE_CONSTANTS}%f_add_attribute(%SU_LocalValue,,\
  ( get_global_var ( 'TAG_TABLE_CONSTANTS' ) %f add_attribute %( %S |U '_LocalValue' %, '' %, 
//	%f_get_AttrConstName(%S) = %VN,\
  [%f] get_AttrConstName %( %S )% ' = '
  %V |N %, 
//	Attr_Inst)\
  'Attr_Inst' )% ) 
//	%{Attr_Inst}%f_set_documentation(Локализуемое значения атрибута %f_get_AttrConstName(%S))\
  ( get_global_var ( 'Attr_Inst' ) %f set_documentation %( 'Локализуемое значения атрибута '
  [%f] get_AttrConstName %( %S )% )% ) 
//	%{Attr_Inst}%f_set_up(ifdef,%S{ifdef})\
  ( get_global_var ( 'Attr_Inst' ) %f set_up %( 'ifdef' %, %S get_up ( 'ifdef' ) )% ) 
//	%{Attr_Inst}%f_set_up(ifndef,%S{ifndef})\
  ( get_global_var ( 'Attr_Inst' ) %f set_up %( 'ifndef' %, %S get_up ( 'ifndef' ) )% ) 
//	]
 %END-IF

//f _get_TagTable
; // SpellAttrValue

end. // :: <<TagValue>> <<Attribute>> ;

: get_TagTable OBJECT IN %S
//	[{"%{TAG_TABLE_CONSTANTS_PACK}N"=""}\
 %IF ( ( ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) |N ) ) %== '' ) 
//	%1%P%f_add_class(%1U_AttrValues_Pack,UtilityPack,%1N_AttrValues,TAG_TABLE_CONSTANTS_PACK)\
  %1 ->P %f add_class %( %1 |U '_AttrValues_Pack' %, 'UtilityPack' %, %1 |N '_AttrValues' %, 'TAG_TABLE_CONSTANTS_PACK' )%  
//	%{TAG_TABLE_CONSTANTS_PACK}%f_set_documentation(Локализуемые значения атрибутов значений тегов таблицы тегов %1N)\
  ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) %f set_documentation %( 'Локализуемые значения атрибутов значений тегов таблицы тегов '
  %1 |N )% ) 
//	%{TAG_TABLE_CONSTANTS_PACK}%f_add_class(%1U_AttrValues,LocalConst,AttrValues,TAG_TABLE_CONSTANTS)\
  ( get_global_var ( 'TAG_TABLE_CONSTANTS_PACK' ) %f add_class %( %1 |U '_AttrValues' %, 'LocalConst' %, 'AttrValues' %, 'TAG_TABLE_CONSTANTS' )% ) 
//	%{TAG_TABLE_CONSTANTS}%f_set_documentation(Локализуемые значения атрибутов значений тегов)\
  ( get_global_var ( 'TAG_TABLE_CONSTANTS' ) %f set_documentation %( 'Локализуемые значения атрибутов значений тегов' )% ) 
//	%{TAG_TABLE_CONSTANTS}%f_set_visibility_type(PublicAccess)\
  ( get_global_var ( 'TAG_TABLE_CONSTANTS' ) %f set_visibility_type %( 'PublicAccess' )% ) 
//	]
 %END-IF

//f _get_AttrConstName
; // get_TagTable

: get_AttrConstName OBJECT IN %S
//@ %SU
//	<{_}{%PC!=Category&%PS!=TagTable}{%Pr}%f_N(%P)>\
 %FOR %ITEM-SEPARATOR '_' ; // %ITEM-SEPARATOR 
  %ITEM-CONDITION ( ( %P |C ) %!= 'Category' %&& 
   ( ( %P |S ) %!= 'TagTable'  ) ) 
  ( %P |r ) 
  [%f] N %( %P )% 
 %END-FOR
//	_%f_str_replace(%SN,$,_D_)_Value
 '_'
 [%f] str_replace %( %S |N %, '$' %, '_D_' )% '_Value'
//#UC END# *4F9002060002for485FB4850287*
; // get_AttrConstName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

